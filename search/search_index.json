{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Configuring the settings is as easy as opening a serial menu. You can use any serial monitor or terminal emulator to quickly and easily change and store the DataLogger IoT settings via its USB-C interface.</p> <p>There are plenty of free alternatives out there to configure the DataLogger IoT. For the scope of this tutorial we will be using Tera Term.</p> <ul> <li>Tera Term (Windows)</li> <li>RealTerm (Windows)</li> <li>CoolTerm (Windows, Mac, Linux)</li> </ul> <p>If this is the your first time using a terminal window, We recommend checking out the tutorial below for more information on serial terminal basics.</p> Serial Terminal Basics <p>The above guides will show you how to open the correct port for the DataLogger IoT and how to set the baud rate to 115200 baud. You can change the DataLogger IoT's baud rate through the configuration menus too should you need to.</p> <p>Note</p> <p>For users with an Arduino IDE, you could also use the Arduino Serial Monitor by setting the line ending to Newline. Users will also need to CTRL + Enter when sending any character to the DataLogger IoT. However, we recommend using one of the terminals mentioned earlier.</p>"},{"location":"configuration/#initialization-and-serial-output","title":"Initialization and Serial Output","text":"<p>Connect the DataLogger IoT to a USB cable and connect to your computer. The addressable RGB LED will light up green as it initializes. When you open the serial terminal you should see the following output when the board initializes:</p> <p>The messages in the serial terminal provide us with a lot of the DataLogger's configuration:</p> <ul> <li>The DataLogger IoT software version (in this case is v01.00.00 - build 000072).</li> <li>As the DataLogger IoT is initializing, the system settings are being restored from the last saved preference.</li> <li>There no WiFi credentials and the board has failed to connect. This output will change once you provide the WiFi credentials and are able to connect to the network.</li> <li>There are 3x devices currently detected and they are connected through I<sup>2</sup>C through the Qwiic port and SPI. These are the on-board sensors for the DataLogger IoT. There may be more devices that are detected depending on the firmware and what is connected to the ports. Since these were recognized, they were loaded onto the DataLogger IoT.</li> <li>The current date and time is shown (by default), the date and time is set to 1-1-1970 and 00:00:00). This value will change depending on the clock source through NTP, RTC, or a u-blox GNSS module.</li> <li>The time the board has been running will be shown in the uptime.</li> <li>The primary external time source that the board syncs is currently through the NTP client. This can be configured depending on your clock source.</li> <li>The board name (in this case, it was SparkFun DataLogger IoT - 9DoF)</li> <li>The board ID (in this case it was SFD16C8F0D1AD6B8)</li> <li>The microSD card has been found, the type of memory card it is, the size of the memory card, how much memory is used, and how much is available.</li> <li>If there is a WiFi network name saved, the SSID will be shown along with information indicating whether the board was able to connect to the WiFi network. By default there is no SSID saved in memory.</li> <li>Parameters for low power mode will be provided indicating if deep sleep is enabled, sleep interval, and wake interval.</li> <li>Parameters for logging are also provided for the logging interval, the format for the serial output, format for the microSD card, current saved filename, and file rotation period.</li> <li>The board will also show the available IoT services that are enabled for the DataLogger IoT.</li> <li>The output will finish by telling you what devices are connected to the DataLogger IoT again.</li> </ul> <p>Once the DataLogger IoT has initialized, the DataLogger IoT will begin outputting comma separated values (CSV). This is the default output that is set for the DataLogger IoT - 9DoF. Of course, you will not have as many readings on the DataLogger IoT since the 6DoF IMU and magnetometer are not populated on that version of the board.</p> <p>Note</p> <p>Depending on your DataLogger IoT preferences, your device may output as a JSON format like the image shown below.   </p> <p>The data scrolling up the screen show what each device's output is along with their associated unit if it is available. Your milage will vary depending on the board version that you have and what device is connected</p> <ul> <li><code>MAX17048.Voltage (V)</code></li> <li><code>MAX17048.State of Charge (%)</code></li> <li><code>MAX17048.Charge Rate (%/hr)</code></li> <li><code>ISM330.Accel X (milli-g)</code></li> <li><code>ISM330.Accel Y (milli-g)</code></li> <li><code>ISM330.Accel Z (milli-g)</code></li> <li><code>ISM330.Gyro X (milli-dps)</code></li> <li><code>ISM330.Gyro Y (milli-dps)</code></li> <li><code>ISM330.Gyro Z (milli-dps)</code></li> <li><code>ISM330.Temperature (C)</code></li> <li><code>MMC5983.X Field (Gauss)</code></li> <li><code>MMC5983.Y Field (Gauss)</code></li> <li><code>MMC5983.Z Field (Gauss)</code></li> <li><code>MMC5983.Temperature (C)</code></li> </ul> <p>The output will vary depending on what is connected so you may get additional readings in the output and it may not be in the following order listed above. The logging rate defaults to about 0.067Hz (or 15000ms), so as the data scrolls past, you will see the last value settle at about 0.067Hz.</p>"},{"location":"configuration/#main-menu","title":"Main Menu","text":"<p>Right! Let's open the main menu by pressing on any key in the serial terminal program.</p> <p>You will be prompted with a few options. Once in the configuration menu, all three colors of the addressable RGB LED will turn on to mix to produce the color white indicating that you are navigating through the menu.</p>"},{"location":"configuration/#exiting-and-saving","title":"Exiting and Saving","text":"<p>When exiting the menu's, you will be prompted with either an x or b. You can use either one when exiting the menus as well as X or B. Note that you will need to use either of these keys when making a change in order for the DataLogger IoT to save any changes in memory. Make sure that you receive the following message indicating that the settings were saved: <code>[I] Saving System Settings</code>. The DataLogger IoT will the continue reading the devices and outputting the readings through the serial terminal.</p>"},{"location":"configuration/#cancelling-changes","title":"Cancelling Changes","text":"<p>You can also use any of your Esc or arrow keys (i.e. \u2191, \u2193, \u2190, \u2192) to exit. However, using the escape or arrow keys will not save any changes in memory once the reset button is hit or whenever power is cycled.</p>"},{"location":"configuration/#timeout-from-inactivity","title":"Timeout from Inactivity","text":"<p>The menus will slowly exit out after 2 minutes of inactivity, so if you do not press a key the DataLogger IoT will return to its previous menu. It will continue to move back until it reaches the main menu. After another additional 2 minutes of inactivity, the board will exit begin logging data again. When the menu exits from inactivity, any changes will not be saved in memory as well.</p>"},{"location":"configuration/#settings","title":"Settings","text":"<p>Let's start by configuring the DataLogger's system settings. Send a 1 through the serial terminal. You will have the option to adjust various settings ranging from the your preferences, time source to synchronize the date and time, WiFi network, how the device logs data, which IoT service to use, and firmware updates.</p> <p>Note</p> <p>You may notice after entering a 1 that there is a slight delay before the DataLogger IoT responds. The delay was added to allow some time for the DataLogger IoTto receive an additional digit for any option greater than 9. If you want to head to option 1 immediately without the slight delay, you can hit the Enter key to enter the Application Settings.</p> <p>We'll go over each of these options below.</p>"},{"location":"configuration/#general-application-settings","title":"General: Application Settings","text":"<p>In the Settings Menu, send a 1 to adjust the Application Settings. As of firmware v01.00.02, users can now adjust the baud rate of the serial console output and the menu system's timeout value.</p> <p>In the Application Settings Menu, users will be able to configure the addressable RGB's LED through software, menu timeout, microSD card's output format, serial console's output format, terminal's baud rate, deep sleep parameters, and view the current settings of the DataLogger IoT similar to when the board was initialized. Depending on your preference and how you are logging data, you can adjust the data as CSV or JSON.</p> <ul> <li>1 LED Enabled \u2014 Enable/Disable the on-board RGB LED activity<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>2 Menu Timeout \u2014 Inactivity timeout period for the menu system<ul> <li>Accepts the following values:<ul> <li>1 30 Seconds = 30</li> <li>2 60 Seconds = 60 (default)</li> <li>3 2 Minutes = 120</li> <li>4 5 Minutes = 300</li> <li>5 10 Minutes = 600</li> <li>b Back</li> </ul> </li> </ul> </li> <li>3 SD Card Format \u2014 Enable and set the output format<ul> <li>Accepts the following values:<ul> <li>1 to disable = 0</li> <li>2 CSV format (default) = 1</li> <li>3 JSON format = 2</li> </ul> </li> </ul> </li> <li>4 Serial Console Format \u2014 Enable and set the output format<ul> <li>Accepts the following values:<ul> <li>1 to disable = 0</li> <li>2 CSV format (default) = 1</li> <li>3 JSON format = 2</li> </ul> </li> </ul> </li> <li>5 Terminal Baud Rate \u2014 Update terminal baud rate. Changes take effect on restart.<ul> <li>Accepts an unsigned integer between 1200 to 50000:<ul> <li>115200 (default)</li> </ul> </li> </ul> </li> <li>6 Enable System Sleep \u2014 If enabled, sleep the system<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>7 Sleep Interval (sec) \u2014 The interval the system will sleep for<ul> <li>Accepts an integer between 5 to 86400 :<ul> <li>30 seconds (default)</li> </ul> </li> </ul> </li> <li>8 Wake Interval (sec) \u2014 The interval the system will operate between sleep period<ul> <li>Accepts an integer between 60 to 86400 :<ul> <li>120 seconds (default)</li> </ul> </li> </ul> </li> <li>9 About... \u2014 Details about the system</li> <li>b Back</li> </ul> <p>Note</p> <p>Once the baud rate is changed and saved, make sure to adjust the baud rate of your serial terminal when the board is reset. If you forgot the baud rate, you can hold the BOOT button down for 20 seconds to erase the on-board preferences (besides the baud rate, this also includes any other settings that were saved) and restart the board.</p> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"configuration/#general-save-settings","title":"General: Save Settings","text":"<p>In the Settings menu, send a 2 to adjust the Save Settings.</p> <p>In the Save Settings Menu, users will be able to save, restore, or clear any preferences in memory (i.e. persistent storage) or a saved file to a fallback device (i.e. microSD card). Note that any passwords and secret keys are not saved in the save settings file. You will need to manually enter those values in the file saved on the microSD card.</p> <ul> <li>1 Fallback Restore \u2014 If unable to restore settings, use the fallback source (JSON File)<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>2 Fallback Save \u2014 Save settings also saves on the fallback storage (JSON File)<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>3 Save Settings \u2014 Save current settings to persistent storage<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>4 Restore Settings \u2014 Restore saved settings<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>5 Clear Settings \u2014 Erase the saved settings on the device<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>6 Save to Fallback \u2014 Save System Settings to the fallback storage (JSON File)<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>7 Restore from Fallback \u2014 Restore system settings from the fallback storage (JSON File)<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>If you have the Fallback Save enabled or selected the option Save to Fallback, you will notice an additional file called datalogger.json saved in the microSD card. This is the fallback file that is saved. Using a text editor, you can edit this file to adjust the settings or provide WiFi credentials, certificates, and keys. You can use option 7 to restore the settings on your DataLogger IoT.</p> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"configuration/#general-time-sources","title":"General: Time Sources","text":"<p>Note</p> <p>Make sure to connect the ESP32-WROOM to a 2.4GHz WiFi network and ensure that is not a guest network that requires you to sign in. Unfortunately, 5GHz WiFi is not supported on the ESP32-WROOM module.</p> <p>In the Settings Menu, send 3 to manage the time reference sources.</p> <p>In this menu, you will have options to update the primary reference clock, update interval, add a secondary reference clock, and update it's interval. By default, the primary reference clock is set to use the Network Time Protocol (NTP). To synchronization the time, you will need to connect to a 2.4GHz WiFi network in order to update the time. To add a secondary clock, make sure to connect a compatible Qwiic-enabled devices that can keep track of time (i.e. Qwiic Real Time Clock Module - RV-8803 or a Qwiic-enabled u-blox GNSS module).</p> <ul> <li>1 Reference Clock \u2014 The current reference clock source<ul> <li>Accepts the following values:<ul> <li>1 for no clock</li> <li>2 for NTP Client (default)</li> </ul> </li> </ul> </li> <li>2 Update Interval \u2014 Main clock update interval in minutes. 0 = No update<ul> <li>Accepts an unsigned integer:<ul> <li>0 = No update</li> <li>60 seconds (default)</li> </ul> </li> </ul> </li> <li>3 Enable Clock Fallback \u2014 Use a valid reference clock if the primary is not available<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>4 Dependant Interval \u2014 Connected depedant clock update interval in minutes. 0 = No update<ul> <li>Accepts an unsigned integer:<ul> <li>0 = No update</li> <li>60 seconds (default)</li> </ul> </li> </ul> </li> <li>5 Update Connected \u2014 Update connected clocks on main clock update<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>Note</p> <p>As an alternative to using the NTP, users can also add a compatible Qwiic-enabled device that can keep track of time (i.e. Qwiic Real Time Clock Module - RV-8803 or a Qwiic-enabled u-blox GNSS module). These can be set as the primary or secondary clock.</p> <p> </p> <p>Once attached, you will be prompted with additional options to select a primary reference clock.</p> <p> </p> <p>If you are using a u-blox GNSS module, make sure that you have enough satellites in view. The option to add or configure the GNSS will not be available if there are not enough satellites in view. If you are using the Qwiic Real Time Clock Module - RV-8803, you may need to go into the device settings to manually adjust the date and time.</p> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"configuration/#network-wifi-network","title":"Network: WiFi Network","text":"<p>Note</p> <p>The ESP32-WROOM can only connect to a 2.4GHz WiFi network. Unfortunately, 5GHz is not supported on the ESP32-WROOM module.</p> <p>In the Settings Menu, send a 4 to configure the WiFi settings. As of firmware v01.00.02, up to 4 sets of WiFi credentials can be saved.</p> <p>Once you are in the WiFi Network menu, you can enable/disable WiFi and save the WiFi network credentials. Once connected to a 2.4GHz WiFi network, you can synchronize the date and time, connect to an IoT service to log data, and update the latest firmware over-the-air. Since the WiFi is turned on by default, you will simply need to save the WiFi network's name and password.</p> <ul> <li>1 Enabled \u2014 Enable or Disable the WiFi Network connection<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>2 Network Name \u2014 The SSID of the WiFi network<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_NETWORK_NAME</code>\", you would manually type MY_NETWORK_NAME. When finished hit the ENTER key</li> </ul> </li> </ul> </li> <li>3 Password \u2014 The Password to connect to the WiFi network<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_SUPER_SECRET_PASSWORD</code>\", you would manually type MY_SUPER_SECRET_PASSWORD. Note that as you type the password, each character will be replaced with an asterisk (<code>*</code>). When finished hit the ENTER key.</li> </ul> </li> </ul> </li> <li>4 Network 2 Name \u2014 Alternative network 2 SSID<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_NETWORK_NAME_2</code>\", you would manually type MY_NETWORK_NAME_2. When finished hit the ENTER key</li> </ul> </li> </ul> </li> <li>5 Network 2 Password \u2014 Alternative network 2 Password<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_SUPER_SECRET_PASSWORD_2</code>\", you would manually type MY_SUPER_SECRET_PASSWORD_2. Note that as you type the password, each character will be replaced with an asterisk (<code>*</code>). When finished hit the ENTER key.</li> </ul> </li> </ul> </li> <li>6 Network 3 Name \u2014 Alternative network 2 SSID<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_NETWORK_NAME_3</code>\", you would manually type MY_NETWORK_NAME_3. When finished hit the ENTER key</li> </ul> </li> </ul> </li> <li>7 Network 3 Password \u2014 Alternative network 3 Password<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_SUPER_SECRET_PASSWORD_3</code>\", you would manually type MY_SUPER_SECRET_PASSWORD_3. Note that as you type the password, each character will be replaced with an asterisk (<code>*</code>). When finished hit the ENTER key.</li> </ul> </li> </ul> </li> <li>8 Network 4 Name \u2014 Alternative network 2 SSID<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_NETWORK_NAME_4</code>\", you would manually type MY_NETWORK_NAME_4. When finished hit the ENTER key</li> </ul> </li> </ul> </li> <li>9 Network 4 Password \u2014 Alternative network 4 Password<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_SUPER_SECRET_PASSWORD_4</code>\", you would manually type MY_SUPER_SECRET_PASSWORD_4. Note that as you type the password, each character will be replaced with an asterisk (<code>*</code>). When finished hit the ENTER key.</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p> <p>Press the reset button or cycle power to restart the DataLogger IoT. You can also go through the menu and reset the device through software as well. Once the board is reset, the DataLogger will attempt to connect to a WiFi network. If you are successful, the output will indicate that the board connected to a WiFi network and will update the current time through a NTP Client.</p> <p>Note</p> <p>If you have a Qwiic Dynamic NFC/RFID Tag connected to the board's Qwiic connector, you can easily update your WiFi credentials! Just make sure to save the WiFi credentials to the tag.</p> <p>Note</p> <p>If you saved your preferences to a JSON file on your microSD card's root directory, you can also save your WiFi credentials and load the system settings from the menu as well!</p>"},{"location":"configuration/#network-ntp-client","title":"Network: NTP Client","text":"<p>In the Settings menu, send a 5 to adjust the NTP Client settings.</p> <p>In this menu, users will have the option to enable/disable the NTP client, select the primary/secondary server, or adjust the time zone for your area.</p> <ul> <li>1 Enabled \u2014 Enable or Disable the NTP Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>2 NTP Server One \u2014 The primary NTP Server to use<ul> <li>Accepts a string:<ul> <li>time.nist.gov (default)</li> </ul> </li> </ul> </li> <li>3 NTP Server Two \u2014  The secondary NTP Server to use<ul> <li>Accepts a string:<ul> <li>pool.ntp.org (default)</li> </ul> </li> </ul> </li> <li>4 The Time Zone \u2014 Time zone setting string for the device<ul> <li>Accepts a string:<ul> <li>MST7MDT,M3.2.0,M11.1.0 (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>Note</p> <p>To adjust the time zone, you will need to enter a POSIX timezone string variable. Try checking out this CSV in this GitHub repo and searching for the timezone string variable in your area. For more information about POSIX format specification check out this article from IBM.</p> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"configuration/#logging-logger","title":"Logging: Logger","text":"<p>In the Settings menu, send a 6 to adjust how data is logged.</p> <p>In the Logger menu, users will have the option to add a timestamp, increment sample numbering, data format, or reset the sample counter. Note that the timestamp is the system clock and syncs with the reference clock that was chosen. Data from the Qwiic-enabled devices that keep track of time can also be included for each data entry by default.</p> <ul> <li>1 Timestamp Mode \u2014 Enable timestamp output and set the format of a log entry timestamp<ul> <li>1 for no timestamp (default) = 0</li> <li>2 for milliseconds since program start = 1</li> <li>3 for seconds since Epoch = 2</li> <li>4 for Date Time - USA Date format = 3</li> <li>5 for Date Time = 4</li> <li>6 for ISO08601 Timestamp = 5</li> <li>7 for ISO08601 Timestamp with Time Zone = 6</li> </ul> </li> <li>2 Sample Numbering \u2014 An incremental count of the current log entry<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>3 Numbering Increment \u2014 Increment amount for Sample Numbering<ul> <li>Accepts an unsigned integer between 1 to 10000:<ul> <li>1 (default)</li> </ul> </li> </ul> </li> <li>4 SD Card Format \u2014 Enable and set the output format<ul> <li>Accepts an integer:<ul> <li>1 to disable  = 0</li> <li>2 CSV format  = 1 (default)</li> <li>3 JSON format = 2</li> </ul> </li> </ul> </li> <li>5 Serial Console Format \u2014 Enable and set the output format<ul> <li>Accepts an integer:<ul> <li>1 to disable  = 0</li> <li>2 CSV format  = 1 (default)</li> <li>3 JSON format = 2</li> </ul> </li> </ul> </li> <li>6 Reset Sample Counter \u2014 Reset the sample number counter to the provided value<ul> <li>Accepts an unsigned integer between 0 to 10000:<ul> <li>0 (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p> <p>Press the reset button or cycle power to restart the DataLogger IoT. You can also go through the menu and reset the device through software as well. Below is an example with the ISO08601 time that was added to the output.</p>"},{"location":"configuration/#logging-logging-timer","title":"Logging: Logging Timer","text":"<p>In the Settings menu, send an 7 to adjust the Logging Timer.</p> <p>Adjusting the interval for the Logging Timer will change the amount of time between log entries.</p> <ul> <li>1 Interval \u2014 The timer interval in milliseconds<ul> <li>Accepts an integer:<ul> <li>15000 milliseconds (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"configuration/#logging-data-file","title":"Logging: Data File","text":"<p>In the Settings menu, send an 8 to adjust the Logging Data File.</p> <p>Adjusting these parameters allows you to change the filename prefix, the number the files starts at, and how often the DataLogger will create a new file on the microSD card. For example, the default file will be saved as sfe0001.txt. After 1 day, the DataLogger will rotate files by creating a new file named sfe0002.txt. THe DataLogger will begin logging data in this new file. The purpose of this log rotation is to limit the size of each file prevent issues when opening large files.</p> <ul> <li>1 Rotate Period \u2014 Time between file rotation<ul> <li>Accepts the following values:<ul> <li>1 for 6 hours = 6</li> <li>2 for 12 hours  = 12</li> <li>3 for 1 day (24 hours)  = 24 (default)</li> <li>4 for 2 days (48 hours)  = 48</li> <li>5 for 1 week (168 hours)  = 168</li> </ul> </li> </ul> </li> <li>2 File Start Number \u2014 The number the filename rotation starts with<ul> <li>Accepts an unsigned integer:<ul> <li>1 (default)</li> </ul> </li> </ul> </li> <li>3 Filename Prefix \u2014 The prefix string for the generated filenames<ul> <li>Accepts a string:<ul> <li>sfe (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p> <p>The contents of the file will depend on how the data was saved (either CSV or JSON). Make sure that the SD Card format is enabled to either CSV or JSON with your desired device outputs turned on so that the DataLogger can save the readings.</p> <p>When removing the microSD card, make sure to remove your power source. Then insert into it into microSD card adapter or USB reader. When connecting the memory card to your computer, you can use a text editor to view the saved readings. In this case, a Windows operating system was viewing the file sfe0000.txt and it was only file available in the microSD card.</p>"},{"location":"configuration/#iot-services-mqtt-client","title":"IoT Services: MQTT Client","text":"<p>In the Settings menu, send an 9 to adjust settings for the MQTT Client.</p> <ul> <li>1 Enabled \u2014 Enable or Disable MQTT Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>1883 (default)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string</li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul>"},{"location":"configuration/#iot-services-mqtt-secure-client","title":"IoT Services: MQTT Secure Client","text":"<p>In the Settings menu, send an 10 to adjust settings for the MQTT Secure Client.</p> <ul> <li>1 Enabled \u2014 Enable or Disable MQTT Secure Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>8883 (default, as of firmware v01.00.04)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string</li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>9 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>10 Client Cert Filename \u2014 The File to load the client certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Client Key Filename \u2014 The File to load the client key from<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"configuration/#iot-services-aws-iot","title":"IoT Services: AWS IoT","text":"<p>In the Settings menu, send an 11 to adjust settings for the AWS IoT.</p> <ul> <li>1 Enabled \u2014 Enable or Disable AWS IoT<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>8883 (default, as of firmware v01.00.04)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string<ul> <li>$aws/things//shadow/update (default)</li> </ul> </li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>9 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>10 Client Cert Filename \u2014 The File to load the client certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Client Key Filename \u2014 The File to load the client key from<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"configuration/#iot-services-thingspeak-mqtt","title":"IoT Services: ThingSpeak MQTT","text":"<p>In the Settings menu, send an 12 to adjust settings for ThingSpeak MQTT</p> <ul> <li>1 Enabled \u2014 Enable or Disable ThingSpeak MQTT<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>8883 (default, as of firmware v01.00.04)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string</li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>9 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>10 Client Cert Filename \u2014 The File to load the client certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Client Key Filename \u2014 The File to load the client key from<ul> <li>Accepts a string</li> </ul> </li> <li>12 Channels \u2014 Comma separated list of =<ul> <li>Accepts a string</li> </ul> <li>b Back</li>"},{"location":"configuration/#iot-services-azure-iot","title":"IoT Services: Azure IoT","text":"<p>In the Settings menu, send an 13 to adjust settings for the Azure IoT.</p> <ul> <li>1 Enabled \u2014 Enable or Disable Azure IoT<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>8883 (default, as of firmware v01.00.04)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string</li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>9 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>10 Client Cert Filename \u2014 The File to load the client certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Client Key Filename \u2014 The File to load the client key from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Device ID \u2014 The device id for the Azure IoT device<ul> <li>Accepts a string</li> </ul> </li> <li>12 Device Key \u2014 The device key for the Azure IoT device<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"configuration/#iot-services-http-iot","title":"IoT Services: HTTP IoT","text":"<p>In the Settings menu, send an 14 to adjust settings for the Azure IoT.</p> <ul> <li>1 Enabled \u2014 Enable or Disable the HTTP Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 URL \u2014 The URL to call with log information<ul> <li>Accepts a string</li> </ul> </li> <li>3 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"configuration/#iot-services-machinechat","title":"IoT Services: MachineChat","text":"<p>In the Settings menu, send an 15 to adjust settings for MachineChat.</p> <ul> <li>1 Enabled \u2014 Enable or Disable the HTTP Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 URL \u2014 The URL to call with log information<ul> <li>Accepts a string</li> </ul> </li> <li>3 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"configuration/#advanced-system-update","title":"Advanced: System Update","text":"<p>New sensors and features are being added all the time and we've made it really easy for you to keep your DataLogger IoT up to date. The System Update option provides the following functionality to the end user:</p> <ul> <li>Restart the device</li> <li>Performing a Factory Reset on the device</li> <li>Updated the device firmware from a file on an SD Card.</li> </ul> <p>This functionality is accessed via the Settings Menu, which is required to use this capability. Type 16 to enter the System Update menu. Once this menu entry is selected, the following menu options are presented:</p> <ul> <li>1 Device Restart \u2014 Restart/reboot the device<ul> <li>Accepts the following values:<ul> <li>Y or Y to restart or reboot the device using the current firmware and system preferences</li> <li>N or n to cancel</li> </ul> </li> </ul> </li> <li>2 Factory Reset \u2014 Erase all settings and revert to original firmware<ul> <li>Accepts the following values:<ul> <li>Y or Y to factory reset the device</li> <li>N or n to cancel</li> </ul> </li> </ul> </li> <li>3 Update Firmware - SD Card \u2014 Update the firmware from the SD card<ul> <li>Accepts firmware in the /root directory of the microSD card with the file naming pattern SparkFunDataLoggerIoT*.bin, where the asterisk * is the firmware version number (i.e. SparkFunDataLoggerIoT_01.00.01.bin).</li> </ul> </li> <li>4 Update Firmware - OTA \u2014 Update the firmware over-the-air<ul> <li>Connects to a server and searches for the latest firmware that is available. Note that you must be connected to a WiFi network to be able to update the board over-the-air.</li> <li>Accepts the following values if there is new firmware available.<ul> <li>Y or Y to update over-the-air</li> <li>N or n to cancel</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"configuration/#device-settings","title":"Device Settings","text":"<p>In the Main Menu, send a 2 through the serial terminal to adjust the devices settings.</p> <p>This will bring up the connected devices that are currently available. You can configure each device and enable/disable each output. Below is a sample of the on-board devices available for the DataLogger IoT - 9DoF when only the MAX17048, ISM330, and MMC5983 are connected. As the DataLogger IoT - 9DoF initializes, the board will populate additional devices in this window if they are detected. Your mileage will vary depending on what is connected. On the DataLogger IoT you will not see the ISM330 or MMC5983  as an option since the 6DoF IMU and magnetometer are not populated on that version of the board.</p> <ul> <li>1 MAX17048 \u2014 MAX17048 LiPo Battery Fuel Gauge<ul> <li>1 Voltage (V) \u2014 Battery voltage (Volts)<ul> <li>1 to enable Voltage (V) (default)</li> <li>2 to disable Voltage (V)</li> </ul> </li> <li>2 State of Charge (%) \u2014 Battery state of charge (%)<ul> <li>1 to enable state of charge (%) (default)</li> <li>2 to disable state of charge  (%)</li> </ul> </li> <li>3 Charge Rate (%/hr) \u2014 Battery charge change rate (%/hr)<ul> <li>1 to enable change rate (%/hr) (default)</li> <li>2 to disable change rate (%/hr)</li> </ul> </li> </ul> </li> <li>2 ISM330 \u2014 ISM330 Inertial Measurement Unit<ul> <li>1 Accel Data Rate (HZ) \u2014 Accelerometer Data Rate (Hz)<ul> <li>1 for Off</li> <li>2 for 12.5 Hz</li> <li>3 for 26 Hz</li> <li>4 for 52 Hz</li> <li>5 for 104 Hz (default)</li> <li>6 for 208 Hz</li> <li>7 for 416 Hz</li> <li>8 for 833 Hz</li> <li>9 for 1666 Hz</li> <li>10 for 3332 Hz</li> <li>11 for 6667 Hz</li> <li>12 for 1.6 Hz</li> </ul> </li> <li>2 Accel Full Scale (g) \u2014 Accelerometer Full Scall (g)<ul> <li>1 for 2 g</li> <li>2 for 16 g</li> <li>3 for 4 g (default)</li> <li>4 for 8 g</li> </ul> </li> <li>3 Gyro Data Rate (Hz) \u2014 Gyro Data Rate (Hz)<ul> <li>1 for Off</li> <li>2 for 12.5 Hz</li> <li>3 for 26 Hz</li> <li>4 for 52 Hz</li> <li>5 for 104 Hz (default)</li> <li>6 for 208 Hz</li> <li>7 for 416 Hz</li> <li>8 for 833 Hz</li> <li>9 for 1666 Hz</li> <li>10 for 3332 Hz</li> <li>11 for 6667 Hz</li> </ul> </li> <li>4 Gyro Full Scale (dps) \u2014 Gyro Full Scale (dps)<ul> <li>1 for 125 dps</li> <li>2 for 250 dps</li> <li>3 for 500 dps (default)</li> <li>4 for 1000 dps</li> <li>5 for 2000 dps</li> <li>6 for 4000 dps</li> </ul> </li> <li>5 Accel Filter LP2 \u2014 Accelerometer Filter LP2<ul> <li>1 to enable (default)</li> <li>2 to disable</li> </ul> </li> <li>6 Gyro Filter LP1 \u2014 Gyro Filter LP1<ul> <li>1 to enable (default)</li> <li>2 to disable</li> </ul> </li> <li>7 Accel Slope Filter \u2014 Accelerometer Slope Filter<ul> <li>1 for ODR/4</li> <li>2 for ODR/10</li> <li>3 for for ODR/20</li> <li>4 for ODR/45</li> <li>5 for ODR/100 (default)</li> <li>6 for ODR/200</li> <li>7 for ODR/400</li> <li>8 for ODR/800</li> </ul> </li> <li>8 Gyro LP1 Filter Bandwidth \u2014  Gyro LP1 Filter Bandwidth<ul> <li>1 Ultra Light</li> <li>2 Very Light</li> <li>3 Light</li> <li>4 Medium (default)</li> <li>5 Strong</li> <li>6 Very Strong</li> <li>7 Aggressive</li> <li>8 Extreme</li> </ul> </li> <li>9 Accel X (milli-g) \u2014 Accelerometer X (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>10 Accel Y (milli-g) \u2014 Accelerometer Y (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>11 Accel Z (milli-g) \u2014 Accelerometer Z (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>12 Gyro X (milli-dps) \u2014 Gyro X (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>13 Gyro Y (milli-dps) \u2014 Gyro Y (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>14 Gyro Z (milli-dps) \u2014 Gyro Z (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>15 Temperature (C) \u2014 The temperature in degrees C<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> </ul> </li> <li>3 MMC5983 \u2014 MMC5983 Magnetometer<ul> <li>1 Filter Bandwidth (Hz) \u2014 The filter bandwidth in Hz<ul> <li>1 100 Hz (default)</li> <li>2 200 Hz</li> <li>3 400 Hz</li> <li>4 800 Hz</li> </ul> </li> <li>2 Auto-Reset \u2014 Auto-Reset<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>3 X Field (Gauss) \u2014 The X Field strength in Gauss<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>4 Y Field (Gauss) \u2014 The Y Field strength in Gauss<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>5 Z Field (Gauss) \u2014 The Z Field strength in Gauss<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>6 Temperature (C) \u2014 The ambient temperature in degrees C<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p> <p>Warning</p> <p>As you connect additional devices to the DataLogger IoT, the values associated with each device in this menu will change! Make sure to check your device settings menu after additional devices are attached should you decide to configure the additional devices and enable/disable their outputs.  </p>"},{"location":"contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our documentation. </p>"},{"location":"contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun DataLogger IoT repository.</li> </ul>"},{"location":"contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>This hardware design is open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun DataLogger IoT repository.</li> </ul>"},{"location":"contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"example_aws/","title":"Creating and Connecting to an AWS IoT Device (Thing)","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers. This document outlines how an AWS IoT device is used by the DataLogger IoT.</p> Image Courtesy of Amazon Web Services (AWS) <p>The following is covered by this document:</p> <ul> <li>Device (Thing) creation in AWS</li> <li>Securely connecting the device</li> <li>How data is posted from the DataLogger IoT to the AWS Device via it's Shadow</li> </ul> <p>Currently, the AWS IoT device connection is a single direction - used to post data from the hardware to the IoT AWS Device via the AWS IoT devices shadow. Configuration information from AWS IoT to the DataLogger IoT is currently not implemented.</p>"},{"location":"example_aws/#general-operation","title":"General Operation","text":"<p>AWS IoT enables connectivity between an IoT / Edge device and the AWS Cloud Platform, implementing secure endpoints and device models within the AWs infrastructure. This infrastructure allows edge devices to post updates, status and state to the AWS infrastructure for analytics, monitoring and reporting.</p> <p>In AWS IoT, an virtual representation of an actual device is created and referred to as a Thing. The virtual device/Thing is allocated a connection endpoint, security certificates and a device shadow - a JSON document used to persist, communicate and manage device state within AWS.</p> <p>The actual IoT device communicates with it's AWS representation via a secure MQTT connection, posting JSON document payloads to a set of pre-defined topics. Updates are posted to the AWS IoT device shadow, which is then accessed within AWS for further process as defined by the users particular cloud implementation.</p>"},{"location":"example_aws/#creating-a-device-in-aws-iot","title":"Creating a Device in AWS IoT","text":"<p>The following discussion outlines the basic steps taken to create a Thing in AWS IoT that the DataLogger IoT can connect to. First step is to log into your AWS account and create a thing.</p> Click Here to Log into AWS <p>Once logged into your AWS account, select IoT Core from the menu of services.</p> <p>From the IoT Core console page, under the Manage section, select All Devices &gt; Things </p> <p>On the resultant Things Page, select the Create Things button.</p> <p>AWS IoT will then take you through the steps to create a device. Selections made for a demo Thing are:</p> <ul> <li>Create single thing</li> <li>Thing Properties</li> <li>Enter a name for your thing - for this example TestThing23</li> <li>Device Shadow - select Unnamed shadow (classic)</li> <li>Auto-generate a new certificate</li> <li>Attach policies to certificate - This is discussed later in this document</li> <li>Select Create thing</li> </ul> <p>Upon creation, AWS IoT presents you with a list of downloadable certificates and keys. Some of these are only available at this step. The best option is to download everything presented - three of these are used by the DataLogger IoT. The following should be downloaded:</p> <ul> <li>Device Certificate</li> <li>Public Key File</li> <li>Private Key File</li> <li>Root CA certificates - (for example:  Amazon Root CA 1 )</li> </ul> <p>At this point, the new AWS IoT thing is created and listed on the AWS IoT Things Console</p>"},{"location":"example_aws/#security-policy","title":"Security Policy","text":"<p>To write to the IoT device, a security policy that enables this is needed, and the policy needs to be assigned to the devices certificate.</p> <p>To create a Policy, select the Manage &gt; Security &gt; Policies menu item from the left side menu of the AWS IoT panel. Once on this page, select the Create policy button to create a new policy.</p> <p>When entering the policy, provide a name that fits your need. For this example, the name NewThing23Policy is used. For the Policy document, you can manually enter the security entires, or enter them as a JSON document. The JSON document used for this example is:</p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:Connect\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:Subscribe\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:Receive\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:Publish\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:GetThingShadow\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:UpdateThingShadow\",\n\"Resource\": \"*\"\n}\n]\n}\n</code></pre> <p>Once the policy is created, go back to the IoT Device/Thing created above and associate this policy to the device Certificate.</p> <ul> <li>Go to your device Manage &gt; All devices &gt; Things</li> <li>Select the device - TestThing23 for this example</li> <li>Select the Certificates tab</li> <li>Select the listed Certificate (it's a very long hex number)</li> <li>At the bottom right of the page, select the Attach policies button and select the Policy created above.</li> </ul> <p>At this point, AWS IoT is ready for a device to connect and receive data.</p>"},{"location":"example_aws/#aws-configuration","title":"AWS Configuration","text":"<p>The specifics for the AWS IoT Thing must be configured. This includes the following:</p> <ul> <li>Server name/host</li> <li>MQTT topic to update</li> <li>Client Name - The AWS IoT Thing Name</li> <li>CA Certificate Chain</li> <li>Client Certificate</li> <li>Client Key</li> </ul>"},{"location":"example_aws/#server-namehostname","title":"Server Name/Hostname","text":"<p>This value is obtained from the AWS IoT Device page for the created device. When on this page, select the Device Shadows tab, and then select the Classic Shadow shadow, which is listed. Note a secure connection is used, so the port for the connection is <code>8883</code>.</p> <p>Selecting the Classic Shadow entry provides the Server Name/Hostname for the device, as well as the MQTT topic for this device.</p> <p>Note: The server name is obtained from the Device Shadow URL entry</p>"},{"location":"example_aws/#mqtt-topic","title":"MQTT Topic","text":"<p>The MQTT topic value is based uses the MQTT topic prefix from above, and has the value update added to it. So for this example, the MQTT topic is:</p> <p><code>$aws/things/TestThing23/shadow/update</code></p>"},{"location":"example_aws/#client-name","title":"Client Name","text":"<p>This is the AWS IoT name of the thing. For the provided example, the value is TestThing23</p>"},{"location":"example_aws/#ca-certificate-chain","title":"CA Certificate Chain","text":"<p>This value was downloaded as a file during the creation process. The contents of this file can be passed on to the DataLogger IoT by copying the file containing the data onto a devices SD Card and setting the filename property for the DataLogger IoT.</p>"},{"location":"example_aws/#client-certificate","title":"Client Certificate","text":"<p>This value was downloaded as a file during the creation process. The contents of this file can be passed on to the DataLogger IoT by copying the file containing the data onto a devices SD Card and setting the filename property for the DataLogger IoT.</p>"},{"location":"example_aws/#client-key","title":"Client Key","text":"<p>This value was downloaded as a file during the creation process. The contents of this file can be passed on to the DataLogger IoT by copying the file containing the data onto a devices SD Card and setting the filename property for the DataLogger IoT.</p>"},{"location":"example_aws/#setting-properties","title":"Setting Properties","text":"<p>The above property values must be set on the DataLogger before use. They can be passed on via a JSON file that is loaded by the system at startup. Of course, you can also manually set the values using the menu system like the previous MQTT example.</p> <p>For the DataLogger IoT example outlined in this document, the entries in the settings JSON file are as follows:</p> <pre><code>\"AWS IoT\": {\n\"Enabled\": true,\n\"Port\": 8883,\n\"Server\": \"avgpd2wdr5s6u-ats.iot.us-east-1.amazonaws.com\",\n\"MQTT Topic\": \"$aws/things/TestThing23/shadow/update\",\n\"Client Name\": \"TestThing23\",\n\"Buffer Size\": 0,\n\"Username\": \"\",\n\"Password\": \"\",\n\"CA Certificate\": \"\",\n\"Client Certificate\": \"\",\n\"Client Key\": \"\",\n\"CA Cert Filename\": \"AmazonRootCA1.pem\",\n\"Client Cert Filename\": \"TestThing23_DevCert.crt\",\n\"Client Key Filename\": \"TestThing23_Private.key\"\n},\n</code></pre> <p>Besides updating the <code>Server</code>, <code>MQTT Topic</code>, <code>Client Name</code>, <code>CA Cert Filename</code>, <code>Client Cert Filename</code>, and <code>Client Key Filename</code>, you will need to also ensure that the <code>port</code> is set to <code>8883</code>. The default in previous firmware versions was <code>1883</code>. As of firmware v01.00.04, the default is <code>8883</code>. You will need to adjust the port value to properly connect to the AWS IoT service. Don't forget to enable AWS IoT service by setting the value to <code>true</code>.</p> <p>If the JSON file is saved in the microSD card, you will need to load the credentials to the DataLogger IoT. Of course, you can manually update the values through the command line as well to save the credentials to the ESP32's persistent memory.</p>"},{"location":"example_aws/#operation","title":"Operation","text":"<p>Once the device is configured and running, updates in AWS IoT are listed in the Activity tab of the devices page. For the test device in this document, this page looks like:</p> <p>Opening up an update, you can see the data being set to AWS IoT in a JSON format.</p>"},{"location":"example_azure/","title":"Creating and Connecting to an Azure IoT Device","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers. This document outlines how an Azure IoT device is used by the DataLogger IoT.</p> Image Courtesy of Microsoft Azure <p>The following is covered by this document:</p> <ul> <li>Device creation Azure</li> <li>Securely connecting the device</li> <li>How data is posted from the DataLogger IoT to the Azure Device</li> </ul> <p>Currently, the Azure IoT device connection is a single direction - it is used to post data from the hardware to the Azure IoT Device. Configuration information from Azure IoT to the DataLogger IoT is currently not implemented.</p>"},{"location":"example_azure/#general-operation","title":"General Operation","text":"<p>Azure IoT enables connectivity between an IoT / Edge device and the Azure Cloud Platform, implementing secure endpoints and device models within the Azure infrastructure. This infrastructure allows edge devices to post updates, status and state to the Azure infrastructure for analytics, monitoring and reporting.</p> <p>In Azure IoT, an virtual representation of an actual device is created and referred to as a Device. The virtual device is allocated a connection endpoint, security certificates and a device digital twin - a JSON document used to persist, communicate and manage device state within Azure. Unlike AWS IoT, data from the device isn't posted to the devices digital twin (AWS Shadow), but to the device directly.</p> <p>The actual IoT device communicates with it's Azure representation via a secure MQTT connection, posting JSON document payloads to a set of pre-defined topics. Updates are posted directly to the Azure device, which is then accessed within Azure for further process as defined by the users particular cloud implementation.</p>"},{"location":"example_azure/#creating-a-device-in-azure-iot","title":"Creating a Device in Azure IoT","text":"<p>The following discussion outlines the basic steps taken to create a Device in Azure IoT that the DataLogger IoT can connect to. First step is to log into your Azure account and create an IoT Hub for your device.</p> Click Here to Log into Microsoft Azure <p>Once logged into your Microsoft Azure account, select Internet of Things &gt; IoT Hub from the menu of services.</p>"},{"location":"example_azure/#create-an-iot-hub","title":"Create an IoT Hub","text":"<p>This IoT Hub page lists all the IoT hubs available for your account. To add a device, you need to create a new IoT Hub.</p> <p>Follow the Hub Creation workflow - key settings used for a DataLogger demo device:</p> <ul> <li>Used the \"Free Tier\" for testing and development.</li> <li>Networking<ul> <li>Connectivity - Public Access</li> <li>Minimum TLS Version - 1.0</li> </ul> </li> </ul> <p>The remaining settings were set at their default values.</p>"},{"location":"example_azure/#create-a-device","title":"Create a Device","text":"<p>Once the IoT Hub is created, a Device needs to be created within the hub. The device represents the connection to the actual DataLogger IoT device.</p> <p>To create a device, select the Device management &gt; Devices from the IoT Hub menu and the select the + Add Device menu item</p> <p>In the create device dialog:</p> <ul> <li>Enter a name for the device</li> <li>Select an Authentication type of Symmetric key</li> <li>Auto-generate keys enabled</li> </ul> <p>Once created, the device is listed in the Devices list of the IoT Hub. Selecting the device gives you the device ID and keys used to communicate with the device. Note, when connecting to the device with the DataLogger IoT, the Primary Key value is used.</p>"},{"location":"example_azure/#azure-configuration","title":"Azure Configuration","text":"<p>Once the DataLogger IoT is integrated into the application, the specifics for the Azure IoT Thing must be configured. This includes the following:</p> <ul> <li>Server Name/Hostname</li> <li>Device Key</li> <li>Device ID</li> <li>CA Certificate Chain</li> </ul>"},{"location":"example_azure/#server-namehostname","title":"Server Name/Hostname","text":"<p>This value is hostname of the created IoT Hub and is obtained from the Overview page of the IoT Hub. Note a secure connection is used, so the port for the connection is <code>8883</code>.</p>"},{"location":"example_azure/#device-id","title":"Device ID","text":"<p>The Device ID is obtained from the device detail page. This page is accessible via the Device listing page, which is accessed via the Device management &gt; Devices menu item. The selected device of interest (TestDevice2023 for this example) provides the device ID and Primary Key.</p>"},{"location":"example_azure/#device-primary-key","title":"Device Primary Key","text":"<p>This is obtained via the Device details page, as outlined in the previous section.</p> <p>Note</p> <p>You view and copy the key via the icons on the right of the key entry line.</p>"},{"location":"example_azure/#root-certificate-authority-ca-file","title":"Root Certificate Authority - CA file","text":"<p>The Certificate Authority file for Azure is downloaded from this page:</p> Microsoft: Azure Certificate Authority details <p>The file to download is the Baltimore CyberTrust Root entry in the Root Certificate Authorities section of the page.</p>"},{"location":"example_azure/#setting-properties","title":"Setting Properties","text":"<p>The above property values must be set on the DataLogger IoT before use. They can be set via a JSON file that is loaded by the system at startup. Of course, you can also manually set the values using the menu system like the previous MQTT example.</p> <p>For the example outlined in this document, the entries in the settings JSON file are as follows:</p> <pre><code>\"Azure IoT\": {\n\"Enabled\": true,\n\"Port\": 8883,\n\"Server\": \"sparkfun-datalogger-hub.azure-devices.net\",\n\"MQTT Topic\": \"\",\n\"Client Name\": \"\",\n\"Buffer Size\": 0,\n\"Username\": \"\",\n\"Password\": \"\",\n\"Device Key\" : \"My-Super-Secret-Device-Key\",\n\"Device ID\"  : \"TestDevice2023\",\n\"CA Cert Filename\": \"AzureRootCA.pem\"\n},\n</code></pre> <p>Besides updating the <code>Server</code>, <code>Device Key</code>, <code>Device ID</code>, and <code>CA Cert Filename</code>, you will need to also ensure that the <code>port</code> is set to <code>8883</code>. The default in previous firmware versions was <code>1883</code>. As of firmware v01.00.04, the default is <code>8883</code>. You will need to adjust the port value to properly connect to the Azure IoT service.</p> <p>If the JSON file is saved in the microSD card, you will need to load the credentials to the DataLogger IoT. Of course, you can manually update the values through the command line as well to save the credentials to the ESP32's persistent memory.</p>"},{"location":"example_azure/#operation-and-monitoring","title":"Operation and Monitoring","text":"<p>Once the DataLogger IoT device is configured and running, the Azure IoT capability in the DataLogger IoT posts messages via MQTT to the connected Azure Device via it's IoT Hub. Messages to the device are posted as Telemetry Data for the device.</p> <p>The easiest method to view the Telemetry data being sent to an Azure Iot Device is via the Azure IoT Hub extension for the Visual Studio Code editor.</p> <p>Once installed, and connected to Azure via the Azure Account extension, you can connect to the target IoT Hub, and monitor telemetry data for a IoT device.</p>"},{"location":"example_azure/#connect-to-your-azure-iot-hub","title":"Connect to Your Azure IoT Hub","text":"<p>On the Explorer panel of Visual Studio Code, click on the ... menu of the AZURE IOT HUB section. In the popup menu, select the Select IoT Hub menu entry.</p> <p>The available IoT Hubs are displayed in the editors command prompt. Select the desired hub and press Enter (or click).</p> <p>The hub is then displayed in the AZURE IOT HUB section of the editor Explorer. Expanding the Devices section of the Hub will list the example device created above.</p>"},{"location":"example_azure/#monitoring","title":"Monitoring","text":"<p>To monitor the telemetry data send to a device, right click on the device, TestDevice2023 in this example, select the menu entry Start Monitoring Build-in Event Endpoint.</p> <p>Once selected, the editor output console will start displaying output for the selected device. For the above example, with a device that has environmental sensors attached, the output appears as follows:</p> <p>To stop monitoring, click the Stop Monitoring build-in event endpoint item that is displayed in the status bar of the editor.</p> <p>A menu option to stop monitoring is also available from the ... menu of the AZURE IOT HUB section in the editor Explorer panel.</p>"},{"location":"example_http/","title":"Connecting and Sending Output to an HTTP Server","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers and servers. This document outlines how output from a DataLogger IoT device is sent to an HTTP server.</p> <p>The following is covered by this document:</p> <ul> <li>Overview of the HTTP connection</li> <li>How a user configures and uses the HTTP connection</li> <li>Use examples</li> </ul>"},{"location":"example_http/#general-operation","title":"General Operation","text":"<p>HTTP connectivity allows data generated by the DataLogger IoT to be sent to an HTTP server. An HTTP endpoint is provided to the HTTP action within the DataLogger IoT, and when data is output, a JSON representation of the data is published to the endpoint via an HTTP POST operation. The body of the POST operation contains the a JSON document that encapsulates the sent DataLogger IoT data.</p>"},{"location":"example_http/#data-structure","title":"Data Structure","text":"<p>Data is sent to the HTTP server as a JSON object, which contains a collection of sub-object. Each sub-object represents a data source in the sensor, and contains the current readings from that source.</p> <p>The following is an example of the data posted - note, this representation was \"pretty printed\" for readability.</p> <pre><code>{\n\"MAX17048\": {\n\"Voltage (V)\": 4.304999828,\n\"State Of Charge (%)\": 115.0625,\n\"Change Rate (%/hr)\": 0\n},\n\"CCS811\": {\n\"CO2\": 620,\n\"VOC\": 33\n},\n\"BME280\": {\n\"Humidity\": 25.03613281,\n\"TemperatureF\": 79.64599609,\n\"TemperatureC\": 26.46999931,\n\"Pressure\": 85280.23438,\n\"AltitudeM\": 1430.44104,\n\"AltitudeF\": 4693.04834\n},\n\"ISM330\": {\n\"Accel X (milli-g)\": -53.31399918,\n\"Accel Y (milli-g)\": -34.03800201,\n\"Accel Z (milli-g)\": 1017.236023,\n\"Gyro X (milli-dps)\": 542.5,\n\"Gyro Y (milli-dps)\": -1120,\n\"Gyro Z (milli-dps)\": 262.5,\n\"Temperature (C)\": 26\n},\n\"MMC5983\": {\n\"X Field (Gauss)\": -0.200622559,\n\"Y Field (Gauss)\": 0.076416016,\n\"Z Field (Gauss)\": 0.447570801,\n\"Temperature (C)\": 29\n}\n}\n</code></pre>"},{"location":"example_http/#http-connection-setup","title":"HTTP Connection Setup","text":"<p>To connect to an HTTP server endpoint, the following information is needed:</p> <ul> <li>The URL of the endpoint</li> <li>The SSL certificate for the target server, if the connection is secure (HTTPS)</li> </ul> <p>These values are set using the standard DataLogger methods - the interactive menu system, or a JSON file.</p>"},{"location":"example_http/#menu-system","title":"Menu System","text":"<p>When the menu system for the HTTP connection is presented, the following options are displayed:</p> <p>The options are:</p> <ul> <li>Enable/Disable the connection</li> <li>Set the URL for the endpoint</li> <li>Set the name of the CA Cert file for a secure connection (HTTP)</li> </ul> <p>To set the HTTP URL/endpoint - select two (2) in the menu, and enter the URL. For this example, we'll enter: http://mysparkfunexample.com:8091 .</p> <p>In the above example, the URL/HTTP Endpoint is on a server called <code>mysparkfunexample.com</code>, on port <code>8091</code>. Once set, the system will post data to this URL.</p> <p>If the endpoint is a secure ssl (HTTPS) connection, the certificate for the server is required. Because of the size of the certificates, the value is provided as a file that is loaded into the system by the attached SD card.</p> <p>The above example show providing a certificate filename of <code>example.cer</code>.</p> <p>Once all these values are set, the system will post data to the specified HTTP endpoint, following the JSON information structure noted earlier in this document.</p>"},{"location":"example_http/#json-file-entries","title":"JSON File Entries","text":"<p>If a JSON file is being used as an option to import settings into the DataLogger IoT, the following entries are used for the HTTP IoT connection:</p> <pre><code>\"HTTP IoT\": {\n\"Enabled\": false,\n\"URL\": \"&lt;the URL&gt;\",\n\"CA Cert Filename\": \"&lt;certificate filename&gt;\"\n}\n</code></pre> <p>Where:</p> <ul> <li><code>Enabled</code> - Set to <code>true</code> to enable the connection.</li> <li><code>URL</code> - Set to the URL for the connection.</li> <li><code>CA Cert Filename</code> - Set to the cert filename on the SD card if being used.</li> </ul>"},{"location":"example_http/#example-connecting-to-a-http-server","title":"Example - Connecting to a HTTP Server","text":"<p>In this example, a simple HTTP Server is creating using Node JS, and the HTTP connection in the DataLogger IoT is used to post data to this server. The received data is output to the console from there server.</p>"},{"location":"example_http/#the-server","title":"The Server","text":"<p>The following javascript/node code creates a HTTP server on port <code>8090</code>, and outputs received data to the console.</p> <pre><code>var http = require('http');\n// Setup the endpoint server\nvar myServer = http.createServer(function (req, res) {\n// Initialize our body string\nvar body=\"\";\n// on data callback, append chunk to our body string\nreq.on('data', function(chunk){\nbody += chunk;\n});\n// On end callback, output the body to the console\nreq.on('end', function(){\n// parse json string, then stringify it back for 'pretty printing'\nconsole.log(\"payload: \" + JSON.stringify(JSON.parse(body),null,2));\n});\n// send a reply\nres.writeHead(200, {'Content-Type': 'text/plain'});\nres.end('n');\n// Just listen on our port\n}).listen(8090);\n</code></pre> <p>The setup and use of node js is system dependant is beyond the scope of this document. However, Node JS is easily installed with your systems package manager (<code>brew</code> on macOS, Linux distribution package manager (apt, yum, ...etc), on Windows, the WSL is recommended).</p> <p>Once Node is setup, the above server is run via the following command (assuming the implementation is in a file called <code>simple_http.js</code>):</p> <pre><code>node ./simple_http.js\n</code></pre> <p>As data is sent by the DataLogger IoT, the following is output to the console from the server:</p>"},{"location":"example_http/#obtaining-a-sites-security-certificate","title":"Obtaining a Sites Security Certificate","text":"<p>Accessing a sites SSL/Secure Certificate is done via a web browser. The method for each browser is different. The following example uses Edge, which is similar to the operation in Chrome.</p> <p>First, browse to the desired site/server. Click the Secure/Security area/button next to the URL to bring up the security detail page. On this page, select the Connection is secure menu option</p> <p>Next, on the page shown, select the certificate button on the upper right of the dialog.</p> <p>When you select this button, the certificate details dialog is displayed. On this page, select the Details tab, and select the Export... button on the lower right of the dialog. This will save the sites SSL/Security certificate to a location you specify.</p> <p>Once saved, place this file on the SD card your system/DataLogger is using, and set the filename in the HTTP connection menu or settings JSON file.</p>"},{"location":"example_mqtt/","title":"MQTT","text":""},{"location":"example_mqtt/#connecting-and-publishing-data-to-mqtt","title":"Connecting and Publishing Data to MQTT","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers and servers. This document outlines how output from a DataLogger device is sent to an MQTT Broker.</p> Image Courtesy of MQTT <p>The following is covered by this document:</p> <ul> <li>Overview of the MQTT connection</li> <li>How a user configures and uses the MQTT connection</li> <li>MQTT examples</li> </ul>"},{"location":"example_mqtt/#general-operation","title":"General Operation","text":"<p>MQTT connectivity allows data generated by the DataLogger IoT to be published to an MQTT Broker under a user configured topic. MQTT is an extremely flexible and low overhead data protocol that is widely used in the IoT field.</p> <p>The general use pattern for MQTT is that data is published to a topic on a MQTT broker. The data is then sent to any MQTT client that has subscribed to the specified topic.</p> <p>The DataLogger IoT supports MQTT connections, allowing an end user to enter the parameters for the particular MQTT Broker for the application to publish data to. When the application outputs data to the broker, the DataLogger IoT publishes the available information to the specified \"topic\" with the payload that is a JSON document.</p>"},{"location":"example_mqtt/#data-structure","title":"Data Structure","text":"<p>Data is published to the MQTT broker as a JSON object, which contains a collection of sub-objects. Each sub-object represents a data source in the sensor, and contains the current readings from that source.</p> <p>The following is an example of the data posted - note, this representation was \"pretty printed\" for readability.</p> <pre><code>{\n\"MAX17048\": {\n\"Voltage (V)\": 4.304999828,\n\"State Of Charge (%)\": 115.0625,\n\"Change Rate (%/hr)\": 0\n},\n\"CCS811\": {\n\"CO2\": 620,\n\"VOC\": 33\n},\n\"BME280\": {\n\"Humidity\": 25.03613281,\n\"TemperatureF\": 79.64599609,\n\"TemperatureC\": 26.46999931,\n\"Pressure\": 85280.23438,\n\"AltitudeM\": 1430.44104,\n\"AltitudeF\": 4693.04834\n},\n\"ISM330\": {\n\"Accel X (milli-g)\": -53.31399918,\n\"Accel Y (milli-g)\": -34.03800201,\n\"Accel Z (milli-g)\": 1017.236023,\n\"Gyro X (milli-dps)\": 542.5,\n\"Gyro Y (milli-dps)\": -1120,\n\"Gyro Z (milli-dps)\": 262.5,\n\"Temperature (C)\": 26\n},\n\"MMC5983\": {\n\"X Field (Gauss)\": -0.200622559,\n\"Y Field (Gauss)\": 0.076416016,\n\"Z Field (Gauss)\": 0.447570801,\n\"Temperature (C)\": 29\n}\n}\n</code></pre>"},{"location":"example_mqtt/#mqtt-broker-connection-setup","title":"MQTT Broker Connection Setup","text":"<p>To connect to a MQTT Broker, the following information is needed:</p> <ul> <li>The server name/address</li> <li>The server port</li> <li>The topic to post to</li> <li>[optional] The name of the device/Client name publishing the data</li> <li>[optional] A username - if required</li> <li>[optional] A password - if required</li> </ul> <p>These values are set using the standard DataLogger methods - the interactive menu system, or a JSON file.</p>"},{"location":"example_mqtt/#mqtt-menu-system","title":"MQTT Menu System","text":"<p>We'll need to adjust the settings for the MQTT Client using the MQTT Menu System.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13.  Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then type 9 to enter the MQTT Client Menu. When the menu system for the MQTT connection is presented, the following options are displayed:</p> <p>The options are:</p> <ul> <li>Enable/Disable the connection</li> <li>Broker Port - The standard port for mqtt is 1883</li> <li>Broker Server - This is just the name of the server</li> <li>MQTT Topic - A string</li> <li>Client Name</li> <li>Username</li> <li>Password</li> <li>Buffer Size</li> </ul> <p>At a minimum, the Broker Port, Broker Server Name, and MQTT Topic need to be set. What parameters are required depends on the settings of the broker being used.</p> <p>Note</p> <p>If a secure connection is being used with the MQTT broker, use the <code>MQTT Secure Client</code> option of the DataLogger IoT. This option supports secure connectivity.</p> <p>Note</p> <p>The <code>Buffer Size</code> option is dynamic by default, adapting to the size of the payload being sent. If runtime memory is a concern, set this value to a static size that supports the device operation.</p> <p>Once all these values are set, the system will publish data to the specified MQTT Broker, following the JSON information structure noted earlier in this document.</p>"},{"location":"example_mqtt/#json-file-entries","title":"JSON File Entries","text":"<p>If a JSON file is being used as an option to import settings into the DataLogger IoT, the following entries are used for the MQTT IoT connection:</p> <pre><code>\"MQTT Client\": {\n\"Enabled\": false,\n\"Port\": 1883,\n\"Server\": \"my-mqttserver.com\",\n\"MQTT Topic\": \"/sparkfun/datalogger1\",\n\"Client Name\": \"mysensor system\",\n\"Buffer Size\": 0,\n\"Username\": \"\",\n\"Password\": \"\"\n},\n</code></pre> <p>Where:</p> <ul> <li><code>Enabled</code> - Set to <code>true</code> to enable the connection.</li> <li><code>Port</code> - Set to the broker port.</li> <li><code>Server</code> - The MQTT broker server.</li> <li><code>MQTT Topic</code> - The topic to publish to.</li> <li><code>Client Name</code> - Optional client name.</li> <li><code>Buffer Size</code> - Internal transfer buffer size.</li> <li><code>Username</code> - Broker user name if being used.</li> <li><code>Password</code> - Broker password if being used.</li> </ul>"},{"location":"example_mqtt/#testing-the-mqtt-connection","title":"Testing the MQTT Connection","text":"<p>Use of a MQTT connection is fairly straightforward - just requiring the entry of broker details into the connection settings.</p> <p>To test the connection, you need a MQTT broker available. A quick method to setup a broker is by installing the <code>mosquitto</code> package on a Raspberry Pi computer. Our basic MQTT Tutorial provides some basic setup for a broker.</p> Introduction to MQTT <p>This MQTT Broker Tutorial has more details, covering the setup needed for modern mosquitto configurations.</p> Random Nerd Tutorials: Install Mosquitto Broker on Raspberry Pi <p>And once the broker is setup, the messages published by the IoT sensor are visible using the <code>mosquitto_sub</code> command as outlined. For example, to view messages posted to a the topic \"/sparkfun/datalogger1\", the following command is used:</p> <pre><code>mosquitto_sub -t \"/sparkfun/datalogger1\"\n</code></pre> <p>This assumes the MQTT broker is running on the same machine, and using the default port number.</p>"},{"location":"example_thingspeak/","title":"Creating and Connecting to ThingSpeak","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers. This document outlines how a ThinkSpeak output is used by the DataLogger IoT.</p> Image Courtesy of ThingSpeak <p>The following is covered by this document:</p> <ul> <li>Creating a ThingSpeak Channel and MQTT Connection</li> <li>Securely connecting the ThingSpeak</li> <li>How data is posted from the DataLogger IoT to ThingSpeak</li> </ul>"},{"location":"example_thingspeak/#general-operation","title":"General Operation","text":""},{"location":"example_thingspeak/#thingspeak-structure","title":"ThingSpeak Structure","text":"<p>The structure of ThingSpeak is based off of the concept of Channels, with each channel supporting up to eight fields for data specific to the data source. Each channel is named, and has a unique ID associated with it.  One what to think of it is that a Channel is a grouping of associated data values or fields.</p> <p>The fields of a channel are enumerated as Field1, Field2, ..., Field8, but each field can be named to simplify data access and understanding.</p> <p>As data is reported to a ThingSpeak channel, the field values are accessible for further processing or visualization output.</p>"},{"location":"example_thingspeak/#data-structure","title":"Data Structure","text":"<p>The DataLogger IoT is constructed around the concept of Devices which are often a type of sensor that can output a set of data values per observation or sample.</p>"},{"location":"example_thingspeak/#mapping-data-to-thingspeak","title":"Mapping Data to ThingSpeak","text":"<p>The concept of Channels that contain Fields in ThingSpeak is similar to the Devices that contain Data within the DataLogger IoT, and this similarity is the mapping model used by the DataLogger IoT. Specifically:</p> <ul> <li>Devices == Channels</li> <li>Data == Fields</li> </ul> <p>During configuration of the DataLogger IoT, the mapping between the Device and ThingSpeak channel is specified. The data to field mapping is automatically created by the DataLogger IoT following the data reporting order from the specific device driver.</p>"},{"location":"example_thingspeak/#creating-a-device-to-a-thingspeak-channel","title":"Creating a Device to a ThingSpeak Channel","text":"<p>The following discussion outlines the basic steps taken to create a Channel in ThingSpeak and then connect it to the DataLogger's Device. First step is to log into your ThingSpeak and create a Channel.</p> Click Here to Log into ThingSpeak <p>Once logged into your ThingSpeak account, select Channels &gt; My Channels menu item and on the My Channel page, select the New Channel button.</p> <p>On the presented channel page, name the channel and fill in the specific channel fields. The fields should map to the data fields reported from the Device being linked to this channel. Order is important, and is determined by looking at output of a device to the serial device (or reviewing the device driver code).</p> <p>Once the values are entered, select save. ThingSpeak will now show list of Channel Stats, made up of line plots for each field specified for the channel.</p> <p>Note</p> <p>Key note - at the top of this page is listed the Channel ID. Note this number - it is used to map a Device to a ThingSpeak Channel.</p>"},{"location":"example_thingspeak/#setting-up-thingspeak-mqtt","title":"Setting Up ThingSpeak MQTT","text":"<p>The DataLogger IoT uses MQTT to post data to a channel. From the ThingSpeak menu, select Devices &gt; MQTT, which displays a list of your MQTT devices. From this page, select the Add a new device button.</p> <p>On the presented dialog, enter a name for the MQTT connection and in the Authorize channels to access, select the channel created earlier. Once you select a channel, click the Add Channel button.</p> <p>Note</p> <p>More channels can be added later.</p> <p>Note</p> <p>When the MQTT device is created, a set of credentials (Client ID, Username, and Password) is provided. Copy or download these values, since the password in not accessible after this step.</p> <p>The selected Channel is then listed in the Authorized Channel table. Ensure that the Allow Publish and Allow Subscribe attributes are enabled for the added channel.</p> <p>At this point, the ThingSpeak Channel is setup for access by the DataLogger IoT.</p>"},{"location":"example_thingspeak/#thingspeak-configuration","title":"ThingSpeak Configuration","text":"<p>Once the device is integrated into the application, the specifics for the ThingSpeak Channel(s) must be configured. This includes the following:</p> <ul> <li>Server Name/Hostname</li> <li>Client Name</li> <li>User Name</li> <li>Password</li> <li>Device to Channel mapping</li> <li>CA Certificate Chain</li> </ul>"},{"location":"example_thingspeak/#server-namehostname","title":"Server Name/Hostname","text":"<p>This value is hostname of the ThingSpeak mqtt connection, which is mqtt3.thingspeak.com as note at ThingSpeakMQTT Basics page. Note a secure connection is used, so the port for the connection is <code>8883</code>.</p>"},{"location":"example_thingspeak/#client-nameid","title":"Client Name/ID","text":"<p>The Client Name/ID is found under MQTT connection details listed in the Devices &gt; MQTT section of ThingSpeak.</p>"},{"location":"example_thingspeak/#username","title":"Username","text":"<p>The Username is found under MQTT connection details listed in the Devices &gt; MQTT section of ThingSpeak.</p>"},{"location":"example_thingspeak/#password","title":"Password","text":"<p>The connection password was provided when the MQTT device was created. If you lost this value, you can regenerate a password on the MQTT Device information page.</p>"},{"location":"example_thingspeak/#certificate-file","title":"Certificate File","text":"<p>You can download the cert file for ThingSpeak.com page using a web-browser. Click on the security details of this page, and navigate the dialog (browser dependent) to download the certificate. The downloaded file is the made available for the DataLogger IoT to use as a file that is loaded at runtime)</p>"},{"location":"example_thingspeak/#setting-properties","title":"Setting Properties","text":"<p>The above property values must be set on the DataLogger IoT before use. They can be set via a JSON file that is loaded by the system at startup. Of course, you can also manually set the values using the menu system like the previous MQTT example.</p> <p>For the ThingSpeak example outlined in this document, the entries in the settings JSON file are as follows:</p> <pre><code>\"ThingSpeak MQTT\": {\n\"Enabled\": true,\n\"Port\": 8883,\n\"Server\": \"mqtt3.thingspeak.com\",\n\"MQTT Topic\": \"\",\n\"Client Name\": \"MQTT Device Client ID\",\n\"Buffer Size\": 0,\n\"Username\": \"MQTT Device Username\",\n\"Password\": \"MQTT Device Password\",\n\"CA Cert Filename\": \"ThingspeakCA.cer\",\n\"Channels\" : \"BME280=&lt;channel id&gt;\"\n}\n</code></pre> <p>Note</p> <p>The Channels value is a list of [DEVICE NAME]=[Channel ID] pairs. Each pair is separated by a comma.</p> <p>Besides updating the <code>Server</code>, <code>Client Name</code>, <code>Username</code>, <code>Password</code>, <code>CA Cert Filename</code>, and <code>Channels</code>, you will need to also ensure that the <code>port</code> is set to <code>8883</code>. The default in previous firmware versions was <code>1883</code>. As of firmware v01.00.04, the default is <code>8883</code>. You will need to adjust the port value to properly connect to the ThingSpeak service.</p> <p>If the JSON file is saved in the microSD card, you will need to load the credentials to the DataLogger IoT. Of course, you can manually update the values through the command line as well to save the credentials to the ESP32's persistent memory.</p>"},{"location":"example_thingspeak/#monitoring-output","title":"Monitoring Output","text":"<p>Once the connector is configured and the DataLogger IoT is connected to ThingSpeak, as data is posted, the results are show on the Channel Stats page for your Channel. For the above example, the output of a SparkFun BME280 sensor produces the following output:</p>"},{"location":"example_timestamp/","title":"Adding a Timestamp to Data","text":"<p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Then send a 6 to adjust how data is logged.</p> <p>Send a 1 to configure the timestamp for each log entry. The settings in this menu relate to the system clock and is dependent on the reference clock. You'll be prompted with different formats. In this example, we sent a a 4 to have a timestamp with the USA date format.</p> <p>Follow the prompts to exit out of the menu properly so that the DataLogger IoT saves the settings. Once you see the message <code>[I] Saving System Settings</code>, the DataLogger IoT will add a timestamp with your preferred format to each log entry. Assuming that you have the output set to the serial terminal, you should see the timestamp attached to the output after the system settings are saved like the image below.  </p>"},{"location":"factory_reset/","title":"Factory Reset","text":"<p>A factory reset will move the boot firmware of the device to the firmware imaged installed at the factory and erase any on-board stored settings on the device. This is helpful if an update fails, or an update has issues that prevent proper operations.</p> <p>This option is available on ESP32 devices that contained a factory firmware partition that contains a bootable firmware image. Consult the specific product's production and build system for further details.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then type 16 to enter the System Update Menu. Finally, type 2 to enter the Factory Reset option.</p> <p>The user is presented a prompt to continue. To launch a factory reset, the value of Y should be entered. To abort the update, enter n or press the Esc key.</p> <p>When a Y is entered, the system performs the following:</p> <ul> <li>Set the boot image to the Factory installed firmware</li> <li>Erase any settings stored in the on-board flash memory</li> <li>Reboot the device</li> </ul>"},{"location":"file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun DataLogger IoT repository.</li> </ul>"},{"location":"file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun DataLogger IoT repository.</li> </ul>"},{"location":"file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>In this section, we will go over how to connect to the SparkFun DataLogger IoT. At the time of writing, we used the DataLogger IoT - 9DoF. This hardware hookup explained in this section also applies for the DataLogger IoT.</p>"},{"location":"hardware_hookup/#soldering-to-the-pths","title":"Soldering to the PTHs","text":"<p>Note</p> <p>The UART, SPI, analog, and digital I/O pins are not currently supported in the firmware for data logging.</p> <p>For users that are interested in soldering to the edge of the board, we recommend soldering headers to the PTHs on the breakout for a permanent connection and using jumper wires. Of course, you could also solder wires to the breakout board as well. For a temporary connection during prototyping, you can use IC hooks like these.</p> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"hardware_hookup/#microsd-card","title":"MicroSD Card","text":"<p>If all you want to do is display your sensor readings in a serial terminal or monitor (connected via USB-C) then, strictly, you don\u2019t need to add a microSD card. But of course the whole point of the DataLogger IoT is that it can log readings from whatever sensors you have attached to microSD card. The data is logged in easy-to-read Comma Separated Value (CSV) text format by default. You can also set the format as JSON.</p> <p>You probably already have a microSD card laying around but if you need any additional units, we have plenty in the store. The DataLogger IoT can use any size microSD card as long as it is formatted correctly. Please ensure your SD card is formatted correctly. There are different software tools available. Some are built into your operating system. We recommend using the Raspberry Pi Imager Tool to easily format the memory card as FAT32 using the GUI. Flip over the DataLogger IoT and you\u2019ll see the latching microSD card socket. Slide in your formatted SD card and it will click neatly into place. Part of the edge of the SD card will stick out when fully inserted in the microSD card socket.</p> <p>You should only insert or remove the SD card while the power is turned off or disconnected. Removing the card while the DataLogger IoT is logging will almost certainly corrupt your data. You can tell when the board has just logged by observing the addressable RGB LED. When enabled, the LED will blink blue after it has logged one data point.</p> <p>After you\u2019ve logged some data, you will find a new file on your SD card. There may also be additional files if you manually saved the firmware or preferences to the memory card.</p> <ul> <li>sfe0001.txt: This is the file that contains the CSV or JSON sensor data. The format will depend on how you configured the DataLogger's output. We use .TXT as the file type so that your computer can open it in a simple text editor. The contents are all human-readable. But, if you want to, you can rename it as .CSV or .JSON instead. The file number is incremented for the next logging session.</li> <li>datalogger.json: This file only appears when you save the settings as your fallback storage. The file will include all preferences saved for any connected device, WiFi credentials, certificates, and keys.</li> <li>SparkFun_DataLoggerIoT*.bin: This file only appears when you save the firmware to the microSD card. Note that the asterisk (*) is the firmware version number (i.e. SparkFunDataLoggerIoT_01.00.01.bin).</li> </ul> <p>To remove the microSD card, make sure power is disconnected from the DataLogger IoT. Then press the microSD card into the microSD socket. The memory card will be ejected and you will hear a click again. Once the card is ejected, you can insert it into a microSD card adapter or USB reader to be read on a computer.</p>"},{"location":"hardware_hookup/#qwiic-sensors","title":"Qwiic Sensors","text":"<p>If you are going to attach extra sensors or any Qwiic-enabled device to the DataLogger IoT, then those need to be connected first before attaching a USB cable. It is a good idea to only attach or disconnect Qwiic sensors when the power is turned off or disconnected. The Qwiic bus is pretty tolerant to \u201chot swapping\u201d, but: disconnecting a sensor while it is in use will confuse the DataLogger IoT software (most likely each value associated with the device will remain constant); and a new sensor won\u2019t be detected until the firmware restarts.</p> <p>Plug one end of your Qwiic cable into the DataLogger IoT and plug the other end into your sensor. If you want to add extra sensors, you can simply connect them to each other in a daisy chain. You will need a Qwiic cable for each sensor. Our Qwiic Cable Kit covers all the options.</p> DataLogger IoT and a Qwiic-Enabled Device DataLogger IoT and several Qwiic-Enabled Devices Daisy Chained <p>Our Qwiic sensors usually all have power indicator LEDs and I<sup>2</sup>C pull-up resistors. Depending on your application, you may want or need to disable these by cutting the jumper links on the sensor circuit boards. We have a tutorial that will show you how to do that safely.</p> <p>Sometimes you might want to connect more than one of the same type of sensor to the DataLogger IoT. On the I<sup>2</sup>C bus, each device needs to have a unique address. On many of our boards, there are jumpers links which you can use to change the address and some have addresses that can be configured in software. But there are some where you cannot change the address - the NAU7802 Qwiic Scale being one example.</p> <p>Typically one would use a multiplexor. However, we currently do not have the DataLogger IoT configured to work with any multiplexors (i.e. Qwiic Mux Breakout).</p> <p>Note</p> <p>Currently the Qwiic Mux is not compatible with the DataLogger IoT.</p>"},{"location":"hardware_hookup/#lipo-battery","title":"LiPo Battery","text":"<p>Battery Polarity</p> <p>Please make sure that you use one of our recommended Lithium Ion batteries. Some batteries use the same JST connector as ours but have the opposite polarity. Connecting one of these to your DataLogger IoT will destroy it. If you are going to use your own battery, it is up to you to ensure it has the correct polarity.</p> <p>Now is a good time to attach a LiPo battery, if you want the DataLogger IoT to keep logging when you disconnect USB-C.</p> <p>You can connect one of our standard single cell LiPo batteries to the DataLogger IoT and power it for hours, days or weeks depending on what sensors you have attached and how often you log data. The DataLogger IoT has a built-in charger too which will charge your battery at 500mA when USB-C is connected. Please make sure your battery capacity is at least 500mAh (0.5Ah); bad things will happen if you try to charge our smallest batteries at 500mA. The yellow CHG charging LED will light up while the battery is charging and will go out once charging is complete.</p> <p>Warning</p> <p>The MCP73831 charge IC on the board is used on a few SparkFun products. For more information about the CHG status LED, we recommend taking look at the Hardware Overview. We also recommend taking a look at this tutorial for Single Cell LiPo Battery Care.</p>"},{"location":"hardware_hookup/#usb-cable","title":"USB Cable","text":"<p>The USB-C connector provides power to the DataLogger IoT and acts as a serial interface for configuration and data display.</p> <p>If you are going to use a microSD card to store your data, and why wouldn\u2019t you, then insert that first before attaching your USB cable. You should only insert or remove the SD card while the power is turned off or disconnected. Removing the card while the DataLogger IoT is logging will almost certainly corrupt your data.</p> <p>Likewise, it is a good idea to only attach or disconnect Qwiic sensors when the power is turned off or disconnected. The Qwiic bus is pretty tolerant to \u201chot swapping\u201d, but: disconnecting a sensor while it is in use will confuse the DataLogger IoT software; and a new sensor won\u2019t be detected until the firmware restarts.</p> <p>Depending on what ports your computer has available, you will need one of the following cables:</p> <ul> <li>USB 2.0 A to C Cable</li> <li>USB 3.1 A to C Cable</li> <li>USB 2.0 C to C Cable</li> </ul> <p>Use the cable to connect your DataLogger IoT to your computer and you will see the LEDs light as the DataLogger IoT starts up. The addressable RGB RGB LED will light up green for a second or two while the DataLogger IoT configures itself. It will flash blue while data is being logged to the microSD card. If you have jumped the gun and have a LiPo battery already connected, the yellow CHG charging LED may light up too.</p> <p>If the addressable RGB LED does not light up, your DataLogger IoT is probably in deep sleep following a previous logging session. Pressing the RST reset button will wake it.</p> <p>You\u2019ll find full instructions on how to configure the DataLogger IoT later in this tutorial.</p>"},{"location":"hardware_hookup/#standoffs","title":"Standoffs","text":"<p>For users interested in stacking the Qwiic-enabled device on the DataLogger IoT or mounting in an enclosure, you will need some standoffs to mount the boards. When mounting, note that all four mounting holes are not positioned exactly for a 1.0\"x1.0\" sized Qwiic board. Only two of the four mounting holes are compatible for a 1.0\"x1.0\" sized Qwiic board. For example the image below shows the boards stacked on each side of the DataLogger IoT. On top, the Qwiic GPS (SAM-M10Q) breakout was also able to stack by rotating the board slightly and aligning the mounting holes on the 1.6\"x1.6\" sized board to the other mounting holes</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun DataLogger IoT. At the time of writing, we highlighted the SparkFun DataLogger IoT - 9DoF. However, this also applies for the SparkFun DataLogger IoT.</p> DataLogger IoT - 9DoF (Top View) DataLogger IoT - 9DoF (Bottom View) <p>The SparkFun DataLogger is pretty much the same with the exception of the following features listed below. We'll include notes highlighting the differences in each section.</p> <ul> <li>No built - in 6DoF IMU - ISM330DHCX</li> <li>No built - in magnetometer - MMC5983</li> <li>The addressable RGB LED - WS2812 is replaced with the side emitting addressable RGB LED - B3DQ3BRG</li> <li>No IMU INT2 jumper</li> <li>No Mag INT jumper</li> <li>Included MEAS PTH Jumper</li> <li>The \"35 / A7\" PTH on the edge of the board is replace with a \"5\" PTH.</li> </ul> DataLogger IoT (Top View) DataLogger IoT (Bottom View)"},{"location":"hardware_overview/#esp32-wroom-module","title":"ESP32-WROOM Module","text":"<p>The DataLogger IoT is populated with Espressif's ESP32-WROOM-32E module. Espressif's ESP32 WROOM ubiquitous IoT microcontroller is a powerful WiFi, BT, and BLE MCU module that targets a wide variety of applications. For the DataLogger IoT, the firmware currently utilizes the WiFi feature.</p> <p>Note</p> <p>Currently the DataLogger IoT does not have BT or BLE. However, BT or BLE is being considered on a future firmware build to include this as a feature.</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out to connectors and through hole pads. Below list a few methods of powering the board up. There are protection diodes for the USB-C, 5V pin, and single cell LiPo battery. Power is regulated down to 3.3V for the system voltage.  Depending on the settings and what is connected to the DataLogger IoT, the board can pull a minimum of 200\u00b5A in low power mode by itself.</p> <ul> <li>USB-C</li> <li>5V Pin</li> <li>Single Cell LiPo Battery</li> <li>3V3 Pin</li> </ul>"},{"location":"hardware_overview/#usb-c-and-5v","title":"USB-C and 5V","text":"<p>The DataLogger IoT comes equipped with a USB type C socket which you can use to connect it to your computer to view the output and configuration through the serial terminal, or plug in a USB-C power supply. The DataLogger IoT includes the configuration channel resistors needed to tell the power supply to deliver 5V. You can use your USB-C laptop charger as the power source should you need to, even though it normally delivers a much higher voltage.</p> <p>There is also a 5V power input pin. You can use this to feed in 5V power from an external source. The maximum voltage is 6.0V. The 5V pin is diode-protected and so is the USB-C power input, so it is OK to have both connected at the same time. This pin is ideal if you want to power your DataLogger from regulated solar power or a different type of power supply. You can not use the 5V pin as an output.</p> <p>Voltage from the USB is regulated down to the XC6222 3.3V/700mA voltage regulators for the system voltage and Qwiic-enabled devices. USB power is also connected to the MCP73831 to charge a single cell LiPo battery at a default rate of 500mA.</p> <p>For customers in North America, our NEMA Raspberry Pi Wall Adapter is a perfect choice. You can power the DataLogger IoT from our USB Battery Pack / Power Bank - TOL-15204 but you will need a USB-C cable too:</p> <ul> <li>Our USB 2.0 A to C Cable - CAB-15092 will do nicely</li> <li>Our USB 3.1 A to C Cable - CAB-14743 is a good choice too</li> </ul>"},{"location":"hardware_overview/#lipo-battery-input-charger-and-fuel-gauge","title":"LiPo Battery Input, Charger, and Fuel Gauge","text":"<p>Warning</p> <p>Battery Polarity: Please make sure that you use one of our recommended Lithium Ion batteries. Some batteries use the same JST connector as ours but have the opposite polarity. Connecting one of these to your DataLogger IoT will destroy it. If you are going to use your own battery, it is up to you to ensure it has the correct polarity.</p> <p>But of course you\u2019re going to want to use the DataLogger IoT to log sensor data while on the move too. You can connect one of our standard single cell LiPo batteries to the DataLogger IoT and power it for hours, days or weeks depending on what sensors you have attached and how often you log data. The DataLogger IoT uses the built-in MCP73831 charger too which will charge your battery at 500mA when USB-C is connected. Please make sure your battery capacity is at least 500mAh (0.5Ah); bad things will happen if you try to charge our smallest batteries at 500mA. The board also includes the MAX17048 LiPo Fuel Gauge which allows you to determine how much power your LiPo battery has available. The 2-pin JST connector pins are broken out to PTHs on the edge of the board if you decide to solder a single cell LiPo battery directly to the board or power another device.</p>"},{"location":"hardware_overview/#3v3-pins","title":"3V3 Pins","text":"<p>For those going the old school route, you can also bypass the voltage regulators by soldering directly to the 3V3 and GND pin to provide power if your application has a regulated 3.3V. Note that this is only connected to the system voltage. You will also need to provide power to the 3V3 SWCH or Qwiic-enabled devices should you decide to bypass the voltage regulator.</p>"},{"location":"hardware_overview/#ch340-usb-to-serial-converter","title":"CH340 USB-to-Serial Converter","text":"<p>The top side of the board includes a CH340 USB-to-Serial Converter. The chip can be used to send serial data between the device and computer. You can view the output or configure the device through a serial terminal.</p> <p>The driver should automatically install on most operating systems. However, there is a wide range of operating systems out there. You may need to install drivers the first time you connect the chip to your computer's USB port or when there are operating system updates. For more information, check out our How to Install CH340 Drivers Tutorial.</p> How to Install CH340 Drivers"},{"location":"hardware_overview/#uart","title":"UART","text":"<p>The hardware serial UART pins are broken out on the edge of the board. For more information about Serial UART, check out the tutorial about Serial Communication for more information.</p> <ul> <li>TXD: UART transmit pin. This is connected to pin <code>16</code>.</li> <li>RXD: UART receive pin. This is connected to pin <code>17</code>.</li> </ul> <p>Note</p> <p>The UART pins are not currently supported in the firmware for data logging.</p>"},{"location":"hardware_overview/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>Note</p> <p>You may notice a thin film over the vertial Qwiic connector. This is used by a pick-and-place machine when populating the component on the board before it goes through the reflow oven. This can be removed if you decide to use the vertical Qwiic connector with Qwiic-enabled devices.</p> <p>SparkFun's Qwiic Connect System uses 4-pin JST style connectors to quickly interface development boards with I<sup>2</sup>C sensors and more. No soldering required and there's no need to worry about accidentally swapping the SDA and SCL wires. The Qwiic connector is polarized so you know you\u2019ll have it wired correctly every time, right from the start. Qwiic boards are daisy chain-able too so you can connect multiple sensors to the DataLogger IoT and log readings from all of them.</p> <p>The board is populated with vertical and horizontal Qwiic connectors. These are also broken out to PTHs on the edge of the board.</p> <ul> <li>SCL: I<sup>2</sup>C clock pin. This is connected to pin <code>22</code> and a 2.2k\u03a9 pull-up resistor.</li> <li>SDA: I<sup>2</sup>C data pin. This is connected to pin <code>21</code> and a 2.2k\u03a9 pull-up resistor.</li> <li>3V3 SW: The 3.3v pin is connected to the XC6222 voltage regulator's output to power the Qwiic devices.</li> <li>GND: Common, ground voltage (0V reference) for the system</li> </ul> <p>Connected to the line I<sup>2</sup>C line is the MAX17048 LiPo fuel gauge (7-bit unshifted address = 0x36).</p> <p>Sometimes you might want to connect more than one of the same type of sensor to the DataLogger IoT. On the I<sup>2</sup>C bus, each device needs to have a unique address. On many of our boards, there are jumpers links which you can use to change the address and some have addresses that can be configured in software. But there are some where you cannot change the address. Typically, one would use a multiplexor. However, we currently do not have the DataLogger IoT configured to work with any multiplexors (i.e. Qwiic Mux Breakout).</p> <p>Note</p> <p>Currently the Qwiic Mux is not compatible with the DataLogger IoT.</p> <p>The DataLogger IoT includes a dedicated 3.3V regulator for the Qwiic connector. This has several advantages including:</p> <ul> <li>The DataLogger IoT can completely power-down the I<sup>2</sup>C sensors during sleep to prolong your battery life</li> <li>There\u2019s no risk of the Qwiic bus gulping too much current and causing problems for the ESP32</li> </ul>"},{"location":"hardware_overview/#spi","title":"SPI","text":"<p>Note</p> <p>Besides the built-in ISM330DHCX and MMC5983MA, the SPI pins are not currently supported in the firmware for data logging.</p> <p>The SPI pins are broken out on the edge of the board. For those that are unfamiliar to PICO and POCI, check out the SPI tutorial for more information.</p> <ul> <li>SCK: SPI clock pin. This is connect to pin <code>18</code>.</li> <li>PICO: SPI Peripheral In Controller Out. This is connected to pin <code>23</code>.</li> <li>POCI: SPI Peripheral Out Controller In. This is connected to pin <code>19</code>.</li> </ul> <p>Not shown in the image are the chip select (CS) pins. The 6DoF IMU's CS pin is connected to pin <code>5</code>. The magnetometer's CS pin is connected to pin <code>27</code> which is not broken out.</p> <p>Note</p> <p>On the DataLogger IoT, the IMU and magnetometer are not connected to the SPI port since they are not included on the board. Instead of pin \"35 / A7\" being broken out, pin \"5\" is broken out on the edge of the board.</p> <p> </p>"},{"location":"hardware_overview/#microsd-card-socket","title":"MicroSD Card Socket","text":"<p>The DataLogger IoT supports full 4-bit SDIO for fast logging and uses common microSD cards to record clear text, comma separated files. Flip over the DataLogger IoT and you'll see the latching microSD card socket. You probably already have a microSD card laying around. However, if you need any additional units, we have plenty in the SparkFun catalog. The DataLogger can use any size microSD card and supports FAT32 cards in addition to FAT16. Please ensure that your SD card is formatted correctly; we recommend the Raspberry Pi Imager Tool.</p> <p>Slide in your formatted SD card and it will click neatly into place. The edge of the SD card will stick out on the edge of the circuit board when it is inserted correctly.</p> <p>Warning</p> <p>You should only insert or remove the SD card while the power is turned off or disconnected. Removing the card while the DataLogger IoT is logging will almost certainly corrupt your data.</p>"},{"location":"hardware_overview/#9-degrees-of-freedom-9dof","title":"9 Degrees of Freedom (9DOF)","text":"<p>As stated earlier, included on every DataLogger IoT - 9DoF is a 6DoF Inertial Measurement Unit (IMU) for built-in logging of triple-axis accelerometer and gyro. There is also a built-in triple-axis magnetometer for a complete 9 degrees of freedom. Beside each IC is a silkcreen showing the reference axis. Both are connected to the ESP32 via the SPI port. Combined, you have 9 degrees of inertial measurement! Whereas the original 9DOF Razor used the old MPU-9250, this uses the ISM330DHCX and MMC5983MA. Oh, and if that wasn\u2019t enough, it comes with a built-in temperature sensor on each IC too. So if you want to use the DataLogger IoT as a transportation logger, it will do that straight out of the anti-static bag!  </p> <p>Note</p> <p>For users using the SparkFun DataLogger, there 6DoF IMU and magnetometer is not populated on the board. The associated silkscreen and jumpers for the sensors are also not included on the board.</p> <p> </p>"},{"location":"hardware_overview/#analog-pins","title":"Analog Pins","text":"<p>Note</p> <p>The analog pins are not currently supported in the firmware for data logging.</p> <p>There are three 12-bit analog pins available and broken out on edge of the board.</p> <ul> <li>36 / A0: Analog A0. This is connected to pin <code>36</code>.</li> <li>39 / A3: Analog A3. This is connected to pin <code>39</code>.</li> <li>35 / A7: Analog A7. This is connected to pin <code>35</code>.</li> </ul> <p>Note</p> <p>Instead of pin \"35 / A7\" being broken out on the DataLogger IoT, pin \"5\" is broken out on the edge of the board.</p> <p> </p>"},{"location":"hardware_overview/#reset-and-boot-buttons","title":"Reset and Boot Buttons","text":"<p>Note</p> <p>You may notice a thin film over buttons. This is used by a pick-and-place machine when populating the component on the board before it goes through the reflow oven. This can be removed.</p> <p>There are two buttons available on the board for reset and boot. These are also broken out on the edge of the board as PTHs. If you have your DataLogger IoT mounted in an enclosure, you can also attach an external boot or reset switch too. Any Single Pole Normally-Open Push-To-Close momentary switch will do. Solder pin headers or wires to the RST and GND breakout pins and connect your external switch to those.</p> <ul> <li>RESET: Pressing this button will pull the pin LOW and reset the program running on the ESP32 without unplugging the board.</li> <li>BOOT: The boot button usually allows users to force the ESP32 into bootloader mode to manually flash new firmware to the ESP32. The ESP32 will remain in this mode until there is a power cycle or the reset button is pressed. As of firmware v01.00.02, this button has an extra function: pressing down on the user button for 20 seconds will erase on-board preference storage and restart the board. This is connected to pin <code>0</code> on the ESP32.</li> </ul> <p>Like other ESP32 development boards, these buttons are populated so that users can place the ESP32 module in bootloader mode. For users that need to place the board in bootloader mode when powered, you will need to:</p> <ul> <li>Press the BOOT button.</li> <li>While holding on the BOOT button, press the RESET button momentarily.</li> <li>Finally, release the BOOT button.</li> </ul> <p>Most of the time, users will simply have the board executing the firmware that is loaded on the ESP32 module and updating through the configuration menu either through the microSD card or OTA.</p> <p>Danger</p> <p>Please think very carefully before uploading any Arduino sketches to your DataLogger IoT.</p> <p>You will overwrite the DataLogger IoT firmware, leaving it unable to update or restore itself.</p> <p>The DataLogger IoT comes pre-programmed with amazing firmware which can do so much. It is designed to be able to update itself and restore itself if necessary. But it can not do that if you overwrite the firmware with any Arduino sketch. It is just like erasing the restore partition on your computer hard drive. Do not do it - unless you really know what you are doing.</p> <p>Really. We mean it.</p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>There are three LEDs populated on the board. These can be disabled with their respective jumpers on the back of the board.</p> <ul> <li>STAT: The status LED is connected to pin <code>25</code>.</li> <li>RGB: The WS2812-2020 RGB addressable LED is connected to pin <code>26</code>. In addition to being disabled through the jumper on the back, you can also disable the LED through software. The following colors represent different states that the board is in.<ul> <li>White: A solid white LED indicates that the board is currently being configured through the configuration menu.</li> <li>Green: A solid green LED indicates that the board is initializing. As of firmware v01.00.02, the LED blinks green when on battery power indicating that the battery level is VBATT &gt; 50%.</li> <li>Blue: A blinking blue LED indicates that the board is reading sensor data and logging the values.</li> <li>Yellow: A solid yellow LED indicates that a firmware update is in progress. As of firmware v01.00.02, the LED blinks yellow when on battery power indicating that the battery level is between 50% &gt; VBATT &gt; 10%.</li> <li>Red: As of firmware v01.00.02, the LED blinks red when on battery power indicating that the battery level is VBATT &lt; 10%.</li> </ul> </li> <li>CHG: The on-board yellow CHG LED can be used to get an indication of the charge status of your battery. Below is a table of other status indicators depending on the state of the charge IC.</li> </ul> Charge State LED status No Battery Floating (should be OFF, but may flicker) Shutdown Floating (should be OFF, but may flicker) Charging ON Charge Complete OFF <p>Note</p> <p>On the DataLogger IoT, we included the B3DQ3BRG addressable RGB LED instead of the WS2812 with the light emitting from the top of the IC. This side emitting LED uses the same protocol as the WS2812 and was a design choice for users placing the board in an enclosure.</p> <p> </p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>There are seven jumpers on the back of the DataLogger IoT - 9DoF. For more information, check out our tutorial on working with jumper pads and PCB traces should you decide to cut the traces with a hobby knife.</p> <ul> <li>SHLD: This jumper connects the USB Type C connector's shield pin to GND. Cut this to isolate the USB Type C connector's shield pin.</li> <li>I<sup>2</sup>C: This three way jumper labeled as I<sup>2</sup>C are closed by default. By cutting the jumpers, it will disconnect the 2.2k\u03a9 pull-up resistors for the I<sup>2</sup>C bus. Most of the time you can leave these alone unless your project requires you to disconnect the pull-up resistors.</li> <li>STAT: This jumper connects the status LED to pin <code>25</code> and it is closed by default. Open the jumper to disable the LED.</li> <li>RGB: This jumper connects the WS2812-2020 RGB addressable LED to pin <code>26</code> and it is closed by default. Open the jumper to disable the LED.</li> <li>CHG:  This jumper connects the charge LED on the MCP73831 charge IC and it is closed by default. Open the jumper to disable the LED.</li> <li>IMU INT2: This jumper connects the ISM330DHCX IMU's interrupt pin to pin <code>35</code> and it is open by default. Add a solder jumper to connect.</li> <li>MAG INT: This jumper connects the MMC5983MA  magnetometer's interrupt pin to pin <code>35</code> and it is open by default. Add a solder jumper to connect.</li> </ul> <p>Note</p> <p>On the DataLogger IoT, the IMU INT2 or MAG INT jumpers are not included since it does not have the built in 6DoF IMU or magnetometer. With the extra real estate on the board, we were able to include a MEAS PTH and jumper on the board. By default, the jumper is closed. You can cut this jumper on the bottom side of the board to measure the DataLogger IoT\u2019s current draw from external power.</p> <p> </p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The overall length and width with the antenna connector is about 1.66\" x 2.00\". There are four mounting holes in the center of the board. Due to the size of the board and the ESP32 module, the mounting holes are positioned in a way for users to add two Qwiic enabled boards with a width of 1.0\" instead of one Qwiic board.</p> DataLogger IoT - 9DoF DataLogger IoT"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun DataLogger IoT is a data logger that comes preprogrammed to automatically log IMU, GPS, and various pressure, humidity, and distance sensors.  All without writing a single line of code! They come in two flavors: The SparkFun DataLogger IoT - 9DoF and the SparkFun DataLogger IoT. Both versions of the DataLogger IoT automatically detects, configures, and logs Qwiic sensors. It was specifically designed for users who just need to capture a lot of data to a CSV or JSON file, and get back to their larger project. Save the data to a microSD card or send it wirelessly to your preferred Internet of Things (IoT) service!</p> <ul> <li> <p> </p> <p> SparkFun DataLogger IoT - 9DoF    DEV-20594    Purchase from SparkFun  </p> </li> <li> <p> </p> <p> SparkFun DataLogger IoT    DEV-22462    Purchase from SparkFun  </p> </li> </ul>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>Battery Polarity</p> <p>Please make sure that you use one of our recommended Lithium Ion batteries. Some batteries use the same JST connector as ours but have the opposite polarity. Connecting one of these to your DataLogger IoT will destroy it. If you are going to use your own battery, it is up to you to ensure it has the correct polarity.</p> <p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun DataLogger IoT<ul> <li>SparkFun DataLogger IoT - 9DoF [DEV-20594]</li> <li>SparkFun DataLogger IoT [DEV-22462]</li> </ul> </li> <li>1x microSD card formatted with FAT32 [COM-15107]</li> <li>1x A USB-C cable for configuring and LiPo charging<ul> <li>Our USB 2.0 A to C Cable [CAB-15092] will do nicely</li> <li>Our USB 3.1 A to C Cable [CAB-14743] is a good choice too</li> </ul> </li> <li>1x Lithium Ion Battery</li> <li>At least one Qwiic cable<ul> <li>A single 50mm Cable is all you need to get going</li> <li>Our Qwiic Cable Kit covers all the options</li> </ul> </li> <li>At least one Qwiic enabled devices that is compatible that you may need</li> </ul> <ul> <li> <p> </p> <p> SparkFun DataLogger IoT - 9DoF    DEV-20594 </p> </li> <li> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot    CAB-14743 </p> </li> <li> <p> </p> <p> microSD Card - 1GB (Class 4)    COM-15107 </p> </li> <li> <p> </p> <p> Qwiic Cable - 50mm    PRT-14426 </p> </li> <li> <p> </p> <p> Lithium Ion Battery - 1250mAh (IEC62133 Certified)  PRT-18286    </p> </li> </ul>"},{"location":"introduction/#the-sensors","title":"The Sensors","text":"<p>Straight out of the box anti-static bag, the DataLogger IoT is ready to log data from its built-in ISM330DHCX Inertial Measurement Unit (IMU) and MMC5983MA magnetometer. Only want to log magnetometer, accelerometer, gyro or temperature data? You\u2019re good to go! But the fun is only just beginning\u2026</p> <p>The DataLogger IoT is preprogrammed to automatically log data from all of the following sensors, so you may wish to add one or more of these to your shopping cart too. (More sensors are being added all the time and it is really easy to upgrade the DataLogger IoT to support them. But we'll get to that in a moment!). Currently, auto-detection is supported on the following Qwiic-enabled products:</p> <p>Note</p> <p>For a list of supported devices based on the firmware, you can check out the list of supported Qwiic Devices in the appendix. We simply categorized the supported devices below based on the type.</p> <ul> <li>Any u-Blox GNSS Modules (Lat/Long, Altitude, Velocity, SIV, Time, Date) such as:<ul> <li>ZED-F9P 1cm High Precision GPS</li> <li>NEO-M8P 2.5cm High Precision GPS</li> <li>SAM-M10Q 1.5m GPS</li> <li>SAM-M8Q 1.5m 72 Channel GPS</li> <li>ZOE-M8Q 1.5m Compact GPS</li> <li>NEO-M9N 1.5m GPS</li> <li>MAX-M10S 1.5m Ultra-Low Power GPS</li> </ul> </li> <li>Inertial Measurement Unit (Accelerometer and Gyro):<ul> <li>ISM330DHCX IMU (Built-in for the 9DoF versio via SPI)</li> </ul> </li> <li>Magnetometer:<ul> <li>MMC5983 (Built-in for the 9DoF version via SPI)</li> </ul> </li> <li>Distance:<ul> <li>TMF8820 dToF Imager</li> <li>TMF8821 dToF Imager</li> <li>VCNL4040 Proximity and Lux</li> <li>VL53L1X Distance - 4 Meter</li> <li>VL53L4 Distance - 1.3 Meter</li> <li>VL53L5 ToF Imager</li> </ul> </li> <li>Pressure, Altitude, Humidity and Temperature Data:<ul> <li>BME280 Atmospheric</li> <li>LPS25HB Absolute Pressure</li> <li>MPR Series - MPRLS0025PA00001A MicroPressure  </li> <li>MS8607 Pressure, Humidity, and Temperature</li> <li>MS5637 Barometric Pressure and Temperature</li> <li>AHT20 Humidity and Temperature</li> <li>SHTC3 Humidity and Temperature</li> <li>SDP31 Differential Pressure</li> <li>BMP384 Pressure and Temperature</li> <li>BMP581 Pressure and Temperature</li> </ul> </li> <li>Air Quality and Environmental Sensors:<ul> <li>CCS811 Air Quality (CO2 and VOC)</li> <li>SGP30 Air Quality (TVOC, CO2, H2, Ethanol)</li> <li>SGP40 Air Quality (VOC, Humidity, Temperature)</li> <li>SCD30 CO2, Humidity, and Temperature</li> <li>SCD40 CO2, Humidity, and Temperature</li> <li>BME680 Air Quality (Pressure, Humidity, Temperature, Gas, VOCs)</li> <li>BME688 Air Quality (Pressure, Humidity, Temperature, Gas, VOCs, VSC, CO, Gas)</li> <li>FS3000 Air Velocity</li> <li>SEN54 Environmental Sensor Node (Particle, VOC, Humidity, and Temperature)</li> <li>STC31 CO2 and Temperature sensor</li> <li>VEML6075 UV  </li> <li>VEML7700 Ambient Light and Lux</li> </ul> </li> <li>Temperature:<ul> <li>AMG8833 Grid-EYE Infrared Array</li> <li>MCP9600 Thermocouple Amplifier</li> <li>PT100 ADS122C04 PR Temperature</li> <li>TMP117 High Precision Temperature</li> </ul> </li> <li>Power:<ul> <li>ACS37800 Power Meter</li> <li>MAX17048 Li-Po Battery Fuel Gauge (Built-in)</li> </ul> </li> <li>Real Time Clock:<ul> <li>RV8803 RTC Module</li> </ul> </li> <li>NFC/RFID:<ul> <li>ST25DVxxKC Dynamic NFC/RFID Tag</li> </ul> </li> <li>Weight:<ul> <li>NAU7802  Qwiic Scale Load Cell Amplifier</li> </ul> </li> <li>Miscellaneous:<ul> <li>Qwiic Button</li> <li>Qwiic Twist RGB Rotary Encoder</li> </ul> </li> <li>Analog Voltage:<ul> <li>ADS1015 12-bit 4-channel Differential ADC</li> <li>ADS122C04 24-bit Differential ADC found on the PT100</li> </ul> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic system, we recommend reading here for an overview.</p> Qwiic Connect System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Accelerometer Basics </p> </li> <li> <p> </p> <p> Gyroscope </p> </li> <li> <p> </p> <p> Qwiic 9DoF - ISM330DHCX, MMC5983MA Hookup Guide </p> </li> <li> <p> </p> <p> Serial Terminal Basics </p> </li> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> <li> <p> </p> <p> I2C </p> </li> <li> <p> </p> <p> Battery Technologies </p> </li> <li> <p> </p> <p> Single Cell LiPo Battery Care </p> </li> </ul>"},{"location":"prepare_your_microsd_card/","title":"Preparing Your MicroSD Card","text":"<p>Not all microSD cards are created equal. The capacity, read/write speed, and format vary depending on the manufacturer. In order to log data to the microSD card, you will need to ensure that your memory card is formatted as FAT32. You can also use FAT16. If the memory card is formatted as a different memory card, the DataLogger IoT will not be able to recognize the microSD card.</p>"},{"location":"prepare_your_microsd_card/#checking-microsd-card-format","title":"Checking MicroSD Card Format","text":"<p>While you can simply insert the microSD card into your DataLogger IoT and start logging, there may be a chance that the it will not recognize the memory card due to the format.</p>"},{"location":"prepare_your_microsd_card/#checking-microsd-card-format-windows","title":"Checking MicroSD Card Format - Windows","text":"<p>To check to see if it is the correct format on a Windows you could head to the drive, right click, and select Properties.</p> <p>Once the properties are open, you should be able to tell what file system that the memory card uses. In this case, it was exFAT which is not compatible with the DataLogger IoT. You will need to reformat the memory card since it is not formatted as FAT32.</p>"},{"location":"prepare_your_microsd_card/#checking-microsd-card-format-macos","title":"Checking MicroSD Card Format - macOS","text":"<p>To check to see if it is the correct format on a macOS, you could head to the drive on your desktop. Then right click, and select Get Info.</p> <p>A window will pop up indicating the microSD card properties. Under General: &gt; Format:, you should be able to tell what file system that the memory card uses. In this case, it was exFAT which is not compatible with the DataLogger IoT. You will need to reformat the memory card since it is not formatted as FAT32.</p>"},{"location":"prepare_your_microsd_card/#download-raspberry-pi-imager","title":"Download Raspberry Pi Imager","text":"<p>There are a few methods and programs available to reformat your microSD card as a FAT32. We found it easier to use the Raspberry Pi Imager Tool. Of course, you will only be using the tool to erase the contents of the microSD card and formatting it as a FAT32 system. You will not actually flash any image to the memory card. Click on the button below to download the tool from the Raspberry Pi Foundation. It is supported on Windows, macOS, and Ubuntu for x86.</p> Raspberry Pi Imager Tool"},{"location":"prepare_your_microsd_card/#formatting-as-fat32-using-the-raspberry-pi-imager","title":"Formatting as FAT32 using the Raspberry Pi Imager","text":"<p>After downloading and installing the software, open the Raspberry Pi Imager.</p> <p>Under \"Operating System\", select \"Erase\" to \"format card as FAT32.\"</p> <p>Under \"Storage\", select the drive that the microSD card appeared as on your computer.</p> <p>When ready, select \"Write\". After a few minutes, the microSD card should be formatted with FAT32.</p> <p>Once the memory card has finished formatting, eject the microSD from your computer. To check to see if the microSD card is formatted as FAT32, you can check its properties as explained earlier with your operating system. Below shows a screenshot from a Windows and macOS showing that the microSD card reformatted as a FAT32 file system.</p>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your DataLogger IoT up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>DataLogger IoT - 9DoF<ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> </ul> </li> <li>DataLogger IoT<ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> </ul> </li> <li>CH340 Drivers</li> <li>Firmware</li> <li>GitHub Hardware Repo<ul> <li>SparkFun DataLogger IoT - 9DoF</li> <li>SparkFun DataLogger IoT</li> </ul> </li> <li>SFE Showcase<ul> <li>DataLogger IoT - 9DoF</li> <li>DataLogger IoT</li> </ul> </li> </ul> <p>Or check out these related blog posts.</p> <ul> <li> <p> </p> <p> IoT Platforms and Protocols </p> </li> <li> <p> </p> <p> Extending the Reach of Data Logging </p> </li> <li> <p> </p> <p> Send Sensor Data to AWS All In Under 15 Minutes </p> </li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun DataLogger IoT is a data logger that comes preprogrammed to automatically log IMU, GPS, and various pressure, humidity, and distance sensors.  All without writing a single line of code! They come in two flavors: The SparkFun DataLogger IoT - 9DoF and the SparkFun DataLogger IoT. Both versions of the DataLogger IoT automatically detects, configures, and logs Qwiic sensors. It was specifically designed for users who just need to capture a lot of data to a CSV or JSON file, and get back to their larger project. Save the data to a microSD card or send it wirelessly to your preferred Internet of Things (IoT) service!</p> <ul> <li> <p> </p> <p> SparkFun DataLogger IoT - 9DoF    DEV-20594    Purchase from SparkFun  </p> </li> <li> <p> </p> <p> SparkFun DataLogger IoT    DEV-22462    Purchase from SparkFun  </p> </li> </ul>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>Battery Polarity</p> <p>Please make sure that you use one of our recommended Lithium Ion batteries. Some batteries use the same JST connector as ours but have the opposite polarity. Connecting one of these to your DataLogger IoT will destroy it. If you are going to use your own battery, it is up to you to ensure it has the correct polarity.</p> <p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun DataLogger IoT<ul> <li>SparkFun DataLogger IoT - 9DoF [DEV-20594]</li> <li>SparkFun DataLogger IoT [DEV-22462]</li> </ul> </li> <li>1x microSD card formatted with FAT32 [COM-15107]</li> <li>1x A USB-C cable for configuring and LiPo charging<ul> <li>Our USB 2.0 A to C Cable [CAB-15092] will do nicely</li> <li>Our USB 3.1 A to C Cable [CAB-14743] is a good choice too</li> </ul> </li> <li>1x Lithium Ion Battery</li> <li>At least one Qwiic cable<ul> <li>A single 50mm Cable is all you need to get going</li> <li>Our Qwiic Cable Kit covers all the options</li> </ul> </li> <li>At least one Qwiic enabled devices that is compatible that you may need</li> </ul> <ul> <li> <p> </p> <p> SparkFun DataLogger IoT - 9DoF    DEV-20594 </p> </li> <li> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot    CAB-14743 </p> </li> <li> <p> </p> <p> microSD Card - 1GB (Class 4)    COM-15107 </p> </li> <li> <p> </p> <p> Qwiic Cable - 50mm    PRT-14426 </p> </li> <li> <p> </p> <p> Lithium Ion Battery - 1250mAh (IEC62133 Certified)  PRT-18286    </p> </li> </ul>"},{"location":"single_page/#the-sensors","title":"The Sensors","text":"<p>Straight out of the box anti-static bag, the DataLogger IoT is ready to log data from its built-in ISM330DHCX Inertial Measurement Unit (IMU) and MMC5983MA magnetometer. Only want to log magnetometer, accelerometer, gyro or temperature data? You\u2019re good to go! But the fun is only just beginning\u2026</p> <p>The DataLogger IoT is preprogrammed to automatically log data from all of the following sensors, so you may wish to add one or more of these to your shopping cart too. (More sensors are being added all the time and it is really easy to upgrade the DataLogger IoT to support them. But we'll get to that in a moment!). Currently, auto-detection is supported on the following Qwiic-enabled products:</p> <p>Note</p> <p>For a list of supported devices based on the firmware, you can check out the list of supported Qwiic Devices in the appendix. We simply categorized the supported devices below based on the type.</p> <ul> <li>Any u-Blox GNSS Modules (Lat/Long, Altitude, Velocity, SIV, Time, Date) such as:<ul> <li>ZED-F9P 1cm High Precision GPS</li> <li>NEO-M8P 2.5cm High Precision GPS</li> <li>SAM-M10Q 1.5m GPS</li> <li>SAM-M8Q 1.5m 72 Channel GPS</li> <li>ZOE-M8Q 1.5m Compact GPS</li> <li>NEO-M9N 1.5m GPS</li> <li>MAX-M10S 1.5m Ultra-Low Power GPS</li> </ul> </li> <li>Inertial Measurement Unit (Accelerometer and Gyro):<ul> <li>ISM330DHCX IMU (Built-in for the 9DoF versio via SPI)</li> </ul> </li> <li>Magnetometer:<ul> <li>MMC5983 (Built-in for the 9DoF version via SPI)</li> </ul> </li> <li>Distance:<ul> <li>TMF8820 dToF Imager</li> <li>TMF8821 dToF Imager</li> <li>VCNL4040 Proximity and Lux</li> <li>VL53L1X Distance - 4 Meter</li> <li>VL53L4 Distance - 1.3 Meter</li> <li>VL53L5 ToF Imager</li> </ul> </li> <li>Pressure, Altitude, Humidity and Temperature Data:<ul> <li>BME280 Atmospheric</li> <li>LPS25HB Absolute Pressure</li> <li>MPR Series - MPRLS0025PA00001A MicroPressure  </li> <li>MS8607 Pressure, Humidity, and Temperature</li> <li>MS5637 Barometric Pressure and Temperature</li> <li>AHT20 Humidity and Temperature</li> <li>SHTC3 Humidity and Temperature</li> <li>SDP31 Differential Pressure</li> <li>BMP384 Pressure and Temperature</li> <li>BMP581 Pressure and Temperature</li> </ul> </li> <li>Air Quality and Environmental Sensors:<ul> <li>CCS811 Air Quality (CO2 and VOC)</li> <li>SGP30 Air Quality (TVOC, CO2, H2, Ethanol)</li> <li>SGP40 Air Quality (VOC, Humidity, Temperature)</li> <li>SCD30 CO2, Humidity, and Temperature</li> <li>SCD40 CO2, Humidity, and Temperature</li> <li>BME680 Air Quality (Pressure, Humidity, Temperature, Gas, VOCs)</li> <li>BME688 Air Quality (Pressure, Humidity, Temperature, Gas, VOCs, VSC, CO, Gas)</li> <li>FS3000 Air Velocity</li> <li>SEN54 Environmental Sensor Node (Particle, VOC, Humidity, and Temperature)</li> <li>STC31 CO2 and Temperature sensor</li> <li>VEML6075 UV  </li> <li>VEML7700 Ambient Light and Lux</li> </ul> </li> <li>Temperature:<ul> <li>AMG8833 Grid-EYE Infrared Array</li> <li>MCP9600 Thermocouple Amplifier</li> <li>PT100 ADS122C04 PR Temperature</li> <li>TMP117 High Precision Temperature</li> </ul> </li> <li>Power:<ul> <li>ACS37800 Power Meter</li> <li>MAX17048 Li-Po Battery Fuel Gauge (Built-in)</li> </ul> </li> <li>Real Time Clock:<ul> <li>RV8803 RTC Module</li> </ul> </li> <li>NFC/RFID:<ul> <li>ST25DVxxKC Dynamic NFC/RFID Tag</li> </ul> </li> <li>Weight:<ul> <li>NAU7802  Qwiic Scale Load Cell Amplifier</li> </ul> </li> <li>Miscellaneous:<ul> <li>Qwiic Button</li> <li>Qwiic Twist RGB Rotary Encoder</li> </ul> </li> <li>Analog Voltage:<ul> <li>ADS1015 12-bit 4-channel Differential ADC</li> <li>ADS122C04 24-bit Differential ADC found on the PT100</li> </ul> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic system, we recommend reading here for an overview.</p> Qwiic Connect System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Accelerometer Basics </p> </li> <li> <p> </p> <p> Gyroscope </p> </li> <li> <p> </p> <p> Qwiic 9DoF - ISM330DHCX, MMC5983MA Hookup Guide </p> </li> <li> <p> </p> <p> Serial Terminal Basics </p> </li> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> <li> <p> </p> <p> I2C </p> </li> <li> <p> </p> <p> Battery Technologies </p> </li> <li> <p> </p> <p> Single Cell LiPo Battery Care </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun DataLogger IoT. At the time of writing, we highlighted the SparkFun DataLogger IoT - 9DoF. However, this also applies for the SparkFun DataLogger IoT.</p> DataLogger IoT - 9DoF (Top View) DataLogger IoT - 9DoF (Bottom View) <p>The SparkFun DataLogger is pretty much the same with the exception of the following features listed below. We'll include notes highlighting the differences in each section.</p> <ul> <li>No built - in 6DoF IMU - ISM330DHCX</li> <li>No built - in magnetometer - MMC5983</li> <li>The addressable RGB LED - WS2812 is replaced with the side emitting addressable RGB LED - B3DQ3BRG</li> <li>No IMU INT2 jumper</li> <li>No Mag INT jumper</li> <li>Included MEAS PTH Jumper</li> <li>The \"35 / A7\" PTH on the edge of the board is replace with a \"5\" PTH.</li> </ul> DataLogger IoT (Top View) DataLogger IoT (Bottom View)"},{"location":"single_page/#esp32-wroom-module","title":"ESP32-WROOM Module","text":"<p>The DataLogger IoT is populated with Espressif's ESP32-WROOM-32E module. Espressif's ESP32 WROOM ubiquitous IoT microcontroller is a powerful WiFi, BT, and BLE MCU module that targets a wide variety of applications. For the DataLogger IoT, the firmware currently utilizes the WiFi feature.</p> <p>Note</p> <p>Currently the DataLogger IoT does not have BT or BLE. However, BT or BLE is being considered on a future firmware build to include this as a feature.</p>"},{"location":"single_page/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out to connectors and through hole pads. Below list a few methods of powering the board up. There are protection diodes for the USB-C, 5V pin, and single cell LiPo battery. Power is regulated down to 3.3V for the system voltage.  Depending on the settings and what is connected to the DataLogger IoT, the board can pull a minimum of 200\u00b5A in low power mode by itself.</p> <ul> <li>USB-C</li> <li>5V Pin</li> <li>Single Cell LiPo Battery</li> <li>3V3 Pin</li> </ul>"},{"location":"single_page/#usb-c-and-5v","title":"USB-C and 5V","text":"<p>The DataLogger IoT comes equipped with a USB type C socket which you can use to connect it to your computer to view the output and configuration through the serial terminal, or plug in a USB-C power supply. The DataLogger IoT includes the configuration channel resistors needed to tell the power supply to deliver 5V. You can use your USB-C laptop charger as the power source should you need to, even though it normally delivers a much higher voltage.</p> <p>There is also a 5V power input pin. You can use this to feed in 5V power from an external source. The maximum voltage is 6.0V. The 5V pin is diode-protected and so is the USB-C power input, so it is OK to have both connected at the same time. This pin is ideal if you want to power your DataLogger from regulated solar power or a different type of power supply. You can not use the 5V pin as an output.</p> <p>Voltage from the USB is regulated down to the XC6222 3.3V/700mA voltage regulators for the system voltage and Qwiic-enabled devices. USB power is also connected to the MCP73831 to charge a single cell LiPo battery at a default rate of 500mA.</p> <p>For customers in North America, our NEMA Raspberry Pi Wall Adapter is a perfect choice. You can power the DataLogger IoT from our USB Battery Pack / Power Bank - TOL-15204 but you will need a USB-C cable too:</p> <ul> <li>Our USB 2.0 A to C Cable - CAB-15092 will do nicely</li> <li>Our USB 3.1 A to C Cable - CAB-14743 is a good choice too</li> </ul>"},{"location":"single_page/#lipo-battery-input-charger-and-fuel-gauge","title":"LiPo Battery Input, Charger, and Fuel Gauge","text":"<p>Warning</p> <p>Battery Polarity: Please make sure that you use one of our recommended Lithium Ion batteries. Some batteries use the same JST connector as ours but have the opposite polarity. Connecting one of these to your DataLogger IoT will destroy it. If you are going to use your own battery, it is up to you to ensure it has the correct polarity.</p> <p>But of course you\u2019re going to want to use the DataLogger IoT to log sensor data while on the move too. You can connect one of our standard single cell LiPo batteries to the DataLogger IoT and power it for hours, days or weeks depending on what sensors you have attached and how often you log data. The DataLogger IoT uses the built-in MCP73831 charger too which will charge your battery at 500mA when USB-C is connected. Please make sure your battery capacity is at least 500mAh (0.5Ah); bad things will happen if you try to charge our smallest batteries at 500mA. The board also includes the MAX17048 LiPo Fuel Gauge which allows you to determine how much power your LiPo battery has available. The 2-pin JST connector pins are broken out to PTHs on the edge of the board if you decide to solder a single cell LiPo battery directly to the board or power another device.</p>"},{"location":"single_page/#3v3-pins","title":"3V3 Pins","text":"<p>For those going the old school route, you can also bypass the voltage regulators by soldering directly to the 3V3 and GND pin to provide power if your application has a regulated 3.3V. Note that this is only connected to the system voltage. You will also need to provide power to the 3V3 SWCH or Qwiic-enabled devices should you decide to bypass the voltage regulator.</p>"},{"location":"single_page/#ch340-usb-to-serial-converter","title":"CH340 USB-to-Serial Converter","text":"<p>The top side of the board includes a CH340 USB-to-Serial Converter. The chip can be used to send serial data between the device and computer. You can view the output or configure the device through a serial terminal.</p> <p>The driver should automatically install on most operating systems. However, there is a wide range of operating systems out there. You may need to install drivers the first time you connect the chip to your computer's USB port or when there are operating system updates. For more information, check out our How to Install CH340 Drivers Tutorial.</p> How to Install CH340 Drivers"},{"location":"single_page/#uart","title":"UART","text":"<p>The hardware serial UART pins are broken out on the edge of the board. For more information about Serial UART, check out the tutorial about Serial Communication for more information.</p> <ul> <li>TXD: UART transmit pin. This is connected to pin <code>16</code>.</li> <li>RXD: UART receive pin. This is connected to pin <code>17</code>.</li> </ul> <p>Note</p> <p>The UART pins are not currently supported in the firmware for data logging.</p>"},{"location":"single_page/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>Note</p> <p>You may notice a thin film over the vertial Qwiic connector. This is used by a pick-and-place machine when populating the component on the board before it goes through the reflow oven. This can be removed if you decide to use the vertical Qwiic connector with Qwiic-enabled devices.</p> <p>SparkFun's Qwiic Connect System uses 4-pin JST style connectors to quickly interface development boards with I<sup>2</sup>C sensors and more. No soldering required and there's no need to worry about accidentally swapping the SDA and SCL wires. The Qwiic connector is polarized so you know you\u2019ll have it wired correctly every time, right from the start. Qwiic boards are daisy chain-able too so you can connect multiple sensors to the DataLogger IoT and log readings from all of them.</p> <p>The board is populated with vertical and horizontal Qwiic connectors. These are also broken out to PTHs on the edge of the board.</p> <ul> <li>SCL: I<sup>2</sup>C clock pin. This is connected to pin <code>22</code> and a 2.2k\u03a9 pull-up resistor.</li> <li>SDA: I<sup>2</sup>C data pin. This is connected to pin <code>21</code> and a 2.2k\u03a9 pull-up resistor.</li> <li>3V3 SW: The 3.3v pin is connected to the XC6222 voltage regulator's output to power the Qwiic devices.</li> <li>GND: Common, ground voltage (0V reference) for the system</li> </ul> <p>Connected to the line I<sup>2</sup>C line is the MAX17048 LiPo fuel gauge (7-bit unshifted address = 0x36).</p> <p>Sometimes you might want to connect more than one of the same type of sensor to the DataLogger IoT. On the I<sup>2</sup>C bus, each device needs to have a unique address. On many of our boards, there are jumpers links which you can use to change the address and some have addresses that can be configured in software. But there are some where you cannot change the address. Typically, one would use a multiplexor. However, we currently do not have the DataLogger IoT configured to work with any multiplexors (i.e. Qwiic Mux Breakout).</p> <p>Note</p> <p>Currently the Qwiic Mux is not compatible with the DataLogger IoT.</p> <p>The DataLogger IoT includes a dedicated 3.3V regulator for the Qwiic connector. This has several advantages including:</p> <ul> <li>The DataLogger IoT can completely power-down the I<sup>2</sup>C sensors during sleep to prolong your battery life</li> <li>There\u2019s no risk of the Qwiic bus gulping too much current and causing problems for the ESP32</li> </ul>"},{"location":"single_page/#spi","title":"SPI","text":"<p>Note</p> <p>Besides the built-in ISM330DHCX and MMC5983MA, the SPI pins are not currently supported in the firmware for data logging.</p> <p>The SPI pins are broken out on the edge of the board. For those that are unfamiliar to PICO and POCI, check out the SPI tutorial for more information.</p> <ul> <li>SCK: SPI clock pin. This is connect to pin <code>18</code>.</li> <li>PICO: SPI Peripheral In Controller Out. This is connected to pin <code>23</code>.</li> <li>POCI: SPI Peripheral Out Controller In. This is connected to pin <code>19</code>.</li> </ul> <p>Not shown in the image are the chip select (CS) pins. The 6DoF IMU's CS pin is connected to pin <code>5</code>. The magnetometer's CS pin is connected to pin <code>27</code> which is not broken out.</p> <p>Note</p> <p>On the DataLogger IoT, the IMU and magnetometer are not connected to the SPI port since they are not included on the board. Instead of pin \"35 / A7\" being broken out, pin \"5\" is broken out on the edge of the board.</p> <p> </p>"},{"location":"single_page/#microsd-card-socket","title":"MicroSD Card Socket","text":"<p>The DataLogger IoT supports full 4-bit SDIO for fast logging and uses common microSD cards to record clear text, comma separated files. Flip over the DataLogger IoT and you'll see the latching microSD card socket. You probably already have a microSD card laying around. However, if you need any additional units, we have plenty in the SparkFun catalog. The DataLogger can use any size microSD card and supports FAT32 cards in addition to FAT16. Please ensure that your SD card is formatted correctly; we recommend the Raspberry Pi Imager Tool.</p> <p>Slide in your formatted SD card and it will click neatly into place. The edge of the SD card will stick out on the edge of the circuit board when it is inserted correctly.</p> <p>Warning</p> <p>You should only insert or remove the SD card while the power is turned off or disconnected. Removing the card while the DataLogger IoT is logging will almost certainly corrupt your data.</p>"},{"location":"single_page/#9-degrees-of-freedom-9dof","title":"9 Degrees of Freedom (9DOF)","text":"<p>As stated earlier, included on every DataLogger IoT - 9DoF is a 6DoF Inertial Measurement Unit (IMU) for built-in logging of triple-axis accelerometer and gyro. There is also a built-in triple-axis magnetometer for a complete 9 degrees of freedom. Beside each IC is a silkcreen showing the reference axis. Both are connected to the ESP32 via the SPI port. Combined, you have 9 degrees of inertial measurement! Whereas the original 9DOF Razor used the old MPU-9250, this uses the ISM330DHCX and MMC5983MA. Oh, and if that wasn\u2019t enough, it comes with a built-in temperature sensor on each IC too. So if you want to use the DataLogger IoT as a transportation logger, it will do that straight out of the anti-static bag!  </p> <p>Note</p> <p>For users using the SparkFun DataLogger, there 6DoF IMU and magnetometer is not populated on the board. The associated silkscreen and jumpers for the sensors are also not included on the board.</p> <p> </p>"},{"location":"single_page/#analog-pins","title":"Analog Pins","text":"<p>Note</p> <p>The analog pins are not currently supported in the firmware for data logging.</p> <p>There are three 12-bit analog pins available and broken out on edge of the board.</p> <ul> <li>36 / A0: Analog A0. This is connected to pin <code>36</code>.</li> <li>39 / A3: Analog A3. This is connected to pin <code>39</code>.</li> <li>35 / A7: Analog A7. This is connected to pin <code>35</code>.</li> </ul> <p>Note</p> <p>Instead of pin \"35 / A7\" being broken out on the DataLogger IoT, pin \"5\" is broken out on the edge of the board.</p> <p> </p>"},{"location":"single_page/#reset-and-boot-buttons","title":"Reset and Boot Buttons","text":"<p>Note</p> <p>You may notice a thin film over buttons. This is used by a pick-and-place machine when populating the component on the board before it goes through the reflow oven. This can be removed.</p> <p>There are two buttons available on the board for reset and boot. These are also broken out on the edge of the board as PTHs. If you have your DataLogger IoT mounted in an enclosure, you can also attach an external boot or reset switch too. Any Single Pole Normally-Open Push-To-Close momentary switch will do. Solder pin headers or wires to the RST and GND breakout pins and connect your external switch to those.</p> <ul> <li>RESET: Pressing this button will pull the pin LOW and reset the program running on the ESP32 without unplugging the board.</li> <li>BOOT: The boot button usually allows users to force the ESP32 into bootloader mode to manually flash new firmware to the ESP32. The ESP32 will remain in this mode until there is a power cycle or the reset button is pressed. As of firmware v01.00.02, this button has an extra function: pressing down on the user button for 20 seconds will erase on-board preference storage and restart the board. This is connected to pin <code>0</code> on the ESP32.</li> </ul> <p>Like other ESP32 development boards, these buttons are populated so that users can place the ESP32 module in bootloader mode. For users that need to place the board in bootloader mode when powered, you will need to:</p> <ul> <li>Press the BOOT button.</li> <li>While holding on the BOOT button, press the RESET button momentarily.</li> <li>Finally, release the BOOT button.</li> </ul> <p>Most of the time, users will simply have the board executing the firmware that is loaded on the ESP32 module and updating through the configuration menu either through the microSD card or OTA.</p> <p>Danger</p> <p>Please think very carefully before uploading any Arduino sketches to your DataLogger IoT.</p> <p>You will overwrite the DataLogger IoT firmware, leaving it unable to update or restore itself.</p> <p>The DataLogger IoT comes pre-programmed with amazing firmware which can do so much. It is designed to be able to update itself and restore itself if necessary. But it can not do that if you overwrite the firmware with any Arduino sketch. It is just like erasing the restore partition on your computer hard drive. Do not do it - unless you really know what you are doing.</p> <p>Really. We mean it.</p>"},{"location":"single_page/#leds","title":"LEDs","text":"<p>There are three LEDs populated on the board. These can be disabled with their respective jumpers on the back of the board.</p> <ul> <li>STAT: The status LED is connected to pin <code>25</code>.</li> <li>RGB: The WS2812-2020 RGB addressable LED is connected to pin <code>26</code>. In addition to being disabled through the jumper on the back, you can also disable the LED through software. The following colors represent different states that the board is in.<ul> <li>White: A solid white LED indicates that the board is currently being configured through the configuration menu.</li> <li>Green: A solid green LED indicates that the board is initializing. As of firmware v01.00.02, the LED blinks green when on battery power indicating that the battery level is VBATT &gt; 50%.</li> <li>Blue: A blinking blue LED indicates that the board is reading sensor data and logging the values.</li> <li>Yellow: A solid yellow LED indicates that a firmware update is in progress. As of firmware v01.00.02, the LED blinks yellow when on battery power indicating that the battery level is between 50% &gt; VBATT &gt; 10%.</li> <li>Red: As of firmware v01.00.02, the LED blinks red when on battery power indicating that the battery level is VBATT &lt; 10%.</li> </ul> </li> <li>CHG: The on-board yellow CHG LED can be used to get an indication of the charge status of your battery. Below is a table of other status indicators depending on the state of the charge IC.</li> </ul> Charge State LED status No Battery Floating (should be OFF, but may flicker) Shutdown Floating (should be OFF, but may flicker) Charging ON Charge Complete OFF <p>Note</p> <p>On the DataLogger IoT, we included the B3DQ3BRG addressable RGB LED instead of the WS2812 with the light emitting from the top of the IC. This side emitting LED uses the same protocol as the WS2812 and was a design choice for users placing the board in an enclosure.</p> <p> </p>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>There are seven jumpers on the back of the DataLogger IoT - 9DoF. For more information, check out our tutorial on working with jumper pads and PCB traces should you decide to cut the traces with a hobby knife.</p> <ul> <li>SHLD: This jumper connects the USB Type C connector's shield pin to GND. Cut this to isolate the USB Type C connector's shield pin.</li> <li>I<sup>2</sup>C: This three way jumper labeled as I<sup>2</sup>C are closed by default. By cutting the jumpers, it will disconnect the 2.2k\u03a9 pull-up resistors for the I<sup>2</sup>C bus. Most of the time you can leave these alone unless your project requires you to disconnect the pull-up resistors.</li> <li>STAT: This jumper connects the status LED to pin <code>25</code> and it is closed by default. Open the jumper to disable the LED.</li> <li>RGB: This jumper connects the WS2812-2020 RGB addressable LED to pin <code>26</code> and it is closed by default. Open the jumper to disable the LED.</li> <li>CHG:  This jumper connects the charge LED on the MCP73831 charge IC and it is closed by default. Open the jumper to disable the LED.</li> <li>IMU INT2: This jumper connects the ISM330DHCX IMU's interrupt pin to pin <code>35</code> and it is open by default. Add a solder jumper to connect.</li> <li>MAG INT: This jumper connects the MMC5983MA  magnetometer's interrupt pin to pin <code>35</code> and it is open by default. Add a solder jumper to connect.</li> </ul> <p>Note</p> <p>On the DataLogger IoT, the IMU INT2 or MAG INT jumpers are not included since it does not have the built in 6DoF IMU or magnetometer. With the extra real estate on the board, we were able to include a MEAS PTH and jumper on the board. By default, the jumper is closed. You can cut this jumper on the bottom side of the board to measure the DataLogger IoT\u2019s current draw from external power.</p> <p> </p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The overall length and width with the antenna connector is about 1.66\" x 2.00\". There are four mounting holes in the center of the board. Due to the size of the board and the ESP32 module, the mounting holes are positioned in a way for users to add two Qwiic enabled boards with a width of 1.0\" instead of one Qwiic board.</p> DataLogger IoT - 9DoF DataLogger IoT"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we will go over how to connect to the SparkFun DataLogger IoT. At the time of writing, we used the DataLogger IoT - 9DoF. This hardware hookup explained in this section also applies for the DataLogger IoT.</p>"},{"location":"single_page/#soldering-to-the-pths","title":"Soldering to the PTHs","text":"<p>Note</p> <p>The UART, SPI, analog, and digital I/O pins are not currently supported in the firmware for data logging.</p> <p>For users that are interested in soldering to the edge of the board, we recommend soldering headers to the PTHs on the breakout for a permanent connection and using jumper wires. Of course, you could also solder wires to the breakout board as well. For a temporary connection during prototyping, you can use IC hooks like these.</p> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"single_page/#microsd-card","title":"MicroSD Card","text":"<p>If all you want to do is display your sensor readings in a serial terminal or monitor (connected via USB-C) then, strictly, you don\u2019t need to add a microSD card. But of course the whole point of the DataLogger IoT is that it can log readings from whatever sensors you have attached to microSD card. The data is logged in easy-to-read Comma Separated Value (CSV) text format by default. You can also set the format as JSON.</p> <p>You probably already have a microSD card laying around but if you need any additional units, we have plenty in the store. The DataLogger IoT can use any size microSD card as long as it is formatted correctly. Please ensure your SD card is formatted correctly. There are different software tools available. Some are built into your operating system. We recommend using the Raspberry Pi Imager Tool to easily format the memory card as FAT32 using the GUI. Flip over the DataLogger IoT and you\u2019ll see the latching microSD card socket. Slide in your formatted SD card and it will click neatly into place. Part of the edge of the SD card will stick out when fully inserted in the microSD card socket.</p> <p>You should only insert or remove the SD card while the power is turned off or disconnected. Removing the card while the DataLogger IoT is logging will almost certainly corrupt your data. You can tell when the board has just logged by observing the addressable RGB LED. When enabled, the LED will blink blue after it has logged one data point.</p> <p>After you\u2019ve logged some data, you will find a new file on your SD card. There may also be additional files if you manually saved the firmware or preferences to the memory card.</p> <ul> <li>sfe0001.txt: This is the file that contains the CSV or JSON sensor data. The format will depend on how you configured the DataLogger's output. We use .TXT as the file type so that your computer can open it in a simple text editor. The contents are all human-readable. But, if you want to, you can rename it as .CSV or .JSON instead. The file number is incremented for the next logging session.</li> <li>datalogger.json: This file only appears when you save the settings as your fallback storage. The file will include all preferences saved for any connected device, WiFi credentials, certificates, and keys.</li> <li>SparkFun_DataLoggerIoT*.bin: This file only appears when you save the firmware to the microSD card. Note that the asterisk (*) is the firmware version number (i.e. SparkFunDataLoggerIoT_01.00.01.bin).</li> </ul> <p>To remove the microSD card, make sure power is disconnected from the DataLogger IoT. Then press the microSD card into the microSD socket. The memory card will be ejected and you will hear a click again. Once the card is ejected, you can insert it into a microSD card adapter or USB reader to be read on a computer.</p>"},{"location":"single_page/#qwiic-sensors","title":"Qwiic Sensors","text":"<p>If you are going to attach extra sensors or any Qwiic-enabled device to the DataLogger IoT, then those need to be connected first before attaching a USB cable. It is a good idea to only attach or disconnect Qwiic sensors when the power is turned off or disconnected. The Qwiic bus is pretty tolerant to \u201chot swapping\u201d, but: disconnecting a sensor while it is in use will confuse the DataLogger IoT software (most likely each value associated with the device will remain constant); and a new sensor won\u2019t be detected until the firmware restarts.</p> <p>Plug one end of your Qwiic cable into the DataLogger IoT and plug the other end into your sensor. If you want to add extra sensors, you can simply connect them to each other in a daisy chain. You will need a Qwiic cable for each sensor. Our Qwiic Cable Kit covers all the options.</p> DataLogger IoT and a Qwiic-Enabled Device DataLogger IoT and several Qwiic-Enabled Devices Daisy Chained <p>Our Qwiic sensors usually all have power indicator LEDs and I<sup>2</sup>C pull-up resistors. Depending on your application, you may want or need to disable these by cutting the jumper links on the sensor circuit boards. We have a tutorial that will show you how to do that safely.</p> <p>Sometimes you might want to connect more than one of the same type of sensor to the DataLogger IoT. On the I<sup>2</sup>C bus, each device needs to have a unique address. On many of our boards, there are jumpers links which you can use to change the address and some have addresses that can be configured in software. But there are some where you cannot change the address - the NAU7802 Qwiic Scale being one example.</p> <p>Typically one would use a multiplexor. However, we currently do not have the DataLogger IoT configured to work with any multiplexors (i.e. Qwiic Mux Breakout).</p> <p>Note</p> <p>Currently the Qwiic Mux is not compatible with the DataLogger IoT.</p>"},{"location":"single_page/#lipo-battery","title":"LiPo Battery","text":"<p>Battery Polarity</p> <p>Please make sure that you use one of our recommended Lithium Ion batteries. Some batteries use the same JST connector as ours but have the opposite polarity. Connecting one of these to your DataLogger IoT will destroy it. If you are going to use your own battery, it is up to you to ensure it has the correct polarity.</p> <p>Now is a good time to attach a LiPo battery, if you want the DataLogger IoT to keep logging when you disconnect USB-C.</p> <p>You can connect one of our standard single cell LiPo batteries to the DataLogger IoT and power it for hours, days or weeks depending on what sensors you have attached and how often you log data. The DataLogger IoT has a built-in charger too which will charge your battery at 500mA when USB-C is connected. Please make sure your battery capacity is at least 500mAh (0.5Ah); bad things will happen if you try to charge our smallest batteries at 500mA. The yellow CHG charging LED will light up while the battery is charging and will go out once charging is complete.</p> <p>Warning</p> <p>The MCP73831 charge IC on the board is used on a few SparkFun products. For more information about the CHG status LED, we recommend taking look at the Hardware Overview. We also recommend taking a look at this tutorial for Single Cell LiPo Battery Care.</p>"},{"location":"single_page/#usb-cable","title":"USB Cable","text":"<p>The USB-C connector provides power to the DataLogger IoT and acts as a serial interface for configuration and data display.</p> <p>If you are going to use a microSD card to store your data, and why wouldn\u2019t you, then insert that first before attaching your USB cable. You should only insert or remove the SD card while the power is turned off or disconnected. Removing the card while the DataLogger IoT is logging will almost certainly corrupt your data.</p> <p>Likewise, it is a good idea to only attach or disconnect Qwiic sensors when the power is turned off or disconnected. The Qwiic bus is pretty tolerant to \u201chot swapping\u201d, but: disconnecting a sensor while it is in use will confuse the DataLogger IoT software; and a new sensor won\u2019t be detected until the firmware restarts.</p> <p>Depending on what ports your computer has available, you will need one of the following cables:</p> <ul> <li>USB 2.0 A to C Cable</li> <li>USB 3.1 A to C Cable</li> <li>USB 2.0 C to C Cable</li> </ul> <p>Use the cable to connect your DataLogger IoT to your computer and you will see the LEDs light as the DataLogger IoT starts up. The addressable RGB RGB LED will light up green for a second or two while the DataLogger IoT configures itself. It will flash blue while data is being logged to the microSD card. If you have jumped the gun and have a LiPo battery already connected, the yellow CHG charging LED may light up too.</p> <p>If the addressable RGB LED does not light up, your DataLogger IoT is probably in deep sleep following a previous logging session. Pressing the RST reset button will wake it.</p> <p>You\u2019ll find full instructions on how to configure the DataLogger IoT later in this tutorial.</p>"},{"location":"single_page/#standoffs","title":"Standoffs","text":"<p>For users interested in stacking the Qwiic-enabled device on the DataLogger IoT or mounting in an enclosure, you will need some standoffs to mount the boards. When mounting, note that all four mounting holes are not positioned exactly for a 1.0\"x1.0\" sized Qwiic board. Only two of the four mounting holes are compatible for a 1.0\"x1.0\" sized Qwiic board. For example the image below shows the boards stacked on each side of the DataLogger IoT. On top, the Qwiic GPS (SAM-M10Q) breakout was also able to stack by rotating the board slightly and aligning the mounting holes on the 1.6\"x1.6\" sized board to the other mounting holes</p>"},{"location":"single_page/#preparing-your-microsd-card","title":"Preparing Your MicroSD card","text":"<p>Not all microSD cards are created equal. The capacity, read/write speed, and format vary depending on the manufacturer. In order to log data to the microSD card, you will need to ensure that your memory card is formatted as FAT32. You can also use FAT16. If the memory card is formatted as a different memory card, the DataLogger IoT will not be able to recognize the microSD card.</p>"},{"location":"single_page/#checking-microsd-card-format","title":"Checking MicroSD Card Format","text":"<p>While you can simply insert the microSD card into your DataLogger IoT and start logging, there may be a chance that the it will not recognize the memory card due to the format.</p>"},{"location":"single_page/#checking-microsd-card-format-windows","title":"Checking MicroSD Card Format - Windows","text":"<p>To check to see if it is the correct format on a Windows you could head to the drive, right click, and select Properties.</p> <p>Once the properties are open, you should be able to tell what file system that the memory card uses. In this case, it was exFAT which is not compatible with the DataLogger IoT. You will need to reformat the memory card since it is not formatted as FAT32.</p>"},{"location":"single_page/#checking-microsd-card-format-macos","title":"Checking MicroSD Card Format - macOS","text":"<p>To check to see if it is the correct format on a macOS, you could head to the drive on your desktop. Then right click, and select Get Info.</p> <p>A window will pop up indicating the microSD card properties. Under General: &gt; Format:, you should be able to tell what file system that the memory card uses. In this case, it was exFAT which is not compatible with the DataLogger IoT. You will need to reformat the memory card since it is not formatted as FAT32.</p>"},{"location":"single_page/#download-raspberry-pi-imager","title":"Download Raspberry Pi Imager","text":"<p>There are a few methods and programs available to reformat your microSD card as a FAT32. We found it easier to use the Raspberry Pi Imager Tool. Of course, you will only be using the tool to erase the contents of the microSD card and formatting it as a FAT32 system. You will not actually flash any image to the memory card. Click on the button below to download the tool from the Raspberry Pi Foundation. It is supported on Windows, macOS, and Ubuntu for x86.</p> Raspberry Pi Imager Tool"},{"location":"single_page/#formatting-as-fat32-using-the-raspberry-pi-imager","title":"Formatting as FAT32 using the Raspberry Pi Imager","text":"<p>After downloading and installing the software, open the Raspberry Pi Imager.</p> <p>Under \"Operating System\", select \"Erase\" to \"format card as FAT32.\"</p> <p>Under \"Storage\", select the drive that the microSD card appeared as on your computer.</p> <p>When ready, select \"Write\". After a few minutes, the microSD card should be formatted with FAT32.</p> <p>Once the memory card has finished formatting, eject the microSD from your computer. To check to see if the microSD card is formatted as FAT32, you can check its properties as explained earlier with your operating system. Below shows a screenshot from a Windows and macOS showing that the microSD card reformatted as a FAT32 file system.</p>"},{"location":"single_page/#configuration","title":"Configuration","text":"<p>Configuring the settings is as easy as opening a serial menu. You can use any serial monitor or terminal emulator to quickly and easily change and store the DataLogger IoT settings via its USB-C interface.</p> <p>There are plenty of free alternatives out there to configure the DataLogger IoT. For the scope of this tutorial we will be using Tera Term.</p> <ul> <li>Tera Term (Windows)</li> <li>RealTerm (Windows)</li> <li>CoolTerm (Windows, Mac, Linux)</li> </ul> <p>If this is the your first time using a terminal window, We recommend checking out the tutorial below for more information on serial terminal basics.</p> Serial Terminal Basics <p>The above guides will show you how to open the correct port for the DataLogger IoT and how to set the baud rate to 115200 baud. You can change the DataLogger IoT's baud rate through the configuration menus too should you need to.</p> <p>Note</p> <p>For users with an Arduino IDE, you could also use the Arduino Serial Monitor by setting the line ending to Newline. Users will also need to CTRL + Enter when sending any character to the DataLogger IoT. However, we recommend using one of the terminals mentioned earlier.</p>"},{"location":"single_page/#initialization-and-serial-output","title":"Initialization and Serial Output","text":"<p>Connect the DataLogger IoT to a USB cable and connect to your computer. The addressable RGB LED will light up green as it initializes. When you open the serial terminal you should see the following output when the board initializes:</p> <p>The messages in the serial terminal provide us with a lot of the DataLogger's configuration:</p> <ul> <li>The DataLogger IoT software version (in this case is v01.00.00 - build 000072).</li> <li>As the DataLogger IoT is initializing, the system settings are being restored from the last saved preference.</li> <li>There no WiFi credentials and the board has failed to connect. This output will change once you provide the WiFi credentials and are able to connect to the network.</li> <li>There are 3x devices currently detected and they are connected through I<sup>2</sup>C through the Qwiic port and SPI. These are the on-board sensors for the DataLogger IoT. There may be more devices that are detected depending on the firmware and what is connected to the ports. Since these were recognized, they were loaded onto the DataLogger IoT.</li> <li>The current date and time is shown (by default), the date and time is set to 1-1-1970 and 00:00:00). This value will change depending on the clock source through NTP, RTC, or a u-blox GNSS module.</li> <li>The time the board has been running will be shown in the uptime.</li> <li>The primary external time source that the board syncs is currently through the NTP client. This can be configured depending on your clock source.</li> <li>The board name (in this case, it was SparkFun DataLogger IoT - 9DoF)</li> <li>The board ID (in this case it was SFD16C8F0D1AD6B8)</li> <li>The microSD card has been found, the type of memory card it is, the size of the memory card, how much memory is used, and how much is available.</li> <li>If there is a WiFi network name saved, the SSID will be shown along with information indicating whether the board was able to connect to the WiFi network. By default there is no SSID saved in memory.</li> <li>Parameters for low power mode will be provided indicating if deep sleep is enabled, sleep interval, and wake interval.</li> <li>Parameters for logging are also provided for the logging interval, the format for the serial output, format for the microSD card, current saved filename, and file rotation period.</li> <li>The board will also show the available IoT services that are enabled for the DataLogger IoT.</li> <li>The output will finish by telling you what devices are connected to the DataLogger IoT again.</li> </ul> <p>Once the DataLogger IoT has initialized, the DataLogger IoT will begin outputting comma separated values (CSV). This is the default output that is set for the DataLogger IoT - 9DoF. Of course, you will not have as many readings on the DataLogger IoT since the 6DoF IMU and magnetometer are not populated on that version of the board.</p> <p>Note</p> <p>Depending on your DataLogger IoT preferences, your device may output as a JSON format like the image shown below.   </p> <p>The data scrolling up the screen show what each device's output is along with their associated unit if it is available. Your milage will vary depending on the board version that you have and what device is connected</p> <ul> <li><code>MAX17048.Voltage (V)</code></li> <li><code>MAX17048.State of Charge (%)</code></li> <li><code>MAX17048.Charge Rate (%/hr)</code></li> <li><code>ISM330.Accel X (milli-g)</code></li> <li><code>ISM330.Accel Y (milli-g)</code></li> <li><code>ISM330.Accel Z (milli-g)</code></li> <li><code>ISM330.Gyro X (milli-dps)</code></li> <li><code>ISM330.Gyro Y (milli-dps)</code></li> <li><code>ISM330.Gyro Z (milli-dps)</code></li> <li><code>ISM330.Temperature (C)</code></li> <li><code>MMC5983.X Field (Gauss)</code></li> <li><code>MMC5983.Y Field (Gauss)</code></li> <li><code>MMC5983.Z Field (Gauss)</code></li> <li><code>MMC5983.Temperature (C)</code></li> </ul> <p>The output will vary depending on what is connected so you may get additional readings in the output and it may not be in the following order listed above. The logging rate defaults to about 0.067Hz (or 15000ms), so as the data scrolls past, you will see the last value settle at about 0.067Hz.</p>"},{"location":"single_page/#main-menu","title":"Main Menu","text":"<p>Right! Let's open the main menu by pressing on any key in the serial terminal program.</p> <p>You will be prompted with a few options. Once in the configuration menu, all three colors of the addressable RGB LED will turn on to mix to produce the color white indicating that you are navigating through the menu.</p>"},{"location":"single_page/#exiting-and-saving","title":"Exiting and Saving","text":"<p>When exiting the menu's, you will be prompted with either an x or b. You can use either one when exiting the menus as well as X or B. Note that you will need to use either of these keys when making a change in order for the DataLogger IoT to save any changes in memory. Make sure that you receive the following message indicating that the settings were saved: <code>[I] Saving System Settings</code>. The DataLogger IoT will the continue reading the devices and outputting the readings through the serial terminal.</p>"},{"location":"single_page/#cancelling-changes","title":"Cancelling Changes","text":"<p>You can also use any of your Esc or arrow keys (i.e. \u2191, \u2193, \u2190, \u2192) to exit. However, using the escape or arrow keys will not save any changes in memory once the reset button is hit or whenever power is cycled.</p>"},{"location":"single_page/#timeout-from-inactivity","title":"Timeout from Inactivity","text":"<p>The menus will slowly exit out after 2 minutes of inactivity, so if you do not press a key the DataLogger IoT will return to its previous menu. It will continue to move back until it reaches the main menu. After another additional 2 minutes of inactivity, the board will exit begin logging data again. When the menu exits from inactivity, any changes will not be saved in memory as well.</p>"},{"location":"single_page/#settings","title":"Settings","text":"<p>Let's start by configuring the DataLogger's system settings. Send a 1 through the serial terminal. You will have the option to adjust various settings ranging from the your preferences, time source to synchronize the date and time, WiFi network, how the device logs data, which IoT service to use, and firmware updates.</p> <p>Note</p> <p>You may notice after entering a 1 that there is a slight delay before the DataLogger IoT responds. The delay was added to allow some time for the DataLogger IoTto receive an additional digit for any option greater than 9. If you want to head to option 1 immediately without the slight delay, you can hit the Enter key to enter the Application Settings.</p> <p>We'll go over each of these options below.</p>"},{"location":"single_page/#general-application-settings","title":"General: Application Settings","text":"<p>In the Settings Menu, send a 1 to adjust the Application Settings. As of firmware v01.00.02, users can now adjust the baud rate of the serial console output and the menu system's timeout value.</p> <p>In the Application Settings Menu, users will be able to configure the addressable RGB's LED through software, menu timeout, microSD card's output format, serial console's output format, terminal's baud rate, deep sleep parameters, and view the current settings of the DataLogger IoT similar to when the board was initialized. Depending on your preference and how you are logging data, you can adjust the data as CSV or JSON.</p> <ul> <li>1 LED Enabled \u2014 Enable/Disable the on-board RGB LED activity<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>2 Menu Timeout \u2014 Inactivity timeout period for the menu system<ul> <li>Accepts the following values:<ul> <li>1 30 Seconds = 30</li> <li>2 60 Seconds = 60 (default)</li> <li>3 2 Minutes = 120</li> <li>4 5 Minutes = 300</li> <li>5 10 Minutes = 600</li> <li>b Back</li> </ul> </li> </ul> </li> <li>3 SD Card Format \u2014 Enable and set the output format<ul> <li>Accepts the following values:<ul> <li>1 to disable = 0</li> <li>2 CSV format (default) = 1</li> <li>3 JSON format = 2</li> </ul> </li> </ul> </li> <li>4 Serial Console Format \u2014 Enable and set the output format<ul> <li>Accepts the following values:<ul> <li>1 to disable = 0</li> <li>2 CSV format (default) = 1</li> <li>3 JSON format = 2</li> </ul> </li> </ul> </li> <li>5 Terminal Baud Rate \u2014 Update terminal baud rate. Changes take effect on restart.<ul> <li>Accepts an unsigned integer between 1200 to 50000:<ul> <li>115200 (default)</li> </ul> </li> </ul> </li> <li>6 Enable System Sleep \u2014 If enabled, sleep the system<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>7 Sleep Interval (sec) \u2014 The interval the system will sleep for<ul> <li>Accepts an integer between 5 to 86400 :<ul> <li>30 seconds (default)</li> </ul> </li> </ul> </li> <li>8 Wake Interval (sec) \u2014 The interval the system will operate between sleep period<ul> <li>Accepts an integer between 60 to 86400 :<ul> <li>120 seconds (default)</li> </ul> </li> </ul> </li> <li>9 About... \u2014 Details about the system</li> <li>b Back</li> </ul> <p>Note</p> <p>Once the baud rate is changed and saved, make sure to adjust the baud rate of your serial terminal when the board is reset. If you forgot the baud rate, you can hold the BOOT button down for 20 seconds to erase the on-board preferences (besides the baud rate, this also includes any other settings that were saved) and restart the board.</p> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"single_page/#general-save-settings","title":"General: Save Settings","text":"<p>In the Settings menu, send a 2 to adjust the Save Settings.</p> <p>In the Save Settings Menu, users will be able to save, restore, or clear any preferences in memory (i.e. persistent storage) or a saved file to a fallback device (i.e. microSD card). Note that any passwords and secret keys are not saved in the save settings file. You will need to manually enter those values in the file saved on the microSD card.</p> <ul> <li>1 Fallback Restore \u2014 If unable to restore settings, use the fallback source (JSON File)<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>2 Fallback Save \u2014 Save settings also saves on the fallback storage (JSON File)<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>3 Save Settings \u2014 Save current settings to persistent storage<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>4 Restore Settings \u2014 Restore saved settings<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>5 Clear Settings \u2014 Erase the saved settings on the device<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>6 Save to Fallback \u2014 Save System Settings to the fallback storage (JSON File)<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>7 Restore from Fallback \u2014 Restore system settings from the fallback storage (JSON File)<ul> <li>Accepts a yes/no:<ul> <li>Y or y for yes</li> <li>N or n for no</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>If you have the Fallback Save enabled or selected the option Save to Fallback, you will notice an additional file called datalogger.json saved in the microSD card. This is the fallback file that is saved. Using a text editor, you can edit this file to adjust the settings or provide WiFi credentials, certificates, and keys. You can use option 7 to restore the settings on your DataLogger IoT.</p> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"single_page/#general-time-sources","title":"General: Time Sources","text":"<p>Note</p> <p>Make sure to connect the ESP32-WROOM to a 2.4GHz WiFi network and ensure that is not a guest network that requires you to sign in. Unfortunately, 5GHz WiFi is not supported on the ESP32-WROOM module.</p> <p>In the Settings Menu, send 3 to manage the time reference sources.</p> <p>In this menu, you will have options to update the primary reference clock, update interval, add a secondary reference clock, and update it's interval. By default, the primary reference clock is set to use the Network Time Protocol (NTP). To synchronization the time, you will need to connect to a 2.4GHz WiFi network in order to update the time. To add a secondary clock, make sure to connect a compatible Qwiic-enabled devices that can keep track of time (i.e. Qwiic Real Time Clock Module - RV-8803 or a Qwiic-enabled u-blox GNSS module).</p> <ul> <li>1 Reference Clock \u2014 The current reference clock source<ul> <li>Accepts the following values:<ul> <li>1 for no clock</li> <li>2 for NTP Client (default)</li> </ul> </li> </ul> </li> <li>2 Update Interval \u2014 Main clock update interval in minutes. 0 = No update<ul> <li>Accepts an unsigned integer:<ul> <li>0 = No update</li> <li>60 seconds (default)</li> </ul> </li> </ul> </li> <li>3 Enable Clock Fallback \u2014 Use a valid reference clock if the primary is not available<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>4 Dependant Interval \u2014 Connected depedant clock update interval in minutes. 0 = No update<ul> <li>Accepts an unsigned integer:<ul> <li>0 = No update</li> <li>60 seconds (default)</li> </ul> </li> </ul> </li> <li>5 Update Connected \u2014 Update connected clocks on main clock update<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>Note</p> <p>As an alternative to using the NTP, users can also add a compatible Qwiic-enabled device that can keep track of time (i.e. Qwiic Real Time Clock Module - RV-8803 or a Qwiic-enabled u-blox GNSS module). These can be set as the primary or secondary clock.</p> <p> </p> <p>Once attached, you will be prompted with additional options to select a primary reference clock.</p> <p> </p> <p>If you are using a u-blox GNSS module, make sure that you have enough satellites in view. The option to add or configure the GNSS will not be available if there are not enough satellites in view. If you are using the Qwiic Real Time Clock Module - RV-8803, you may need to go into the device settings to manually adjust the date and time.</p> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"single_page/#network-wifi-network","title":"Network: WiFi Network","text":"<p>Note</p> <p>The ESP32-WROOM can only connect to a 2.4GHz WiFi network. Unfortunately, 5GHz is not supported on the ESP32-WROOM module.</p> <p>In the Settings Menu, send a 4 to configure the WiFi settings. As of firmware v01.00.02, up to 4 sets of WiFi credentials can be saved.</p> <p>Once you are in the WiFi Network menu, you can enable/disable WiFi and save the WiFi network credentials. Once connected to a 2.4GHz WiFi network, you can synchronize the date and time, connect to an IoT service to log data, and update the latest firmware over-the-air. Since the WiFi is turned on by default, you will simply need to save the WiFi network's name and password.</p> <ul> <li>1 Enabled \u2014 Enable or Disable the WiFi Network connection<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>2 Network Name \u2014 The SSID of the WiFi network<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_NETWORK_NAME</code>\", you would manually type MY_NETWORK_NAME. When finished hit the ENTER key</li> </ul> </li> </ul> </li> <li>3 Password \u2014 The Password to connect to the WiFi network<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_SUPER_SECRET_PASSWORD</code>\", you would manually type MY_SUPER_SECRET_PASSWORD. Note that as you type the password, each character will be replaced with an asterisk (<code>*</code>). When finished hit the ENTER key.</li> </ul> </li> </ul> </li> <li>4 Network 2 Name \u2014 Alternative network 2 SSID<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_NETWORK_NAME_2</code>\", you would manually type MY_NETWORK_NAME_2. When finished hit the ENTER key</li> </ul> </li> </ul> </li> <li>5 Network 2 Password \u2014 Alternative network 2 Password<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_SUPER_SECRET_PASSWORD_2</code>\", you would manually type MY_SUPER_SECRET_PASSWORD_2. Note that as you type the password, each character will be replaced with an asterisk (<code>*</code>). When finished hit the ENTER key.</li> </ul> </li> </ul> </li> <li>6 Network 3 Name \u2014 Alternative network 2 SSID<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_NETWORK_NAME_3</code>\", you would manually type MY_NETWORK_NAME_3. When finished hit the ENTER key</li> </ul> </li> </ul> </li> <li>7 Network 3 Password \u2014 Alternative network 3 Password<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_SUPER_SECRET_PASSWORD_3</code>\", you would manually type MY_SUPER_SECRET_PASSWORD_3. Note that as you type the password, each character will be replaced with an asterisk (<code>*</code>). When finished hit the ENTER key.</li> </ul> </li> </ul> </li> <li>8 Network 4 Name \u2014 Alternative network 2 SSID<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_NETWORK_NAME_4</code>\", you would manually type MY_NETWORK_NAME_4. When finished hit the ENTER key</li> </ul> </li> </ul> </li> <li>9 Network 4 Password \u2014 Alternative network 4 Password<ul> <li>Accepts a string:<ul> <li>For example, if my network name is \"<code>MY_SUPER_SECRET_PASSWORD_4</code>\", you would manually type MY_SUPER_SECRET_PASSWORD_4. Note that as you type the password, each character will be replaced with an asterisk (<code>*</code>). When finished hit the ENTER key.</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p> <p>Press the reset button or cycle power to restart the DataLogger IoT. You can also go through the menu and reset the device through software as well. Once the board is reset, the DataLogger will attempt to connect to a WiFi network. If you are successful, the output will indicate that the board connected to a WiFi network and will update the current time through a NTP Client.</p> <p>Note</p> <p>If you have a Qwiic Dynamic NFC/RFID Tag connected to the board's Qwiic connector, you can easily update your WiFi credentials! Just make sure to save the WiFi credentials to the tag.</p> <p>Note</p> <p>If you saved your preferences to a JSON file on your microSD card's root directory, you can also save your WiFi credentials and load the system settings from the menu as well!</p>"},{"location":"single_page/#network-ntp-client","title":"Network: NTP Client","text":"<p>In the Settings menu, send a 5 to adjust the NTP Client settings.</p> <p>In this menu, users will have the option to enable/disable the NTP client, select the primary/secondary server, or adjust the time zone for your area.</p> <ul> <li>1 Enabled \u2014 Enable or Disable the NTP Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable (default)</li> <li>0 to disable</li> </ul> </li> </ul> </li> <li>2 NTP Server One \u2014 The primary NTP Server to use<ul> <li>Accepts a string:<ul> <li>time.nist.gov (default)</li> </ul> </li> </ul> </li> <li>3 NTP Server Two \u2014  The secondary NTP Server to use<ul> <li>Accepts a string:<ul> <li>pool.ntp.org (default)</li> </ul> </li> </ul> </li> <li>4 The Time Zone \u2014 Time zone setting string for the device<ul> <li>Accepts a string:<ul> <li>MST7MDT,M3.2.0,M11.1.0 (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>Note</p> <p>To adjust the time zone, you will need to enter a POSIX timezone string variable. Try checking out this CSV in this GitHub repo and searching for the timezone string variable in your area. For more information about POSIX format specification check out this article from IBM.</p> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"single_page/#logging-logger","title":"Logging: Logger","text":"<p>In the Settings menu, send a 6 to adjust how data is logged.</p> <p>In the Logger menu, users will have the option to add a timestamp, increment sample numbering, data format, or reset the sample counter. Note that the timestamp is the system clock and syncs with the reference clock that was chosen. Data from the Qwiic-enabled devices that keep track of time can also be included for each data entry by default.</p> <ul> <li>1 Timestamp Mode \u2014 Enable timestamp output and set the format of a log entry timestamp<ul> <li>1 for no timestamp (default) = 0</li> <li>2 for milliseconds since program start = 1</li> <li>3 for seconds since Epoch = 2</li> <li>4 for Date Time - USA Date format = 3</li> <li>5 for Date Time = 4</li> <li>6 for ISO08601 Timestamp = 5</li> <li>7 for ISO08601 Timestamp with Time Zone = 6</li> </ul> </li> <li>2 Sample Numbering \u2014 An incremental count of the current log entry<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>3 Numbering Increment \u2014 Increment amount for Sample Numbering<ul> <li>Accepts an unsigned integer between 1 to 10000:<ul> <li>1 (default)</li> </ul> </li> </ul> </li> <li>4 SD Card Format \u2014 Enable and set the output format<ul> <li>Accepts an integer:<ul> <li>1 to disable  = 0</li> <li>2 CSV format  = 1 (default)</li> <li>3 JSON format = 2</li> </ul> </li> </ul> </li> <li>5 Serial Console Format \u2014 Enable and set the output format<ul> <li>Accepts an integer:<ul> <li>1 to disable  = 0</li> <li>2 CSV format  = 1 (default)</li> <li>3 JSON format = 2</li> </ul> </li> </ul> </li> <li>6 Reset Sample Counter \u2014 Reset the sample number counter to the provided value<ul> <li>Accepts an unsigned integer between 0 to 10000:<ul> <li>0 (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p> <p>Press the reset button or cycle power to restart the DataLogger IoT. You can also go through the menu and reset the device through software as well. Below is an example with the ISO08601 time that was added to the output.</p>"},{"location":"single_page/#logging-logging-timer","title":"Logging: Logging Timer","text":"<p>In the Settings menu, send an 7 to adjust the Logging Timer.</p> <p>Adjusting the interval for the Logging Timer will change the amount of time between log entries.</p> <ul> <li>1 Interval \u2014 The timer interval in milliseconds<ul> <li>Accepts an integer:<ul> <li>15000 milliseconds (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"single_page/#logging-data-file","title":"Logging: Data File","text":"<p>In the Settings menu, send an 8 to adjust the Logging Data File.</p> <p>Adjusting these parameters allows you to change the filename prefix, the number the files starts at, and how often the DataLogger will create a new file on the microSD card. For example, the default file will be saved as sfe0001.txt. After 1 day, the DataLogger will rotate files by creating a new file named sfe0002.txt. THe DataLogger will begin logging data in this new file. The purpose of this log rotation is to limit the size of each file prevent issues when opening large files.</p> <ul> <li>1 Rotate Period \u2014 Time between file rotation<ul> <li>Accepts the following values:<ul> <li>1 for 6 hours = 6</li> <li>2 for 12 hours  = 12</li> <li>3 for 1 day (24 hours)  = 24 (default)</li> <li>4 for 2 days (48 hours)  = 48</li> <li>5 for 1 week (168 hours)  = 168</li> </ul> </li> </ul> </li> <li>2 File Start Number \u2014 The number the filename rotation starts with<ul> <li>Accepts an unsigned integer:<ul> <li>1 (default)</li> </ul> </li> </ul> </li> <li>3 Filename Prefix \u2014 The prefix string for the generated filenames<ul> <li>Accepts a string:<ul> <li>sfe (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p> <p>The contents of the file will depend on how the data was saved (either CSV or JSON). Make sure that the SD Card format is enabled to either CSV or JSON with your desired device outputs turned on so that the DataLogger can save the readings.</p> <p>When removing the microSD card, make sure to remove your power source. Then insert into it into microSD card adapter or USB reader. When connecting the memory card to your computer, you can use a text editor to view the saved readings. In this case, a Windows operating system was viewing the file sfe0000.txt and it was only file available in the microSD card.</p>"},{"location":"single_page/#iot-services-mqtt-client","title":"IoT Services: MQTT Client","text":"<p>In the Settings menu, send an 9 to adjust settings for the MQTT Client.</p> <ul> <li>1 Enabled \u2014 Enable or Disable MQTT Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>1883 (default)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string</li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>b Back</li> </ul>"},{"location":"single_page/#iot-services-mqtt-secure-client","title":"IoT Services: MQTT Secure Client","text":"<p>In the Settings menu, send an 10 to adjust settings for the MQTT Secure Client.</p> <ul> <li>1 Enabled \u2014 Enable or Disable MQTT Secure Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>8883 (default, as of firmware v01.00.04)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string</li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>9 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>10 Client Cert Filename \u2014 The File to load the client certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Client Key Filename \u2014 The File to load the client key from<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"single_page/#iot-services-aws-iot","title":"IoT Services: AWS IoT","text":"<p>In the Settings menu, send an 11 to adjust settings for the AWS IoT.</p> <ul> <li>1 Enabled \u2014 Enable or Disable AWS IoT<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>8883 (default, as of firmware v01.00.04)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string<ul> <li>$aws/things//shadow/update (default)</li> </ul> </li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>9 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>10 Client Cert Filename \u2014 The File to load the client certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Client Key Filename \u2014 The File to load the client key from<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"single_page/#iot-services-thingspeak-mqtt","title":"IoT Services: ThingSpeak MQTT","text":"<p>In the Settings menu, send an 12 to adjust settings for ThingSpeak MQTT</p> <ul> <li>1 Enabled \u2014 Enable or Disable ThingSpeak MQTT<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>8883 (default, as of firmware v01.00.04)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string</li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>9 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>10 Client Cert Filename \u2014 The File to load the client certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Client Key Filename \u2014 The File to load the client key from<ul> <li>Accepts a string</li> </ul> </li> <li>12 Channels \u2014 Comma separated list of =<ul> <li>Accepts a string</li> </ul> <li>b Back</li>"},{"location":"single_page/#iot-services-azure-iot","title":"IoT Services: Azure IoT","text":"<p>In the Settings menu, send an 13 to adjust settings for the Azure IoT.</p> <ul> <li>1 Enabled \u2014 Enable or Disable Azure IoT<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 Port \u2014 The MQTT broker port to connect to<ul> <li>Accepts an unsigned integer:<ul> <li>8883 (default, as of firmware v01.00.04)</li> </ul> </li> </ul> </li> <li>3 Server \u2014 The MQTT server to connect to<ul> <li>Accepts a string</li> </ul> </li> <li>4 MQTT Topic \u2014 The MQTT  topic to publish to<ul> <li>Accepts a string</li> </ul> </li> <li>5 Client Name \u2014 Name of this device used for MQTT Communications<ul> <li>Accepts a string</li> </ul> </li> <li>6 Username \u2014 Username to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>7 Password \u2014 Password to connect to an MQTT broker, if required.<ul> <li>Accepts a string</li> </ul> </li> <li>8 Buffer Size \u2014 MQTT payload buffer size. If 0, the buffer size is dynamic<ul> <li>Accepts an unsigned int16:<ul> <li>0 for dynamic buffer size (default)</li> </ul> </li> </ul> </li> <li>9 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>10 Client Cert Filename \u2014 The File to load the client certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Client Key Filename \u2014 The File to load the client key from<ul> <li>Accepts a string</li> </ul> </li> <li>11 Device ID \u2014 The device id for the Azure IoT device<ul> <li>Accepts a string</li> </ul> </li> <li>12 Device Key \u2014 The device key for the Azure IoT device<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"single_page/#iot-services-http-iot","title":"IoT Services: HTTP IoT","text":"<p>In the Settings menu, send an 14 to adjust settings for the Azure IoT.</p> <ul> <li>1 Enabled \u2014 Enable or Disable the HTTP Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 URL \u2014 The URL to call with log information<ul> <li>Accepts a string</li> </ul> </li> <li>3 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"single_page/#iot-services-machinechat","title":"IoT Services: MachineChat","text":"<p>In the Settings menu, send an 15 to adjust settings for MachineChat.</p> <ul> <li>1 Enabled \u2014 Enable or Disable the HTTP Client<ul> <li>Accepts a boolean value:<ul> <li>1 to enable</li> <li>0 to disable (default)</li> </ul> </li> </ul> </li> <li>2 URL \u2014 The URL to call with log information<ul> <li>Accepts a string</li> </ul> </li> <li>3 CA Cert Filename \u2014 The File to load the certificate from<ul> <li>Accepts a string</li> </ul> </li> <li>b Back</li> </ul>"},{"location":"single_page/#advanced-system-update","title":"Advanced: System Update","text":"<p>New sensors and features are being added all the time and we've made it really easy for you to keep your DataLogger IoT up to date. The System Update option provides the following functionality to the end user:</p> <ul> <li>Restart the device</li> <li>Performing a Factory Reset on the device</li> <li>Updated the device firmware from a file on an SD Card.</li> </ul> <p>This functionality is accessed via the Settings Menu, which is required to use this capability. Type 16 to enter the System Update menu. Once this menu entry is selected, the following menu options are presented:</p> <ul> <li>1 Device Restart \u2014 Restart/reboot the device<ul> <li>Accepts the following values:<ul> <li>Y or Y to restart or reboot the device using the current firmware and system preferences</li> <li>N or n to cancel</li> </ul> </li> </ul> </li> <li>2 Factory Reset \u2014 Erase all settings and revert to original firmware<ul> <li>Accepts the following values:<ul> <li>Y or Y to factory reset the device</li> <li>N or n to cancel</li> </ul> </li> </ul> </li> <li>3 Update Firmware - SD Card \u2014 Update the firmware from the SD card<ul> <li>Accepts firmware in the /root directory of the microSD card with the file naming pattern SparkFunDataLoggerIoT*.bin, where the asterisk * is the firmware version number (i.e. SparkFunDataLoggerIoT_01.00.01.bin).</li> </ul> </li> <li>4 Update Firmware - OTA \u2014 Update the firmware over-the-air<ul> <li>Connects to a server and searches for the latest firmware that is available. Note that you must be connected to a WiFi network to be able to update the board over-the-air.</li> <li>Accepts the following values if there is new firmware available.<ul> <li>Y or Y to update over-the-air</li> <li>N or n to cancel</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p>"},{"location":"single_page/#device-settings","title":"Device Settings","text":"<p>In the Main Menu, send a 2 through the serial terminal to adjust the devices settings.</p> <p>This will bring up the connected devices that are currently available. You can configure each device and enable/disable each output. Below is a sample of the on-board devices available for the DataLogger IoT - 9DoF when only the MAX17048, ISM330, and MMC5983 are connected. As the DataLogger IoT - 9DoF initializes, the board will populate additional devices in this window if they are detected. Your mileage will vary depending on what is connected. On the DataLogger IoT you will not see the ISM330 or MMC5983  as an option since the 6DoF IMU and magnetometer are not populated on that version of the board.</p> <ul> <li>1 MAX17048 \u2014 MAX17048 LiPo Battery Fuel Gauge<ul> <li>1 Voltage (V) \u2014 Battery voltage (Volts)<ul> <li>1 to enable Voltage (V) (default)</li> <li>2 to disable Voltage (V)</li> </ul> </li> <li>2 State of Charge (%) \u2014 Battery state of charge (%)<ul> <li>1 to enable state of charge (%) (default)</li> <li>2 to disable state of charge  (%)</li> </ul> </li> <li>3 Charge Rate (%/hr) \u2014 Battery charge change rate (%/hr)<ul> <li>1 to enable change rate (%/hr) (default)</li> <li>2 to disable change rate (%/hr)</li> </ul> </li> </ul> </li> <li>2 ISM330 \u2014 ISM330 Inertial Measurement Unit<ul> <li>1 Accel Data Rate (HZ) \u2014 Accelerometer Data Rate (Hz)<ul> <li>1 for Off</li> <li>2 for 12.5 Hz</li> <li>3 for 26 Hz</li> <li>4 for 52 Hz</li> <li>5 for 104 Hz (default)</li> <li>6 for 208 Hz</li> <li>7 for 416 Hz</li> <li>8 for 833 Hz</li> <li>9 for 1666 Hz</li> <li>10 for 3332 Hz</li> <li>11 for 6667 Hz</li> <li>12 for 1.6 Hz</li> </ul> </li> <li>2 Accel Full Scale (g) \u2014 Accelerometer Full Scall (g)<ul> <li>1 for 2 g</li> <li>2 for 16 g</li> <li>3 for 4 g (default)</li> <li>4 for 8 g</li> </ul> </li> <li>3 Gyro Data Rate (Hz) \u2014 Gyro Data Rate (Hz)<ul> <li>1 for Off</li> <li>2 for 12.5 Hz</li> <li>3 for 26 Hz</li> <li>4 for 52 Hz</li> <li>5 for 104 Hz (default)</li> <li>6 for 208 Hz</li> <li>7 for 416 Hz</li> <li>8 for 833 Hz</li> <li>9 for 1666 Hz</li> <li>10 for 3332 Hz</li> <li>11 for 6667 Hz</li> </ul> </li> <li>4 Gyro Full Scale (dps) \u2014 Gyro Full Scale (dps)<ul> <li>1 for 125 dps</li> <li>2 for 250 dps</li> <li>3 for 500 dps (default)</li> <li>4 for 1000 dps</li> <li>5 for 2000 dps</li> <li>6 for 4000 dps</li> </ul> </li> <li>5 Accel Filter LP2 \u2014 Accelerometer Filter LP2<ul> <li>1 to enable (default)</li> <li>2 to disable</li> </ul> </li> <li>6 Gyro Filter LP1 \u2014 Gyro Filter LP1<ul> <li>1 to enable (default)</li> <li>2 to disable</li> </ul> </li> <li>7 Accel Slope Filter \u2014 Accelerometer Slope Filter<ul> <li>1 for ODR/4</li> <li>2 for ODR/10</li> <li>3 for for ODR/20</li> <li>4 for ODR/45</li> <li>5 for ODR/100 (default)</li> <li>6 for ODR/200</li> <li>7 for ODR/400</li> <li>8 for ODR/800</li> </ul> </li> <li>8 Gyro LP1 Filter Bandwidth \u2014  Gyro LP1 Filter Bandwidth<ul> <li>1 Ultra Light</li> <li>2 Very Light</li> <li>3 Light</li> <li>4 Medium (default)</li> <li>5 Strong</li> <li>6 Very Strong</li> <li>7 Aggressive</li> <li>8 Extreme</li> </ul> </li> <li>9 Accel X (milli-g) \u2014 Accelerometer X (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>10 Accel Y (milli-g) \u2014 Accelerometer Y (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>11 Accel Z (milli-g) \u2014 Accelerometer Z (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>12 Gyro X (milli-dps) \u2014 Gyro X (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>13 Gyro Y (milli-dps) \u2014 Gyro Y (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>14 Gyro Z (milli-dps) \u2014 Gyro Z (milli-g)<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>15 Temperature (C) \u2014 The temperature in degrees C<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> </ul> </li> <li>3 MMC5983 \u2014 MMC5983 Magnetometer<ul> <li>1 Filter Bandwidth (Hz) \u2014 The filter bandwidth in Hz<ul> <li>1 100 Hz (default)</li> <li>2 200 Hz</li> <li>3 400 Hz</li> <li>4 800 Hz</li> </ul> </li> <li>2 Auto-Reset \u2014 Auto-Reset<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>3 X Field (Gauss) \u2014 The X Field strength in Gauss<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>4 Y Field (Gauss) \u2014 The Y Field strength in Gauss<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>5 Z Field (Gauss) \u2014 The Z Field strength in Gauss<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> <li>6 Temperature (C) \u2014 The ambient temperature in degrees C<ul> <li>1 to enable</li> <li>2 to disable</li> </ul> </li> </ul> </li> <li>b Back</li> </ul> <p>When finished, you will need to exit the menus so that the DataLogger IoT saves the changes. Send a b to exit out this menu, b to exit out of the DataLogger IoT settings, and x to exit out of the main menu.</p> <p>Warning</p> <p>As you connect additional devices to the DataLogger IoT, the values associated with each device in this menu will change! Make sure to check your device settings menu after additional devices are attached should you decide to configure the additional devices and enable/disable their outputs.  </p>"},{"location":"single_page/#connecting-to-a-wifi-network","title":"Connecting to a WiFi Network","text":"<p>Note</p> <p>The ESP32-WROOM can only connect to a 2.4GHz WiFi network. Unfortunately, 5GHz is not supported on the ESP32-WROOM module.</p> <p>To take advantage of syncing the DataLogger to the Network Time Protocol (NTP), logging data to an IoT service, or updating firmware OTA, you will need to connect to a 2.4GHz WiFi network.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then send a 4 to configure the WiFi settings.</p> <p>Send a 2 to set the WiFi Network Name. You'll be prompted to set the network name. In this case, the network name is <code>sparkfun</code>. Once you enter the name, hit the enter key.</p> <p>Send a 2 to set the WiFi  password. You'll be prompted to set the password. As you send the password, each character will be masked by a asterisk (i.e. *) Once you enter the name, hit the enter key.</p> <p>Follow the prompts to exit out of the menu properly so that the DataLogger IoT saves the settings.</p> <p>Once you see the message <code>[I] Saving System Settings</code> and data on the output, hit the reset button on the board. You can also use the menu to perform a device restart, however you will need to ensure that you receive the message indicating that the settings were saved before restarting the device.</p> <p>Once the device has restarted, the DataLogger will provide an output as it is initializing. If the WiFi credentials are saved properly, you will receive a message indicating that your chosen network is connected to your WiFi network. If the time source is set to the default NTP client, you will also notice that the time will be synced to the latest date and time!</p>"},{"location":"single_page/#adding-a-timestamp-to-data","title":"Adding a Timestamp to Data","text":"<p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Then send a 6 to adjust how data is logged.</p> <p>Send a 1 to configure the timestamp for each log entry. The settings in this menu relate to the system clock and is dependent on the reference clock. You'll be prompted with different formats. In this example, we sent a a 4 to have a timestamp with the USA date format.</p> <p>Follow the prompts to exit out of the menu properly so that the DataLogger IoT saves the settings. Once you see the message <code>[I] Saving System Settings</code>, the DataLogger IoT will add a timestamp with your preferred format to each log entry. Assuming that you have the output set to the serial terminal, you should see the timestamp attached to the output after the system settings are saved like the image below.  </p>"},{"location":"single_page/#example-factory-reset","title":"Example - Factory Reset","text":"<p>A factory reset will move the boot firmware of the device to the firmware imaged installed at the factory and erase any on-board stored settings on the device. This is helpful if an update fails, or an update has issues that prevent proper operations.</p> <p>This option is available on ESP32 devices that contained a factory firmware partition that contains a bootable firmware image. Consult the specific product's production and build system for further details.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then type 16 to enter the System Update Menu. Finally, type 2 to enter the Factory Reset option.</p> <p>The user is presented a prompt to continue. To launch a factory reset, the value of Y should be entered. To abort the update, enter n or press the Esc key.</p> <p>When a Y is entered, the system performs the following:</p> <ul> <li>Set the boot image to the Factory installed firmware</li> <li>Erase any settings stored in the on-board flash memory</li> <li>Reboot the device</li> </ul>"},{"location":"single_page/#example-updating-firmware","title":"Example - Updating Firmware","text":"<p>Danger</p> <p>Please think very carefully before uploading any Arduino sketches to your DataLogger IoT.</p> <p>You will overwrite the DataLogger IoT firmware, leaving it unable to update or restore itself.</p> <p>Each DataLogger IoT comes pre-programmed with amazing firmware which can do so much. It is designed to be able to update itself and restore itself if necessary. But it can not do that if you overwrite the firmware with any Arduino sketch. It is just like erasing the restore partition on your computer hard drive. Do not do it - unless you really know what you are doing.</p> <p>Really. We mean it.</p>"},{"location":"single_page/#firmware-update-sd-card","title":"Firmware Update - SD Card","text":"<p>This action enables the ability to update the onboard firmware to an image file contained an SD card. This user is presented a list of available firmware images files contained in root directory of the on-board SD card, and updates the board to the selected file.</p> <p>This option is available on ESP32 devices that contained two update firmware (OTA type) partitions within the on-board device flash memory. Consult the specific products production and build system for further details.</p> <p>To download the latest firmware and update through the microSD card, you will need to head to the GitHub repository containing the firmware. Select the firmware version and download.</p> GitHub: SparkFun DataLogger | Firmware Releases <p>Once downloaded, insert the microSD card into a card reader or USB adapter. Then move the files into the memory card's root directory. Below shows an image of v01.00.01 and v01.00.02 on a Windows OS.</p> <p>Once the files are copied to the memory card, eject the microSD card from your computer. Insert the card back into the DataLogger IoT's microSD card socket. Connect the DataLogger IoT to your computer using a USB cable.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then type 16 to enter the System Update Menu. Finally, type 3 to update the firmware from the microSD card. You should see an image similar to the output below.</p> <p>The system will search the root directory of the on-board SD card for available firmware files. The firmware files are selected using the following criteria:</p> <ul> <li>The file is contained in the root \"/\" folder of the SD card.</li> <li>The filename has a \".bin\" extension.</li> <li>The filename starts with a specified name prefix. The prefix is optional and is set by the developers at SparkFun using this action.<ul> <li>For example, the DataLogger IoT boards use a prefix value of \"SparkFun_DataLoggerIoT_\".</li> </ul> </li> </ul> <p>Once a file is selected, the system new firmware is read off the SD card and written to the device.</p> <p>And once updated, the system is rebooted and starts using the new firmware image!</p>"},{"location":"single_page/#firmware-update-over-the-air-ota","title":"Firmware Update - Over-the-Air (OTA)","text":"<p>This action enables the ability to update the onboard firmware to an image file contained on an update server, which is accessed via the WiFi network the system is connected to. This Over-The-Air (OTA) capability contacts the systems update server and searches for newer firmware (later version) for the specific board.</p> <p>This option is available on ESP32 devices that contained two update firmware (OTA type) partitions within the on-board device flash memory. Consult the specific products production and build system for further details.</p> <p>If you have not already, connect the DataLogger IoT to your computer using a USB cable.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then type 16 to enter the System Update Menu. Finally, type 4 to update the firmware over-the-air.</p> <p>When this option is selected, the system will contact the update server and search for available upgrade firmware, selecting the latest version available. If a newer version is found, a prompt is presented to confirm the upgrade.</p> <p>Note</p> <p>For the upgrade option to occur, a the system must be connected to a network and have access to the firmware OTA server.</p> <p>Typing Y (or hitting enter) starts the update operation. As the firmware is downloaded, the percent complete status is updated. If connectivity fails during the download, the operation is halted and the update aborted.</p> <p>Once the update file is downloaded, it is verified as being the correct file. Once verified, the system is rebooted and starts using the new firmware image! You will notice the firmware version change as the DataLogger IoT initializes.</p>"},{"location":"single_page/#example-mqtt","title":"Example - MQTT","text":""},{"location":"single_page/#connecting-and-publishing-data-to-mqtt","title":"Connecting and Publishing Data to MQTT","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers and servers. This document outlines how output from a DataLogger device is sent to an MQTT Broker.</p> Image Courtesy of MQTT <p>The following is covered by this document:</p> <ul> <li>Overview of the MQTT connection</li> <li>How a user configures and uses the MQTT connection</li> <li>MQTT examples</li> </ul>"},{"location":"single_page/#general-operation","title":"General Operation","text":"<p>MQTT connectivity allows data generated by the DataLogger IoT to be published to an MQTT Broker under a user configured topic. MQTT is an extremely flexible and low overhead data protocol that is widely used in the IoT field.</p> <p>The general use pattern for MQTT is that data is published to a topic on a MQTT broker. The data is then sent to any MQTT client that has subscribed to the specified topic.</p> <p>The DataLogger IoT supports MQTT connections, allowing an end user to enter the parameters for the particular MQTT Broker for the application to publish data to. When the application outputs data to the broker, the DataLogger IoT publishes the available information to the specified \"topic\" with the payload that is a JSON document.</p>"},{"location":"single_page/#data-structure","title":"Data Structure","text":"<p>Data is published to the MQTT broker as a JSON object, which contains a collection of sub-objects. Each sub-object represents a data source in the sensor, and contains the current readings from that source.</p> <p>The following is an example of the data posted - note, this representation was \"pretty printed\" for readability.</p> <pre><code>{\n\"MAX17048\": {\n\"Voltage (V)\": 4.304999828,\n\"State Of Charge (%)\": 115.0625,\n\"Change Rate (%/hr)\": 0\n},\n\"CCS811\": {\n\"CO2\": 620,\n\"VOC\": 33\n},\n\"BME280\": {\n\"Humidity\": 25.03613281,\n\"TemperatureF\": 79.64599609,\n\"TemperatureC\": 26.46999931,\n\"Pressure\": 85280.23438,\n\"AltitudeM\": 1430.44104,\n\"AltitudeF\": 4693.04834\n},\n\"ISM330\": {\n\"Accel X (milli-g)\": -53.31399918,\n\"Accel Y (milli-g)\": -34.03800201,\n\"Accel Z (milli-g)\": 1017.236023,\n\"Gyro X (milli-dps)\": 542.5,\n\"Gyro Y (milli-dps)\": -1120,\n\"Gyro Z (milli-dps)\": 262.5,\n\"Temperature (C)\": 26\n},\n\"MMC5983\": {\n\"X Field (Gauss)\": -0.200622559,\n\"Y Field (Gauss)\": 0.076416016,\n\"Z Field (Gauss)\": 0.447570801,\n\"Temperature (C)\": 29\n}\n}\n</code></pre>"},{"location":"single_page/#mqtt-broker-connection-setup","title":"MQTT Broker Connection Setup","text":"<p>To connect to a MQTT Broker, the following information is needed:</p> <ul> <li>The server name/address</li> <li>The server port</li> <li>The topic to post to</li> <li>[optional] The name of the device/Client name publishing the data</li> <li>[optional] A username - if required</li> <li>[optional] A password - if required</li> </ul> <p>These values are set using the standard DataLogger methods - the interactive menu system, or a JSON file.</p>"},{"location":"single_page/#mqtt-menu-system","title":"MQTT Menu System","text":"<p>We'll need to adjust the settings for the MQTT Client using the MQTT Menu System.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13.  Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then type 9 to enter the MQTT Client Menu. When the menu system for the MQTT connection is presented, the following options are displayed:</p> <p>The options are:</p> <ul> <li>Enable/Disable the connection</li> <li>Broker Port - The standard port for mqtt is 1883</li> <li>Broker Server - This is just the name of the server</li> <li>MQTT Topic - A string</li> <li>Client Name</li> <li>Username</li> <li>Password</li> <li>Buffer Size</li> </ul> <p>At a minimum, the Broker Port, Broker Server Name, and MQTT Topic need to be set. What parameters are required depends on the settings of the broker being used.</p> <p>Note</p> <p>If a secure connection is being used with the MQTT broker, use the <code>MQTT Secure Client</code> option of the DataLogger IoT. This option supports secure connectivity.</p> <p>Note</p> <p>The <code>Buffer Size</code> option is dynamic by default, adapting to the size of the payload being sent. If runtime memory is a concern, set this value to a static size that supports the device operation.</p> <p>Once all these values are set, the system will publish data to the specified MQTT Broker, following the JSON information structure noted earlier in this document.</p>"},{"location":"single_page/#json-file-entries","title":"JSON File Entries","text":"<p>If a JSON file is being used as an option to import settings into the DataLogger IoT, the following entries are used for the MQTT IoT connection:</p> <pre><code>\"MQTT Client\": {\n\"Enabled\": false,\n\"Port\": 1883,\n\"Server\": \"my-mqttserver.com\",\n\"MQTT Topic\": \"/sparkfun/datalogger1\",\n\"Client Name\": \"mysensor system\",\n\"Buffer Size\": 0,\n\"Username\": \"\",\n\"Password\": \"\"\n},\n</code></pre> <p>Where:</p> <ul> <li><code>Enabled</code> - Set to <code>true</code> to enable the connection.</li> <li><code>Port</code> - Set to the broker port.</li> <li><code>Server</code> - The MQTT broker server.</li> <li><code>MQTT Topic</code> - The topic to publish to.</li> <li><code>Client Name</code> - Optional client name.</li> <li><code>Buffer Size</code> - Internal transfer buffer size.</li> <li><code>Username</code> - Broker user name if being used.</li> <li><code>Password</code> - Broker password if being used.</li> </ul>"},{"location":"single_page/#testing-the-mqtt-connection","title":"Testing the MQTT Connection","text":"<p>Use of a MQTT connection is fairly straightforward - just requiring the entry of broker details into the connection settings.</p> <p>To test the connection, you need a MQTT broker available. A quick method to setup a broker is by installing the <code>mosquitto</code> package on a Raspberry Pi computer. Our basic MQTT Tutorial provides some basic setup for a broker.</p> Introduction to MQTT <p>This MQTT Broker Tutorial has more details, covering the setup needed for modern mosquitto configurations.</p> Random Nerd Tutorials: Install Mosquitto Broker on Raspberry Pi <p>And once the broker is setup, the messages published by the IoT sensor are visible using the <code>mosquitto_sub</code> command as outlined. For example, to view messages posted to a the topic \"/sparkfun/datalogger1\", the following command is used:</p> <pre><code>mosquitto_sub -t \"/sparkfun/datalogger1\"\n</code></pre> <p>This assumes the MQTT broker is running on the same machine, and using the default port number.</p>"},{"location":"single_page/#example-aws","title":"Example - AWS","text":""},{"location":"single_page/#creating-and-connecting-to-an-aws-iot-device-thing","title":"Creating and Connecting to an AWS IoT Device (Thing)","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers. This document outlines how an AWS IoT device is used by the DataLogger IoT.</p> Image Courtesy of Amazon Web Services (AWS) <p>The following is covered by this document:</p> <ul> <li>Device (Thing) creation in AWS</li> <li>Securely connecting the device</li> <li>How data is posted from the DataLogger IoT to the AWS Device via it's Shadow</li> </ul> <p>Currently, the AWS IoT device connection is a single direction - used to post data from the hardware to the IoT AWS Device via the AWS IoT devices shadow. Configuration information from AWS IoT to the DataLogger IoT is currently not implemented.</p>"},{"location":"single_page/#general-operation_1","title":"General Operation","text":"<p>AWS IoT enables connectivity between an IoT / Edge device and the AWS Cloud Platform, implementing secure endpoints and device models within the AWs infrastructure. This infrastructure allows edge devices to post updates, status and state to the AWS infrastructure for analytics, monitoring and reporting.</p> <p>In AWS IoT, an virtual representation of an actual device is created and referred to as a Thing. The virtual device/Thing is allocated a connection endpoint, security certificates and a device shadow - a JSON document used to persist, communicate and manage device state within AWS.</p> <p>The actual IoT device communicates with it's AWS representation via a secure MQTT connection, posting JSON document payloads to a set of pre-defined topics. Updates are posted to the AWS IoT device shadow, which is then accessed within AWS for further process as defined by the users particular cloud implementation.</p>"},{"location":"single_page/#creating-a-device-in-aws-iot","title":"Creating a Device in AWS IoT","text":"<p>The following discussion outlines the basic steps taken to create a Thing in AWS IoT that the DataLogger IoT can connect to. First step is to log into your AWS account and create a thing.</p> Click Here to Log into AWS <p>Once logged into your AWS account, select IoT Core from the menu of services.</p> <p>From the IoT Core console page, under the Manage section, select All Devices &gt; Things </p> <p>On the resultant Things Page, select the Create Things button.</p> <p>AWS IoT will then take you through the steps to create a device. Selections made for a demo Thing are:</p> <ul> <li>Create single thing</li> <li>Thing Properties</li> <li>Enter a name for your thing - for this example TestThing23</li> <li>Device Shadow - select Unnamed shadow (classic)</li> <li>Auto-generate a new certificate</li> <li>Attach policies to certificate - This is discussed later in this document</li> <li>Select Create thing</li> </ul> <p>Upon creation, AWS IoT presents you with a list of downloadable certificates and keys. Some of these are only available at this step. The best option is to download everything presented - three of these are used by the DataLogger IoT. The following should be downloaded:</p> <ul> <li>Device Certificate</li> <li>Public Key File</li> <li>Private Key File</li> <li>Root CA certificates - (for example:  Amazon Root CA 1 )</li> </ul> <p>At this point, the new AWS IoT thing is created and listed on the AWS IoT Things Console</p>"},{"location":"single_page/#security-policy","title":"Security Policy","text":"<p>To write to the IoT device, a security policy that enables this is needed, and the policy needs to be assigned to the devices certificate.</p> <p>To create a Policy, select the Manage &gt; Security &gt; Policies menu item from the left side menu of the AWS IoT panel. Once on this page, select the Create policy button to create a new policy.</p> <p>When entering the policy, provide a name that fits your need. For this example, the name NewThing23Policy is used. For the Policy document, you can manually enter the security entires, or enter them as a JSON document. The JSON document used for this example is:</p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:Connect\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:Subscribe\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:Receive\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:Publish\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:GetThingShadow\",\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"iot:UpdateThingShadow\",\n\"Resource\": \"*\"\n}\n]\n}\n</code></pre> <p>Once the policy is created, go back to the IoT Device/Thing created above and associate this policy to the device Certificate.</p> <ul> <li>Go to your device Manage &gt; All devices &gt; Things</li> <li>Select the device - TestThing23 for this example</li> <li>Select the Certificates tab</li> <li>Select the listed Certificate (it's a very long hex number)</li> <li>At the bottom right of the page, select the Attach policies button and select the Policy created above.</li> </ul> <p>At this point, AWS IoT is ready for a device to connect and receive data.</p>"},{"location":"single_page/#aws-configuration","title":"AWS Configuration","text":"<p>The specifics for the AWS IoT Thing must be configured. This includes the following:</p> <ul> <li>Server name/host</li> <li>MQTT topic to update</li> <li>Client Name - The AWS IoT Thing Name</li> <li>CA Certificate Chain</li> <li>Client Certificate</li> <li>Client Key</li> </ul>"},{"location":"single_page/#server-namehostname","title":"Server Name/Hostname","text":"<p>This value is obtained from the AWS IoT Device page for the created device. When on this page, select the Device Shadows tab, and then select the Classic Shadow shadow, which is listed. Note a secure connection is used, so the port for the connection is <code>8883</code>.</p> <p>Selecting the Classic Shadow entry provides the Server Name/Hostname for the device, as well as the MQTT topic for this device.</p> <p>Note: The server name is obtained from the Device Shadow URL entry</p>"},{"location":"single_page/#mqtt-topic","title":"MQTT Topic","text":"<p>The MQTT topic value is based uses the MQTT topic prefix from above, and has the value update added to it. So for this example, the MQTT topic is:</p> <p><code>$aws/things/TestThing23/shadow/update</code></p>"},{"location":"single_page/#client-name","title":"Client Name","text":"<p>This is the AWS IoT name of the thing. For the provided example, the value is TestThing23</p>"},{"location":"single_page/#ca-certificate-chain","title":"CA Certificate Chain","text":"<p>This value was downloaded as a file during the creation process. The contents of this file can be passed on to the DataLogger IoT by copying the file containing the data onto a devices SD Card and setting the filename property for the DataLogger IoT.</p>"},{"location":"single_page/#client-certificate","title":"Client Certificate","text":"<p>This value was downloaded as a file during the creation process. The contents of this file can be passed on to the DataLogger IoT by copying the file containing the data onto a devices SD Card and setting the filename property for the DataLogger IoT.</p>"},{"location":"single_page/#client-key","title":"Client Key","text":"<p>This value was downloaded as a file during the creation process. The contents of this file can be passed on to the DataLogger IoT by copying the file containing the data onto a devices SD Card and setting the filename property for the DataLogger IoT.</p>"},{"location":"single_page/#setting-properties","title":"Setting Properties","text":"<p>The above property values must be set on the DataLogger before use. They can be passed on via a JSON file that is loaded by the system at startup. Of course, you can also manually set the values using the menu system like the previous MQTT example.</p> <p>For the DataLogger IoT example outlined in this document, the entries in the settings JSON file are as follows:</p> <pre><code>\"AWS IoT\": {\n\"Enabled\": true,\n\"Port\": 8883,\n\"Server\": \"avgpd2wdr5s6u-ats.iot.us-east-1.amazonaws.com\",\n\"MQTT Topic\": \"$aws/things/TestThing23/shadow/update\",\n\"Client Name\": \"TestThing23\",\n\"Buffer Size\": 0,\n\"Username\": \"\",\n\"Password\": \"\",\n\"CA Certificate\": \"\",\n\"Client Certificate\": \"\",\n\"Client Key\": \"\",\n\"CA Cert Filename\": \"AmazonRootCA1.pem\",\n\"Client Cert Filename\": \"TestThing23_DevCert.crt\",\n\"Client Key Filename\": \"TestThing23_Private.key\"\n},\n</code></pre> <p>Besides updating the <code>Server</code>, <code>MQTT Topic</code>, <code>Client Name</code>, <code>CA Cert Filename</code>, <code>Client Cert Filename</code>, and <code>Client Key Filename</code>, you will need to also ensure that the <code>port</code> is set to <code>8883</code>. The default in previous firmware versions was <code>1883</code>. As of firmware v01.00.04, the default is <code>8883</code>. You will need to adjust the port value to properly connect to the AWS IoT service. Don't forget to enable AWS IoT service by setting the value to <code>true</code>.</p> <p>If the JSON file is saved in the microSD card, you will need to load the credentials to the DataLogger IoT. Of course, you can manually update the values through the command line as well to save the credentials to the ESP32's persistent memory.</p>"},{"location":"single_page/#operation","title":"Operation","text":"<p>Once the device is configured and running, updates in AWS IoT are listed in the Activity tab of the devices page. For the test device in this document, this page looks like:</p> <p>Opening up an update, you can see the data being set to AWS IoT in a JSON format.</p>"},{"location":"single_page/#example-thingspeak","title":"Example - ThingSpeak","text":""},{"location":"single_page/#creating-and-connecting-to-thingspeak","title":"Creating and Connecting to ThingSpeak","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers. This document outlines how a ThinkSpeak output is used by the DataLogger IoT.</p> Image Courtesy of ThingSpeak <p>The following is covered by this document:</p> <ul> <li>Creating a ThingSpeak Channel and MQTT Connection</li> <li>Securely connecting the ThingSpeak</li> <li>How data is posted from the DataLogger IoT to ThingSpeak</li> </ul>"},{"location":"single_page/#general-operation_2","title":"General Operation","text":""},{"location":"single_page/#thingspeak-structure","title":"ThingSpeak Structure","text":"<p>The structure of ThingSpeak is based off of the concept of Channels, with each channel supporting up to eight fields for data specific to the data source. Each channel is named, and has a unique ID associated with it.  One what to think of it is that a Channel is a grouping of associated data values or fields.</p> <p>The fields of a channel are enumerated as Field1, Field2, ..., Field8, but each field can be named to simplify data access and understanding.</p> <p>As data is reported to a ThingSpeak channel, the field values are accessible for further processing or visualization output.</p>"},{"location":"single_page/#data-structure_1","title":"Data Structure","text":"<p>The DataLogger IoT is constructed around the concept of Devices which are often a type of sensor that can output a set of data values per observation or sample.</p>"},{"location":"single_page/#mapping-data-to-thingspeak","title":"Mapping Data to ThingSpeak","text":"<p>The concept of Channels that contain Fields in ThingSpeak is similar to the Devices that contain Data within the DataLogger IoT, and this similarity is the mapping model used by the DataLogger IoT. Specifically:</p> <ul> <li>Devices == Channels</li> <li>Data == Fields</li> </ul> <p>During configuration of the DataLogger IoT, the mapping between the Device and ThingSpeak channel is specified. The data to field mapping is automatically created by the DataLogger IoT following the data reporting order from the specific device driver.</p>"},{"location":"single_page/#creating-a-device-to-a-thingspeak-channel","title":"Creating a Device to a ThingSpeak Channel","text":"<p>The following discussion outlines the basic steps taken to create a Channel in ThingSpeak and then connect it to the DataLogger's Device. First step is to log into your ThingSpeak and create a Channel.</p> Click Here to Log into ThingSpeak <p>Once logged into your ThingSpeak account, select Channels &gt; My Channels menu item and on the My Channel page, select the New Channel button.</p> <p>On the presented channel page, name the channel and fill in the specific channel fields. The fields should map to the data fields reported from the Device being linked to this channel. Order is important, and is determined by looking at output of a device to the serial device (or reviewing the device driver code).</p> <p>Once the values are entered, select save. ThingSpeak will now show list of Channel Stats, made up of line plots for each field specified for the channel.</p> <p>Note</p> <p>Key note - at the top of this page is listed the Channel ID. Note this number - it is used to map a Device to a ThingSpeak Channel.</p>"},{"location":"single_page/#setting-up-thingspeak-mqtt","title":"Setting Up ThingSpeak MQTT","text":"<p>The DataLogger IoT uses MQTT to post data to a channel. From the ThingSpeak menu, select Devices &gt; MQTT, which displays a list of your MQTT devices. From this page, select the Add a new device button.</p> <p>On the presented dialog, enter a name for the MQTT connection and in the Authorize channels to access, select the channel created earlier. Once you select a channel, click the Add Channel button.</p> <p>Note</p> <p>More channels can be added later.</p> <p>Note</p> <p>When the MQTT device is created, a set of credentials (Client ID, Username, and Password) is provided. Copy or download these values, since the password in not accessible after this step.</p> <p>The selected Channel is then listed in the Authorized Channel table. Ensure that the Allow Publish and Allow Subscribe attributes are enabled for the added channel.</p> <p>At this point, the ThingSpeak Channel is setup for access by the DataLogger IoT.</p>"},{"location":"single_page/#thingspeak-configuration","title":"ThingSpeak Configuration","text":"<p>Once the device is integrated into the application, the specifics for the ThingSpeak Channel(s) must be configured. This includes the following:</p> <ul> <li>Server Name/Hostname</li> <li>Client Name</li> <li>User Name</li> <li>Password</li> <li>Device to Channel mapping</li> <li>CA Certificate Chain</li> </ul>"},{"location":"single_page/#server-namehostname_1","title":"Server Name/Hostname","text":"<p>This value is hostname of the ThingSpeak mqtt connection, which is mqtt3.thingspeak.com as note at ThingSpeakMQTT Basics page. Note a secure connection is used, so the port for the connection is <code>8883</code>.</p>"},{"location":"single_page/#client-nameid","title":"Client Name/ID","text":"<p>The Client Name/ID is found under MQTT connection details listed in the Devices &gt; MQTT section of ThingSpeak.</p>"},{"location":"single_page/#username","title":"Username","text":"<p>The Username is found under MQTT connection details listed in the Devices &gt; MQTT section of ThingSpeak.</p>"},{"location":"single_page/#password","title":"Password","text":"<p>The connection password was provided when the MQTT device was created. If you lost this value, you can regenerate a password on the MQTT Device information page.</p>"},{"location":"single_page/#certificate-file","title":"Certificate File","text":"<p>You can download the cert file for ThingSpeak.com page using a web-browser. Click on the security details of this page, and navigate the dialog (browser dependent) to download the certificate. The downloaded file is the made available for the DataLogger IoT to use as a file that is loaded at runtime)</p>"},{"location":"single_page/#setting-properties_1","title":"Setting Properties","text":"<p>The above property values must be set on the DataLogger IoT before use. They can be set via a JSON file that is loaded by the system at startup. Of course, you can also manually set the values using the menu system like the previous MQTT example.</p> <p>For the ThingSpeak example outlined in this document, the entries in the settings JSON file are as follows:</p> <pre><code>\"ThingSpeak MQTT\": {\n\"Enabled\": true,\n\"Port\": 8883,\n\"Server\": \"mqtt3.thingspeak.com\",\n\"MQTT Topic\": \"\",\n\"Client Name\": \"MQTT Device Client ID\",\n\"Buffer Size\": 0,\n\"Username\": \"MQTT Device Username\",\n\"Password\": \"MQTT Device Password\",\n\"CA Cert Filename\": \"ThingspeakCA.cer\",\n\"Channels\" : \"BME280=&lt;channel id&gt;\"\n}\n</code></pre> <p>Note</p> <p>The Channels value is a list of [DEVICE NAME]=[Channel ID] pairs. Each pair is separated by a comma.</p> <p>Besides updating the <code>Server</code>, <code>Client Name</code>, <code>Username</code>, <code>Password</code>, <code>CA Cert Filename</code>, and <code>Channels</code>, you will need to also ensure that the <code>port</code> is set to <code>8883</code>. The default in previous firmware versions was <code>1883</code>. As of firmware v01.00.04, the default is <code>8883</code>. You will need to adjust the port value to properly connect to the ThingSpeak service.</p> <p>If the JSON file is saved in the microSD card, you will need to load the credentials to the DataLogger IoT. Of course, you can manually update the values through the command line as well to save the credentials to the ESP32's persistent memory.</p>"},{"location":"single_page/#monitoring-output","title":"Monitoring Output","text":"<p>Once the connector is configured and the DataLogger IoT is connected to ThingSpeak, as data is posted, the results are show on the Channel Stats page for your Channel. For the above example, the output of a SparkFun BME280 sensor produces the following output:</p>"},{"location":"single_page/#example-azure","title":"Example - Azure","text":""},{"location":"single_page/#creating-and-connecting-to-an-azure-iot-device","title":"Creating and Connecting to an Azure IoT Device","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers. This document outlines how an Azure IoT device is used by the DataLogger IoT.</p> Image Courtesy of Microsoft Azure <p>The following is covered by this document:</p> <ul> <li>Device creation Azure</li> <li>Securely connecting the device</li> <li>How data is posted from the DataLogger IoT to the Azure Device</li> </ul> <p>Currently, the Azure IoT device connection is a single direction - it is used to post data from the hardware to the Azure IoT Device. Configuration information from Azure IoT to the DataLogger IoT is currently not implemented.</p>"},{"location":"single_page/#general-operation_3","title":"General Operation","text":"<p>Azure IoT enables connectivity between an IoT / Edge device and the Azure Cloud Platform, implementing secure endpoints and device models within the Azure infrastructure. This infrastructure allows edge devices to post updates, status and state to the Azure infrastructure for analytics, monitoring and reporting.</p> <p>In Azure IoT, an virtual representation of an actual device is created and referred to as a Device. The virtual device is allocated a connection endpoint, security certificates and a device digital twin - a JSON document used to persist, communicate and manage device state within Azure. Unlike AWS IoT, data from the device isn't posted to the devices digital twin (AWS Shadow), but to the device directly.</p> <p>The actual IoT device communicates with it's Azure representation via a secure MQTT connection, posting JSON document payloads to a set of pre-defined topics. Updates are posted directly to the Azure device, which is then accessed within Azure for further process as defined by the users particular cloud implementation.</p>"},{"location":"single_page/#creating-a-device-in-azure-iot","title":"Creating a Device in Azure IoT","text":"<p>The following discussion outlines the basic steps taken to create a Device in Azure IoT that the DataLogger IoT can connect to. First step is to log into your Azure account and create an IoT Hub for your device.</p> Click Here to Log into Microsoft Azure <p>Once logged into your Microsoft Azure account, select Internet of Things &gt; IoT Hub from the menu of services.</p>"},{"location":"single_page/#create-an-iot-hub","title":"Create an IoT Hub","text":"<p>This IoT Hub page lists all the IoT hubs available for your account. To add a device, you need to create a new IoT Hub.</p> <p>Follow the Hub Creation workflow - key settings used for a DataLogger demo device:</p> <ul> <li>Used the \"Free Tier\" for testing and development.</li> <li>Networking<ul> <li>Connectivity - Public Access</li> <li>Minimum TLS Version - 1.0</li> </ul> </li> </ul> <p>The remaining settings were set at their default values.</p>"},{"location":"single_page/#create-a-device","title":"Create a Device","text":"<p>Once the IoT Hub is created, a Device needs to be created within the hub. The device represents the connection to the actual DataLogger IoT device.</p> <p>To create a device, select the Device management &gt; Devices from the IoT Hub menu and the select the + Add Device menu item</p> <p>In the create device dialog:</p> <ul> <li>Enter a name for the device</li> <li>Select an Authentication type of Symmetric key</li> <li>Auto-generate keys enabled</li> </ul> <p>Once created, the device is listed in the Devices list of the IoT Hub. Selecting the device gives you the device ID and keys used to communicate with the device. Note, when connecting to the device with the DataLogger IoT, the Primary Key value is used.</p>"},{"location":"single_page/#azure-configuration","title":"Azure Configuration","text":"<p>Once the DataLogger IoT is integrated into the application, the specifics for the Azure IoT Thing must be configured. This includes the following:</p> <ul> <li>Server Name/Hostname</li> <li>Device Key</li> <li>Device ID</li> <li>CA Certificate Chain</li> </ul>"},{"location":"single_page/#server-namehostname_2","title":"Server Name/Hostname","text":"<p>This value is hostname of the created IoT Hub and is obtained from the Overview page of the IoT Hub. Note a secure connection is used, so the port for the connection is <code>8883</code>.</p>"},{"location":"single_page/#device-id","title":"Device ID","text":"<p>The Device ID is obtained from the device detail page. This page is accessible via the Device listing page, which is accessed via the Device management &gt; Devices menu item. The selected device of interest (TestDevice2023 for this example) provides the device ID and Primary Key.</p>"},{"location":"single_page/#device-primary-key","title":"Device Primary Key","text":"<p>This is obtained via the Device details page, as outlined in the previous section.</p> <p>Note</p> <p>You view and copy the key via the icons on the right of the key entry line.</p>"},{"location":"single_page/#root-certificate-authority-ca-file","title":"Root Certificate Authority - CA file","text":"<p>The Certificate Authority file for Azure is downloaded from this page:</p> Microsoft: Azure Certificate Authority details <p>The file to download is the Baltimore CyberTrust Root entry in the Root Certificate Authorities section of the page.</p>"},{"location":"single_page/#setting-properties_2","title":"Setting Properties","text":"<p>The above property values must be set on the DataLogger IoT before use. They can be set via a JSON file that is loaded by the system at startup. Of course, you can also manually set the values using the menu system like the previous MQTT example.</p> <p>For the example outlined in this document, the entries in the settings JSON file are as follows:</p> <pre><code>\"Azure IoT\": {\n\"Enabled\": true,\n\"Port\": 8883,\n\"Server\": \"sparkfun-datalogger-hub.azure-devices.net\",\n\"MQTT Topic\": \"\",\n\"Client Name\": \"\",\n\"Buffer Size\": 0,\n\"Username\": \"\",\n\"Password\": \"\",\n\"Device Key\" : \"My-Super-Secret-Device-Key\",\n\"Device ID\"  : \"TestDevice2023\",\n\"CA Cert Filename\": \"AzureRootCA.pem\"\n},\n</code></pre> <p>Besides updating the <code>Server</code>, <code>Device Key</code>, <code>Device ID</code>, and <code>CA Cert Filename</code>, you will need to also ensure that the <code>port</code> is set to <code>8883</code>. The default in previous firmware versions was <code>1883</code>. As of firmware v01.00.04, the default is <code>8883</code>. You will need to adjust the port value to properly connect to the Azure IoT service.</p> <p>If the JSON file is saved in the microSD card, you will need to load the credentials to the DataLogger IoT. Of course, you can manually update the values through the command line as well to save the credentials to the ESP32's persistent memory.</p>"},{"location":"single_page/#operation-and-monitoring","title":"Operation and Monitoring","text":"<p>Once the DataLogger IoT device is configured and running, the Azure IoT capability in the DataLogger IoT posts messages via MQTT to the connected Azure Device via it's IoT Hub. Messages to the device are posted as Telemetry Data for the device.</p> <p>The easiest method to view the Telemetry data being sent to an Azure Iot Device is via the Azure IoT Hub extension for the Visual Studio Code editor.</p> <p>Once installed, and connected to Azure via the Azure Account extension, you can connect to the target IoT Hub, and monitor telemetry data for a IoT device.</p>"},{"location":"single_page/#connect-to-your-azure-iot-hub","title":"Connect to Your Azure IoT Hub","text":"<p>On the Explorer panel of Visual Studio Code, click on the ... menu of the AZURE IOT HUB section. In the popup menu, select the Select IoT Hub menu entry.</p> <p>The available IoT Hubs are displayed in the editors command prompt. Select the desired hub and press Enter (or click).</p> <p>The hub is then displayed in the AZURE IOT HUB section of the editor Explorer. Expanding the Devices section of the Hub will list the example device created above.</p>"},{"location":"single_page/#monitoring","title":"Monitoring","text":"<p>To monitor the telemetry data send to a device, right click on the device, TestDevice2023 in this example, select the menu entry Start Monitoring Build-in Event Endpoint.</p> <p>Once selected, the editor output console will start displaying output for the selected device. For the above example, with a device that has environmental sensors attached, the output appears as follows:</p> <p>To stop monitoring, click the Stop Monitoring build-in event endpoint item that is displayed in the status bar of the editor.</p> <p>A menu option to stop monitoring is also available from the ... menu of the AZURE IOT HUB section in the editor Explorer panel.</p>"},{"location":"single_page/#example-http","title":"Example - HTTP","text":""},{"location":"single_page/#connecting-and-sending-output-to-an-http-server","title":"Connecting and Sending Output to an HTTP Server","text":"<p>One of the key features of the DataLogger IoT is it's simplified access to IoT service providers and servers. This document outlines how output from a DataLogger IoT device is sent to an HTTP server.</p> <p>The following is covered by this document:</p> <ul> <li>Overview of the HTTP connection</li> <li>How a user configures and uses the HTTP connection</li> <li>Use examples</li> </ul>"},{"location":"single_page/#general-operation_4","title":"General Operation","text":"<p>HTTP connectivity allows data generated by the DataLogger IoT to be sent to an HTTP server. An HTTP endpoint is provided to the HTTP action within the DataLogger IoT, and when data is output, a JSON representation of the data is published to the endpoint via an HTTP POST operation. The body of the POST operation contains the a JSON document that encapsulates the sent DataLogger IoT data.</p>"},{"location":"single_page/#data-structure_2","title":"Data Structure","text":"<p>Data is sent to the HTTP server as a JSON object, which contains a collection of sub-object. Each sub-object represents a data source in the sensor, and contains the current readings from that source.</p> <p>The following is an example of the data posted - note, this representation was \"pretty printed\" for readability.</p> <pre><code>{\n\"MAX17048\": {\n\"Voltage (V)\": 4.304999828,\n\"State Of Charge (%)\": 115.0625,\n\"Change Rate (%/hr)\": 0\n},\n\"CCS811\": {\n\"CO2\": 620,\n\"VOC\": 33\n},\n\"BME280\": {\n\"Humidity\": 25.03613281,\n\"TemperatureF\": 79.64599609,\n\"TemperatureC\": 26.46999931,\n\"Pressure\": 85280.23438,\n\"AltitudeM\": 1430.44104,\n\"AltitudeF\": 4693.04834\n},\n\"ISM330\": {\n\"Accel X (milli-g)\": -53.31399918,\n\"Accel Y (milli-g)\": -34.03800201,\n\"Accel Z (milli-g)\": 1017.236023,\n\"Gyro X (milli-dps)\": 542.5,\n\"Gyro Y (milli-dps)\": -1120,\n\"Gyro Z (milli-dps)\": 262.5,\n\"Temperature (C)\": 26\n},\n\"MMC5983\": {\n\"X Field (Gauss)\": -0.200622559,\n\"Y Field (Gauss)\": 0.076416016,\n\"Z Field (Gauss)\": 0.447570801,\n\"Temperature (C)\": 29\n}\n}\n</code></pre>"},{"location":"single_page/#http-connection-setup","title":"HTTP Connection Setup","text":"<p>To connect to an HTTP server endpoint, the following information is needed:</p> <ul> <li>The URL of the endpoint</li> <li>The SSL certificate for the target server, if the connection is secure (HTTPS)</li> </ul> <p>These values are set using the standard DataLogger methods - the interactive menu system, or a JSON file.</p>"},{"location":"single_page/#menu-system","title":"Menu System","text":"<p>When the menu system for the HTTP connection is presented, the following options are displayed:</p> <p>The options are:</p> <ul> <li>Enable/Disable the connection</li> <li>Set the URL for the endpoint</li> <li>Set the name of the CA Cert file for a secure connection (HTTP)</li> </ul> <p>To set the HTTP URL/endpoint - select two (2) in the menu, and enter the URL. For this example, we'll enter: http://mysparkfunexample.com:8091 .</p> <p>In the above example, the URL/HTTP Endpoint is on a server called <code>mysparkfunexample.com</code>, on port <code>8091</code>. Once set, the system will post data to this URL.</p> <p>If the endpoint is a secure ssl (HTTPS) connection, the certificate for the server is required. Because of the size of the certificates, the value is provided as a file that is loaded into the system by the attached SD card.</p> <p>The above example show providing a certificate filename of <code>example.cer</code>.</p> <p>Once all these values are set, the system will post data to the specified HTTP endpoint, following the JSON information structure noted earlier in this document.</p>"},{"location":"single_page/#json-file-entries_1","title":"JSON File Entries","text":"<p>If a JSON file is being used as an option to import settings into the DataLogger IoT, the following entries are used for the HTTP IoT connection:</p> <pre><code>\"HTTP IoT\": {\n\"Enabled\": false,\n\"URL\": \"&lt;the URL&gt;\",\n\"CA Cert Filename\": \"&lt;certificate filename&gt;\"\n}\n</code></pre> <p>Where:</p> <ul> <li><code>Enabled</code> - Set to <code>true</code> to enable the connection.</li> <li><code>URL</code> - Set to the URL for the connection.</li> <li><code>CA Cert Filename</code> - Set to the cert filename on the SD card if being used.</li> </ul>"},{"location":"single_page/#example-connecting-to-a-http-server","title":"Example - Connecting to a HTTP Server","text":"<p>In this example, a simple HTTP Server is creating using Node JS, and the HTTP connection in the DataLogger IoT is used to post data to this server. The received data is output to the console from there server.</p>"},{"location":"single_page/#the-server","title":"The Server","text":"<p>The following javascript/node code creates a HTTP server on port <code>8090</code>, and outputs received data to the console.</p> <pre><code>var http = require('http');\n// Setup the endpoint server\nvar myServer = http.createServer(function (req, res) {\n// Initialize our body string\nvar body=\"\";\n// on data callback, append chunk to our body string\nreq.on('data', function(chunk){\nbody += chunk;\n});\n// On end callback, output the body to the console\nreq.on('end', function(){\n// parse json string, then stringify it back for 'pretty printing'\nconsole.log(\"payload: \" + JSON.stringify(JSON.parse(body),null,2));\n});\n// send a reply\nres.writeHead(200, {'Content-Type': 'text/plain'});\nres.end('n');\n// Just listen on our port\n}).listen(8090);\n</code></pre> <p>The setup and use of node js is system dependant is beyond the scope of this document. However, Node JS is easily installed with your systems package manager (<code>brew</code> on macOS, Linux distribution package manager (apt, yum, ...etc), on Windows, the WSL is recommended).</p> <p>Once Node is setup, the above server is run via the following command (assuming the implementation is in a file called <code>simple_http.js</code>):</p> <pre><code>node ./simple_http.js\n</code></pre> <p>As data is sent by the DataLogger IoT, the following is output to the console from the server:</p>"},{"location":"single_page/#obtaining-a-sites-security-certificate","title":"Obtaining a Sites Security Certificate","text":"<p>Accessing a sites SSL/Secure Certificate is done via a web browser. The method for each browser is different. The following example uses Edge, which is similar to the operation in Chrome.</p> <p>First, browse to the desired site/server. Click the Secure/Security area/button next to the URL to bring up the security detail page. On this page, select the Connection is secure menu option</p> <p>Next, on the page shown, select the certificate button on the upper right of the dialog.</p> <p>When you select this button, the certificate details dialog is displayed. On this page, select the Details tab, and select the Export... button on the lower right of the dialog. This will save the sites SSL/Security certificate to a location you specify.</p> <p>Once saved, place this file on the SD card your system/DataLogger is using, and set the filename in the HTTP connection menu or settings JSON file.</p>"},{"location":"single_page/#appendix-supported-qwiic-devices","title":"Appendix - Supported Qwiic Devices","text":""},{"location":"single_page/#datalogger-iot-supported-devices","title":"DataLogger IoT Supported Devices","text":"<p>The following table lists the devices/boards supported by the DataLogger IoT Boards, broken down by firmware version.</p>"},{"location":"single_page/#version-10","title":"Version 1.0","text":"<ul> <li>ACS37800 Power Meter</li> <li>SparkFun Qwiic 12 Bit ADC - 4 Channel (ADS1015)</li> <li>Qwiic PT100 - ADS122C04</li> <li>Qwiic Humidity AHT20</li> <li>SparkFun Grid-EYE Infrared Array Breakout - AMG8833 (Qwiic)</li> <li>SparkFun Pulse Oximeter and Heart Rate Sensor - MAX30101 &amp; MAX32664 (Qwiic)</li> <li>SparkFun Atmospheric Sensor Breakout - BME280 (Qwiic)</li> <li>SparkFun Environmental Combo Breakout - CCS811/BME280 (Qwiic)</li> <li>SparkFun Environmental Sensor Breakout - BME680 (Qwiic)</li> <li>SparkFun Environmental Sensor - BME688 (Qwiic)</li> <li>SparkFun Pressure Sensor - BMP384 (Qwiic)</li> <li>SparkFun Pressure Sensor - BMP581 (Qwiic)</li> <li>SparkFun Qwiic Button </li> <li>SparkFun Air Velocity Sensor Breakout - FS3000-1015 (Qwiic)</li> <li>SparkFun Air Velocity Sensor Breakout - FS3000-1005 (Qwiic)</li> <li>SparkFun GPS-RTK2 Board - ZED-F9P (Qwiic)</li> <li>SparkFun GPS-RTK-SMA Breakout - ZED-F9P (Qwiic)</li> <li>SparkFun GPS-RTK Board - NEO-M8P-2 (Qwiic)</li> <li>SparkFun GPS Breakout - Chip Antenna, SAM-M8Q (Qwiic)</li> <li>SparkFun GPS Breakout - NEO-M9N, Chip Antenna (Qwiic)</li> <li>SparkFun GPS Breakout - ZOE-M8Q (Qwiic)</li> <li>SparkFun 6DoF IMU Breakout - ISM330DHCX (Qwiic) and on-board SPI 9DOF</li> <li>SparkFun 9DoF IMU Breakout - ISM330DHCX, MMC5983MA (Qwiic)</li> <li>Qwiic Pressure Sensor - LPS25HB</li> <li>Qwiic Fuel Gauge - MAX17048</li> <li>SparkFun Qwiic Thermocouple Amplifier - MCP9600 (PCC Connector)</li> <li>SparkFun Qwiic Thermocouple Amplifier - MCP9600 (Screw Terminals)</li> <li>SparkFun Qwiic MicroPressure Sensor</li> <li>SparkFun Micro Magnetometer - MMC5983MA (Qwiic) and on-board SPI 9DOF</li> <li>Pressure Sensor (Qwiic) - MS5637</li> <li>Qwiic Pressure/Humidity/Temp (PHT) Sensor - MS8607</li> <li>SparkFun Qwiic Scale - NAU7802</li> <li>SparkFun Real Time Clock Module - RV-8803 (Qwiic)</li> <li>CO\u2082 Humidity and Temperature Sensor - SCD30</li> <li>CO\u2082 Humidity and Temperature Sensor - SCD40 (Qwiic)</li> <li>SparkX Differential Pressure Sensor - SDP31 (Qwiic)</li> <li>Particle, VOC, Humidity, and Temperature Sensor - SEN54</li> <li>SparkFun Air Quality Sensor - SGP30 (Qwiic)</li> <li>SparkFun Air Quality Sensor - SGP40 (Qwiic)</li> <li>SparkFun Humidity Sensor Breakout - SHTC3 (Qwiic)</li> <li>SparkFun Qwiic Dynamic NFC/RFID Tag</li> <li>CO\u2082 Sensor - STC31 (Qwiic)</li> <li>SparkFun Qwiic dToF Imager - TMF8821</li> <li>SparkFun Qwiic dToF Imager - TMF8820</li> <li>SparkFun High Precision Temperature Sensor - TMP117 (Qwiic)</li> <li>SparkFun Qwiic Twist - RGB Rotary Encoder Breakout</li> <li>SparkFun Proximity Sensor Breakout - 20cm, VCNL4040 (Qwiic)</li> <li>SparkFun UV Light Sensor Breakout - VEML6075 (Qwiic)</li> <li>Ambient Light Sensor - VEML7700 (Qwiic)</li> <li>SparkFun Distance Sensor Breakout - 4 Meter, VL53L1X (Qwiic)</li> <li>SparkFun Qwiic ToF Imager - VL53L5CX</li> </ul>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#issues-connecting-to-iot-service","title":"Issues Connecting to IoT Service","text":"<p>Having trouble connecting your DataLogger IoT to an IoT service? Make sure to check your credentials and ensure that the configuration matches the IoT Service (such as your WiFi network, port, server, topic, certificates, keys, etc. to name a few). Make sure to also include the associated certificates and keys in the microSD card as well. You may see an output similar to the following message and image shown below.</p> <pre><code>[W] AWS IoT disconnected - reconnecting.......[E] AWS IoT: MQTT connection failed. Error Code: -2\n</code></pre> <p>In this case, the DataLogger IoT failed to connect to AWS IoT service because port was using the default value that was saved: <code>1883</code>. Ensure that the port is set to <code>8883</code> for your IoT service (e.g. AWS IoT, Azure, and ThingSpeak) and saved in persistent memory in order for the DataLogger IoT to successfully connect. As of firmware v01.00.04, the default is <code>8883</code>.</p>"},{"location":"single_page/#u-blox-i2c-device-disappears-when-iot-datalogger-initializes","title":"U-Blox I<sup>2</sup>C Device Disappears when IoT DataLogger Initializes","text":"<p>If you have issues where a u-blox device that is connected to the I<sup>2</sup>C port fails to connect a second time when the IoT DataLogger initializes, this is due to a bug in the firmware from an initial release. You may see an output similar to the following message and image shown below.</p> <pre><code>[W] GNSS::isConnected no traffic seen (first attempt)\n</code></pre> <p>If you see the following output and the IoT DataLogger not loading your u-blox device, you will need to update the firmware to v01.00.03 and above. For more information, make sure to check out the tutorial on updating your IoT DataLogger's firmware.</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your DataLogger IoT up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>DataLogger IoT - 9DoF<ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> </ul> </li> <li>DataLogger IoT<ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> </ul> </li> <li>CH340 Drivers</li> <li>Firmware</li> <li>GitHub Hardware Repo<ul> <li>SparkFun DataLogger IoT - 9DoF</li> <li>SparkFun DataLogger IoT</li> </ul> </li> <li>SFE Showcase<ul> <li>DataLogger IoT - 9DoF</li> <li>DataLogger IoT</li> </ul> </li> </ul> <p>Or check out these related blog posts.</p> <ul> <li> <p> </p> <p> IoT Platforms and Protocols </p> </li> <li> <p> </p> <p> Extending the Reach of Data Logging </p> </li> <li> <p> </p> <p> Send Sensor Data to AWS All In Under 15 Minutes </p> </li> </ul>"},{"location":"supported_devices/","title":"DataLogger IoT Supported Devices","text":"<p>The following table lists the devices/boards supported by the DataLogger IoT Boards, broken down by firmware version.</p>"},{"location":"supported_devices/#version-10","title":"Version 1.0","text":"<ul> <li>ACS37800 Power Meter</li> <li>SparkFun Qwiic 12 Bit ADC - 4 Channel (ADS1015)</li> <li>Qwiic PT100 - ADS122C04</li> <li>Qwiic Humidity AHT20</li> <li>SparkFun Grid-EYE Infrared Array Breakout - AMG8833 (Qwiic)</li> <li>SparkFun Pulse Oximeter and Heart Rate Sensor - MAX30101 &amp; MAX32664 (Qwiic)</li> <li>SparkFun Atmospheric Sensor Breakout - BME280 (Qwiic)</li> <li>SparkFun Environmental Combo Breakout - CCS811/BME280 (Qwiic)</li> <li>SparkFun Environmental Sensor Breakout - BME680 (Qwiic)</li> <li>SparkFun Environmental Sensor - BME688 (Qwiic)</li> <li>SparkFun Pressure Sensor - BMP384 (Qwiic)</li> <li>SparkFun Pressure Sensor - BMP581 (Qwiic)</li> <li>SparkFun Qwiic Button </li> <li>SparkFun Air Velocity Sensor Breakout - FS3000-1015 (Qwiic)</li> <li>SparkFun Air Velocity Sensor Breakout - FS3000-1005 (Qwiic)</li> <li>SparkFun GPS-RTK2 Board - ZED-F9P (Qwiic)</li> <li>SparkFun GPS-RTK-SMA Breakout - ZED-F9P (Qwiic)</li> <li>SparkFun GPS-RTK Board - NEO-M8P-2 (Qwiic)</li> <li>SparkFun GPS Breakout - Chip Antenna, SAM-M8Q (Qwiic)</li> <li>SparkFun GPS Breakout - NEO-M9N, Chip Antenna (Qwiic)</li> <li>SparkFun GPS Breakout - ZOE-M8Q (Qwiic)</li> <li>SparkFun 6DoF IMU Breakout - ISM330DHCX (Qwiic) and on-board SPI 9DOF</li> <li>SparkFun 9DoF IMU Breakout - ISM330DHCX, MMC5983MA (Qwiic)</li> <li>Qwiic Pressure Sensor - LPS25HB</li> <li>Qwiic Fuel Gauge - MAX17048</li> <li>SparkFun Qwiic Thermocouple Amplifier - MCP9600 (PCC Connector)</li> <li>SparkFun Qwiic Thermocouple Amplifier - MCP9600 (Screw Terminals)</li> <li>SparkFun Qwiic MicroPressure Sensor</li> <li>SparkFun Micro Magnetometer - MMC5983MA (Qwiic) and on-board SPI 9DOF</li> <li>Pressure Sensor (Qwiic) - MS5637</li> <li>Qwiic Pressure/Humidity/Temp (PHT) Sensor - MS8607</li> <li>SparkFun Qwiic Scale - NAU7802</li> <li>SparkFun Real Time Clock Module - RV-8803 (Qwiic)</li> <li>CO\u2082 Humidity and Temperature Sensor - SCD30</li> <li>CO\u2082 Humidity and Temperature Sensor - SCD40 (Qwiic)</li> <li>SparkX Differential Pressure Sensor - SDP31 (Qwiic)</li> <li>Particle, VOC, Humidity, and Temperature Sensor - SEN54</li> <li>SparkFun Air Quality Sensor - SGP30 (Qwiic)</li> <li>SparkFun Air Quality Sensor - SGP40 (Qwiic)</li> <li>SparkFun Humidity Sensor Breakout - SHTC3 (Qwiic)</li> <li>SparkFun Qwiic Dynamic NFC/RFID Tag</li> <li>CO\u2082 Sensor - STC31 (Qwiic)</li> <li>SparkFun Qwiic dToF Imager - TMF8821</li> <li>SparkFun Qwiic dToF Imager - TMF8820</li> <li>SparkFun High Precision Temperature Sensor - TMP117 (Qwiic)</li> <li>SparkFun Qwiic Twist - RGB Rotary Encoder Breakout</li> <li>SparkFun Proximity Sensor Breakout - 20cm, VCNL4040 (Qwiic)</li> <li>SparkFun UV Light Sensor Breakout - VEML6075 (Qwiic)</li> <li>Ambient Light Sensor - VEML7700 (Qwiic)</li> <li>SparkFun Distance Sensor Breakout - 4 Meter, VL53L1X (Qwiic)</li> <li>SparkFun Qwiic ToF Imager - VL53L5CX</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"troubleshooting/#issues-connecting-to-iot-service","title":"Issues Connecting to IoT Service","text":"<p>Having trouble connecting your DataLogger IoT to an IoT service? Make sure to check your credentials and ensure that the configuration matches the IoT Service (such as your WiFi network, port, server, topic, certificates, keys, etc. to name a few). Make sure to also include the associated certificates and keys in the microSD card as well. You may see an output similar to the following message and image shown below.</p> <pre><code>[W] AWS IoT disconnected - reconnecting.......[E] AWS IoT: MQTT connection failed. Error Code: -2\n</code></pre> <p>In this case, the DataLogger IoT failed to connect to AWS IoT service because port was using the default value that was saved: <code>1883</code>. Ensure that the port is set to <code>8883</code> for your IoT service (e.g. AWS IoT, Azure, and ThingSpeak) and saved in persistent memory in order for the DataLogger IoT to successfully connect. As of firmware v01.00.04, the default is <code>8883</code>.</p>"},{"location":"troubleshooting/#u-blox-i2c-device-disappears-when-iot-datalogger-initializes","title":"U-Blox I<sup>2</sup>C Device Disappears when IoT DataLogger Initializes","text":"<p>If you have issues where a u-blox device that is connected to the I<sup>2</sup>C port fails to connect a second time when the IoT DataLogger initializes, this is due to a bug in the firmware from an initial release. You may see an output similar to the following message and image shown below.</p> <pre><code>[W] GNSS::isConnected no traffic seen (first attempt)\n</code></pre> <p>If you see the following output and the IoT DataLogger not loading your u-blox device, you will need to update the firmware to v01.00.03 and above. For more information, make sure to check out the tutorial on updating your IoT DataLogger's firmware.</p>"},{"location":"updating_firmware/","title":"Updating Firmware","text":"<p>Danger</p> <p>Please think very carefully before uploading any Arduino sketches to your DataLogger IoT.</p> <p>You will overwrite the DataLogger IoT firmware, leaving it unable to update or restore itself.</p> <p>Each DataLogger IoT comes pre-programmed with amazing firmware which can do so much. It is designed to be able to update itself and restore itself if necessary. But it can not do that if you overwrite the firmware with any Arduino sketch. It is just like erasing the restore partition on your computer hard drive. Do not do it - unless you really know what you are doing.</p> <p>Really. We mean it.</p>"},{"location":"updating_firmware/#firmware-update-sd-card","title":"Firmware Update - SD Card","text":"<p>This action enables the ability to update the onboard firmware to an image file contained an SD card. This user is presented a list of available firmware images files contained in root directory of the on-board SD card, and updates the board to the selected file.</p> <p>This option is available on ESP32 devices that contained two update firmware (OTA type) partitions within the on-board device flash memory. Consult the specific products production and build system for further details.</p> <p>To download the latest firmware and update through the microSD card, you will need to head to the GitHub repository containing the firmware. Select the firmware version and download.</p> GitHub: SparkFun DataLogger | Firmware Releases <p>Once downloaded, insert the microSD card into a card reader or USB adapter. Then move the files into the memory card's root directory. Below shows an image of v01.00.01 and v01.00.02 on a Windows OS.</p> <p>Once the files are copied to the memory card, eject the microSD card from your computer. Insert the card back into the DataLogger IoT's microSD card socket. Connect the DataLogger IoT to your computer using a USB cable.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then type 16 to enter the System Update Menu. Finally, type 3 to update the firmware from the microSD card. You should see an image similar to the output below.</p> <p>The system will search the root directory of the on-board SD card for available firmware files. The firmware files are selected using the following criteria:</p> <ul> <li>The file is contained in the root \"/\" folder of the SD card.</li> <li>The filename has a \".bin\" extension.</li> <li>The filename starts with a specified name prefix. The prefix is optional and is set by the developers at SparkFun using this action.<ul> <li>For example, the DataLogger IoT boards use a prefix value of \"SparkFun_DataLoggerIoT_\".</li> </ul> </li> </ul> <p>Once a file is selected, the system new firmware is read off the SD card and written to the device.</p> <p>And once updated, the system is rebooted and starts using the new firmware image!</p>"},{"location":"updating_firmware/#firmware-update-over-the-air-ota","title":"Firmware Update - Over-the-Air (OTA)","text":"<p>This action enables the ability to update the onboard firmware to an image file contained on an update server, which is accessed via the WiFi network the system is connected to. This Over-The-Air (OTA) capability contacts the systems update server and searches for newer firmware (later version) for the specific board.</p> <p>This option is available on ESP32 devices that contained two update firmware (OTA type) partitions within the on-board device flash memory. Consult the specific products production and build system for further details.</p> <p>If you have not already, connect the DataLogger IoT to your computer using a USB cable.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then type 16 to enter the System Update Menu. Finally, type 4 to update the firmware over-the-air.</p> <p>When this option is selected, the system will contact the update server and search for available upgrade firmware, selecting the latest version available. If a newer version is found, a prompt is presented to confirm the upgrade.</p> <p>Note</p> <p>For the upgrade option to occur, a the system must be connected to a network and have access to the firmware OTA server.</p> <p>Typing Y (or hitting enter) starts the update operation. As the firmware is downloaded, the percent complete status is updated. If connectivity fails during the download, the operation is halted and the update aborted.</p> <p>Once the update file is downloaded, it is verified as being the correct file. Once verified, the system is rebooted and starts using the new firmware image! You will notice the firmware version change as the DataLogger IoT initializes.</p>"},{"location":"wifi_network/","title":"Connecting to a WiFi Network","text":"<p>Note</p> <p>The ESP32-WROOM can only connect to a 2.4GHz WiFi network. Unfortunately, 5GHz is not supported on the ESP32-WROOM module.</p> <p>To take advantage of syncing the DataLogger to the Network Time Protocol (NTP), logging data to an IoT service, or updating firmware OTA, you will need to connect to a 2.4GHz WiFi network.</p> <p>Open a Serial Terminal, connect to the COM port that your DataLogger enumerated to, and set it to  115200 baud. In this case, we connected to COM13. Press any key to enter the Main Menu. Type 1 to enter the Settings menu. Then send a 4 to configure the WiFi settings.</p> <p>Send a 2 to set the WiFi Network Name. You'll be prompted to set the network name. In this case, the network name is <code>sparkfun</code>. Once you enter the name, hit the enter key.</p> <p>Send a 2 to set the WiFi  password. You'll be prompted to set the password. As you send the password, each character will be masked by a asterisk (i.e. *) Once you enter the name, hit the enter key.</p> <p>Follow the prompts to exit out of the menu properly so that the DataLogger IoT saves the settings.</p> <p>Once you see the message <code>[I] Saving System Settings</code> and data on the output, hit the reset button on the board. You can also use the menu to perform a device restart, however you will need to ensure that you receive the message indicating that the settings were saved before restarting the device.</p> <p>Once the device has restarted, the DataLogger will provide an output as it is initializing. If the WiFi credentials are saved properly, you will receive a message indicating that your chosen network is connected to your WiFi network. If the time source is set to the default NTP client, you will also notice that the time will be synced to the latest date and time!</p>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}